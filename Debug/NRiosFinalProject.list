
NRiosFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b2c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001204  08005cd8  08005cd8  00006cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006edc  08006edc  000080f4  2**0
                  CONTENTS
  4 .ARM          00000008  08006edc  08006edc  00007edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ee4  08006ee4  000080f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ee4  08006ee4  00007ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ee8  08006ee8  00007ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f4  20000000  08006eec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000080f4  2**0
                  CONTENTS
 10 .bss          00025f8c  200000f4  200000f4  000080f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20026080  20026080  000080f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000080f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f306  00000000  00000000  00008124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d28  00000000  00000000  0001742a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  0001a158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf5  00000000  00000000  0001b138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f72  00000000  00000000  0001bd2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000147af  00000000  00000000  00041c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd9f9  00000000  00000000  0005644e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133e47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048a8  00000000  00000000  00133e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00138734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000f4 	.word	0x200000f4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005cc0 	.word	0x08005cc0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000f8 	.word	0x200000f8
 80001e8:	08005cc0 	.word	0x08005cc0

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	@ 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_d2uiz>:
 8000574:	004a      	lsls	r2, r1, #1
 8000576:	d211      	bcs.n	800059c <__aeabi_d2uiz+0x28>
 8000578:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800057c:	d211      	bcs.n	80005a2 <__aeabi_d2uiz+0x2e>
 800057e:	d50d      	bpl.n	800059c <__aeabi_d2uiz+0x28>
 8000580:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000584:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000588:	d40e      	bmi.n	80005a8 <__aeabi_d2uiz+0x34>
 800058a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800058e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000592:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000596:	fa23 f002 	lsr.w	r0, r3, r2
 800059a:	4770      	bx	lr
 800059c:	f04f 0000 	mov.w	r0, #0
 80005a0:	4770      	bx	lr
 80005a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005a6:	d102      	bne.n	80005ae <__aeabi_d2uiz+0x3a>
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	4770      	bx	lr
 80005ae:	f04f 0000 	mov.w	r0, #0
 80005b2:	4770      	bx	lr

080005b4 <__aeabi_uldivmod>:
 80005b4:	b953      	cbnz	r3, 80005cc <__aeabi_uldivmod+0x18>
 80005b6:	b94a      	cbnz	r2, 80005cc <__aeabi_uldivmod+0x18>
 80005b8:	2900      	cmp	r1, #0
 80005ba:	bf08      	it	eq
 80005bc:	2800      	cmpeq	r0, #0
 80005be:	bf1c      	itt	ne
 80005c0:	f04f 31ff 	movne.w	r1, #4294967295
 80005c4:	f04f 30ff 	movne.w	r0, #4294967295
 80005c8:	f000 b96a 	b.w	80008a0 <__aeabi_idiv0>
 80005cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80005d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d4:	f000 f806 	bl	80005e4 <__udivmoddi4>
 80005d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005e0:	b004      	add	sp, #16
 80005e2:	4770      	bx	lr

080005e4 <__udivmoddi4>:
 80005e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e8:	9d08      	ldr	r5, [sp, #32]
 80005ea:	460c      	mov	r4, r1
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d14e      	bne.n	800068e <__udivmoddi4+0xaa>
 80005f0:	4694      	mov	ip, r2
 80005f2:	458c      	cmp	ip, r1
 80005f4:	4686      	mov	lr, r0
 80005f6:	fab2 f282 	clz	r2, r2
 80005fa:	d962      	bls.n	80006c2 <__udivmoddi4+0xde>
 80005fc:	b14a      	cbz	r2, 8000612 <__udivmoddi4+0x2e>
 80005fe:	f1c2 0320 	rsb	r3, r2, #32
 8000602:	4091      	lsls	r1, r2
 8000604:	fa20 f303 	lsr.w	r3, r0, r3
 8000608:	fa0c fc02 	lsl.w	ip, ip, r2
 800060c:	4319      	orrs	r1, r3
 800060e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000612:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000616:	fa1f f68c 	uxth.w	r6, ip
 800061a:	fbb1 f4f7 	udiv	r4, r1, r7
 800061e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000622:	fb07 1114 	mls	r1, r7, r4, r1
 8000626:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800062a:	fb04 f106 	mul.w	r1, r4, r6
 800062e:	4299      	cmp	r1, r3
 8000630:	d90a      	bls.n	8000648 <__udivmoddi4+0x64>
 8000632:	eb1c 0303 	adds.w	r3, ip, r3
 8000636:	f104 30ff 	add.w	r0, r4, #4294967295
 800063a:	f080 8112 	bcs.w	8000862 <__udivmoddi4+0x27e>
 800063e:	4299      	cmp	r1, r3
 8000640:	f240 810f 	bls.w	8000862 <__udivmoddi4+0x27e>
 8000644:	3c02      	subs	r4, #2
 8000646:	4463      	add	r3, ip
 8000648:	1a59      	subs	r1, r3, r1
 800064a:	fa1f f38e 	uxth.w	r3, lr
 800064e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000652:	fb07 1110 	mls	r1, r7, r0, r1
 8000656:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800065a:	fb00 f606 	mul.w	r6, r0, r6
 800065e:	429e      	cmp	r6, r3
 8000660:	d90a      	bls.n	8000678 <__udivmoddi4+0x94>
 8000662:	eb1c 0303 	adds.w	r3, ip, r3
 8000666:	f100 31ff 	add.w	r1, r0, #4294967295
 800066a:	f080 80fc 	bcs.w	8000866 <__udivmoddi4+0x282>
 800066e:	429e      	cmp	r6, r3
 8000670:	f240 80f9 	bls.w	8000866 <__udivmoddi4+0x282>
 8000674:	4463      	add	r3, ip
 8000676:	3802      	subs	r0, #2
 8000678:	1b9b      	subs	r3, r3, r6
 800067a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067e:	2100      	movs	r1, #0
 8000680:	b11d      	cbz	r5, 800068a <__udivmoddi4+0xa6>
 8000682:	40d3      	lsrs	r3, r2
 8000684:	2200      	movs	r2, #0
 8000686:	e9c5 3200 	strd	r3, r2, [r5]
 800068a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068e:	428b      	cmp	r3, r1
 8000690:	d905      	bls.n	800069e <__udivmoddi4+0xba>
 8000692:	b10d      	cbz	r5, 8000698 <__udivmoddi4+0xb4>
 8000694:	e9c5 0100 	strd	r0, r1, [r5]
 8000698:	2100      	movs	r1, #0
 800069a:	4608      	mov	r0, r1
 800069c:	e7f5      	b.n	800068a <__udivmoddi4+0xa6>
 800069e:	fab3 f183 	clz	r1, r3
 80006a2:	2900      	cmp	r1, #0
 80006a4:	d146      	bne.n	8000734 <__udivmoddi4+0x150>
 80006a6:	42a3      	cmp	r3, r4
 80006a8:	d302      	bcc.n	80006b0 <__udivmoddi4+0xcc>
 80006aa:	4290      	cmp	r0, r2
 80006ac:	f0c0 80f0 	bcc.w	8000890 <__udivmoddi4+0x2ac>
 80006b0:	1a86      	subs	r6, r0, r2
 80006b2:	eb64 0303 	sbc.w	r3, r4, r3
 80006b6:	2001      	movs	r0, #1
 80006b8:	2d00      	cmp	r5, #0
 80006ba:	d0e6      	beq.n	800068a <__udivmoddi4+0xa6>
 80006bc:	e9c5 6300 	strd	r6, r3, [r5]
 80006c0:	e7e3      	b.n	800068a <__udivmoddi4+0xa6>
 80006c2:	2a00      	cmp	r2, #0
 80006c4:	f040 8090 	bne.w	80007e8 <__udivmoddi4+0x204>
 80006c8:	eba1 040c 	sub.w	r4, r1, ip
 80006cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006d0:	fa1f f78c 	uxth.w	r7, ip
 80006d4:	2101      	movs	r1, #1
 80006d6:	fbb4 f6f8 	udiv	r6, r4, r8
 80006da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006de:	fb08 4416 	mls	r4, r8, r6, r4
 80006e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006e6:	fb07 f006 	mul.w	r0, r7, r6
 80006ea:	4298      	cmp	r0, r3
 80006ec:	d908      	bls.n	8000700 <__udivmoddi4+0x11c>
 80006ee:	eb1c 0303 	adds.w	r3, ip, r3
 80006f2:	f106 34ff 	add.w	r4, r6, #4294967295
 80006f6:	d202      	bcs.n	80006fe <__udivmoddi4+0x11a>
 80006f8:	4298      	cmp	r0, r3
 80006fa:	f200 80cd 	bhi.w	8000898 <__udivmoddi4+0x2b4>
 80006fe:	4626      	mov	r6, r4
 8000700:	1a1c      	subs	r4, r3, r0
 8000702:	fa1f f38e 	uxth.w	r3, lr
 8000706:	fbb4 f0f8 	udiv	r0, r4, r8
 800070a:	fb08 4410 	mls	r4, r8, r0, r4
 800070e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000712:	fb00 f707 	mul.w	r7, r0, r7
 8000716:	429f      	cmp	r7, r3
 8000718:	d908      	bls.n	800072c <__udivmoddi4+0x148>
 800071a:	eb1c 0303 	adds.w	r3, ip, r3
 800071e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000722:	d202      	bcs.n	800072a <__udivmoddi4+0x146>
 8000724:	429f      	cmp	r7, r3
 8000726:	f200 80b0 	bhi.w	800088a <__udivmoddi4+0x2a6>
 800072a:	4620      	mov	r0, r4
 800072c:	1bdb      	subs	r3, r3, r7
 800072e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000732:	e7a5      	b.n	8000680 <__udivmoddi4+0x9c>
 8000734:	f1c1 0620 	rsb	r6, r1, #32
 8000738:	408b      	lsls	r3, r1
 800073a:	fa22 f706 	lsr.w	r7, r2, r6
 800073e:	431f      	orrs	r7, r3
 8000740:	fa20 fc06 	lsr.w	ip, r0, r6
 8000744:	fa04 f301 	lsl.w	r3, r4, r1
 8000748:	ea43 030c 	orr.w	r3, r3, ip
 800074c:	40f4      	lsrs	r4, r6
 800074e:	fa00 f801 	lsl.w	r8, r0, r1
 8000752:	0c38      	lsrs	r0, r7, #16
 8000754:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000758:	fbb4 fef0 	udiv	lr, r4, r0
 800075c:	fa1f fc87 	uxth.w	ip, r7
 8000760:	fb00 441e 	mls	r4, r0, lr, r4
 8000764:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000768:	fb0e f90c 	mul.w	r9, lr, ip
 800076c:	45a1      	cmp	r9, r4
 800076e:	fa02 f201 	lsl.w	r2, r2, r1
 8000772:	d90a      	bls.n	800078a <__udivmoddi4+0x1a6>
 8000774:	193c      	adds	r4, r7, r4
 8000776:	f10e 3aff 	add.w	sl, lr, #4294967295
 800077a:	f080 8084 	bcs.w	8000886 <__udivmoddi4+0x2a2>
 800077e:	45a1      	cmp	r9, r4
 8000780:	f240 8081 	bls.w	8000886 <__udivmoddi4+0x2a2>
 8000784:	f1ae 0e02 	sub.w	lr, lr, #2
 8000788:	443c      	add	r4, r7
 800078a:	eba4 0409 	sub.w	r4, r4, r9
 800078e:	fa1f f983 	uxth.w	r9, r3
 8000792:	fbb4 f3f0 	udiv	r3, r4, r0
 8000796:	fb00 4413 	mls	r4, r0, r3, r4
 800079a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079e:	fb03 fc0c 	mul.w	ip, r3, ip
 80007a2:	45a4      	cmp	ip, r4
 80007a4:	d907      	bls.n	80007b6 <__udivmoddi4+0x1d2>
 80007a6:	193c      	adds	r4, r7, r4
 80007a8:	f103 30ff 	add.w	r0, r3, #4294967295
 80007ac:	d267      	bcs.n	800087e <__udivmoddi4+0x29a>
 80007ae:	45a4      	cmp	ip, r4
 80007b0:	d965      	bls.n	800087e <__udivmoddi4+0x29a>
 80007b2:	3b02      	subs	r3, #2
 80007b4:	443c      	add	r4, r7
 80007b6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007ba:	fba0 9302 	umull	r9, r3, r0, r2
 80007be:	eba4 040c 	sub.w	r4, r4, ip
 80007c2:	429c      	cmp	r4, r3
 80007c4:	46ce      	mov	lr, r9
 80007c6:	469c      	mov	ip, r3
 80007c8:	d351      	bcc.n	800086e <__udivmoddi4+0x28a>
 80007ca:	d04e      	beq.n	800086a <__udivmoddi4+0x286>
 80007cc:	b155      	cbz	r5, 80007e4 <__udivmoddi4+0x200>
 80007ce:	ebb8 030e 	subs.w	r3, r8, lr
 80007d2:	eb64 040c 	sbc.w	r4, r4, ip
 80007d6:	fa04 f606 	lsl.w	r6, r4, r6
 80007da:	40cb      	lsrs	r3, r1
 80007dc:	431e      	orrs	r6, r3
 80007de:	40cc      	lsrs	r4, r1
 80007e0:	e9c5 6400 	strd	r6, r4, [r5]
 80007e4:	2100      	movs	r1, #0
 80007e6:	e750      	b.n	800068a <__udivmoddi4+0xa6>
 80007e8:	f1c2 0320 	rsb	r3, r2, #32
 80007ec:	fa20 f103 	lsr.w	r1, r0, r3
 80007f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f4:	fa24 f303 	lsr.w	r3, r4, r3
 80007f8:	4094      	lsls	r4, r2
 80007fa:	430c      	orrs	r4, r1
 80007fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000800:	fa00 fe02 	lsl.w	lr, r0, r2
 8000804:	fa1f f78c 	uxth.w	r7, ip
 8000808:	fbb3 f0f8 	udiv	r0, r3, r8
 800080c:	fb08 3110 	mls	r1, r8, r0, r3
 8000810:	0c23      	lsrs	r3, r4, #16
 8000812:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000816:	fb00 f107 	mul.w	r1, r0, r7
 800081a:	4299      	cmp	r1, r3
 800081c:	d908      	bls.n	8000830 <__udivmoddi4+0x24c>
 800081e:	eb1c 0303 	adds.w	r3, ip, r3
 8000822:	f100 36ff 	add.w	r6, r0, #4294967295
 8000826:	d22c      	bcs.n	8000882 <__udivmoddi4+0x29e>
 8000828:	4299      	cmp	r1, r3
 800082a:	d92a      	bls.n	8000882 <__udivmoddi4+0x29e>
 800082c:	3802      	subs	r0, #2
 800082e:	4463      	add	r3, ip
 8000830:	1a5b      	subs	r3, r3, r1
 8000832:	b2a4      	uxth	r4, r4
 8000834:	fbb3 f1f8 	udiv	r1, r3, r8
 8000838:	fb08 3311 	mls	r3, r8, r1, r3
 800083c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000840:	fb01 f307 	mul.w	r3, r1, r7
 8000844:	42a3      	cmp	r3, r4
 8000846:	d908      	bls.n	800085a <__udivmoddi4+0x276>
 8000848:	eb1c 0404 	adds.w	r4, ip, r4
 800084c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000850:	d213      	bcs.n	800087a <__udivmoddi4+0x296>
 8000852:	42a3      	cmp	r3, r4
 8000854:	d911      	bls.n	800087a <__udivmoddi4+0x296>
 8000856:	3902      	subs	r1, #2
 8000858:	4464      	add	r4, ip
 800085a:	1ae4      	subs	r4, r4, r3
 800085c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000860:	e739      	b.n	80006d6 <__udivmoddi4+0xf2>
 8000862:	4604      	mov	r4, r0
 8000864:	e6f0      	b.n	8000648 <__udivmoddi4+0x64>
 8000866:	4608      	mov	r0, r1
 8000868:	e706      	b.n	8000678 <__udivmoddi4+0x94>
 800086a:	45c8      	cmp	r8, r9
 800086c:	d2ae      	bcs.n	80007cc <__udivmoddi4+0x1e8>
 800086e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000872:	eb63 0c07 	sbc.w	ip, r3, r7
 8000876:	3801      	subs	r0, #1
 8000878:	e7a8      	b.n	80007cc <__udivmoddi4+0x1e8>
 800087a:	4631      	mov	r1, r6
 800087c:	e7ed      	b.n	800085a <__udivmoddi4+0x276>
 800087e:	4603      	mov	r3, r0
 8000880:	e799      	b.n	80007b6 <__udivmoddi4+0x1d2>
 8000882:	4630      	mov	r0, r6
 8000884:	e7d4      	b.n	8000830 <__udivmoddi4+0x24c>
 8000886:	46d6      	mov	lr, sl
 8000888:	e77f      	b.n	800078a <__udivmoddi4+0x1a6>
 800088a:	4463      	add	r3, ip
 800088c:	3802      	subs	r0, #2
 800088e:	e74d      	b.n	800072c <__udivmoddi4+0x148>
 8000890:	4606      	mov	r6, r0
 8000892:	4623      	mov	r3, r4
 8000894:	4608      	mov	r0, r1
 8000896:	e70f      	b.n	80006b8 <__udivmoddi4+0xd4>
 8000898:	3e02      	subs	r6, #2
 800089a:	4463      	add	r3, ip
 800089c:	e730      	b.n	8000700 <__udivmoddi4+0x11c>
 800089e:	bf00      	nop

080008a0 <__aeabi_idiv0>:
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop

080008a4 <appDelay>:

static ScreenState currentScreen = SCREEN_MAIN_MENU;
static LTDC_HandleTypeDef hltdc;


void appDelay(uint32_t x){
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	@ 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	char name[LENGTH_FN] = {'N', 'a', 't', 'a', 'l', 'y'};
 80008ac:	4a15      	ldr	r2, [pc, #84]	@ (8000904 <appDelay+0x60>)
 80008ae:	f107 0318 	add.w	r3, r7, #24
 80008b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b6:	6018      	str	r0, [r3, #0]
 80008b8:	3304      	adds	r3, #4
 80008ba:	8019      	strh	r1, [r3, #0]
	[[maybe_unused]] char destinationArr[LENGTH_FN];

	for(volatile uint32_t j = 0;j <= x ; j++){											//count to x (input)
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	e015      	b.n	80008ee <appDelay+0x4a>
		for(volatile uint32_t i = 0; i < LENGTH_FN; i++){
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	e00c      	b.n	80008e2 <appDelay+0x3e>
				destinationArr[i] = name[i];
 80008c8:	68ba      	ldr	r2, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	3220      	adds	r2, #32
 80008ce:	443a      	add	r2, r7
 80008d0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80008d4:	3320      	adds	r3, #32
 80008d6:	443b      	add	r3, r7
 80008d8:	f803 2c10 	strb.w	r2, [r3, #-16]
		for(volatile uint32_t i = 0; i < LENGTH_FN; i++){
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	3301      	adds	r3, #1
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2b05      	cmp	r3, #5
 80008e6:	d9ef      	bls.n	80008c8 <appDelay+0x24>
	for(volatile uint32_t j = 0;j <= x ; j++){											//count to x (input)
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3301      	adds	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d2e5      	bcs.n	80008c2 <appDelay+0x1e>
		}
	}
}
 80008f6:	bf00      	nop
 80008f8:	bf00      	nop
 80008fa:	3724      	adds	r7, #36	@ 0x24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	08005cd8 	.word	0x08005cd8

08000908 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 800090c:	f004 fef4 	bl	80056f8 <initialise_monitor_handles>
	addSchedulerEvent(APP_DELAY_FLAG_EVENT);
 8000910:	2001      	movs	r0, #1
 8000912:	f001 fbd9 	bl	80020c8 <addSchedulerEvent>

    LTCD_Init();
 8000916:	f000 ff1f 	bl	8001758 <LTCD_Init>
	RNG_Init();
 800091a:	f001 fb85 	bl	8002028 <RNG_Init>
	Timer_Init();
 800091e:	f001 fc05 	bl	800212c <Timer_Init>


    applicationButtonInitInterrupt();
 8000922:	f000 f806 	bl	8000932 <applicationButtonInitInterrupt>
    App_LCD_ScreenLayers();
 8000926:	f000 f80a 	bl	800093e <App_LCD_ScreenLayers>
    DrawMainMenu();
 800092a:	f001 fb69 	bl	8002000 <DrawMainMenu>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}

08000932 <applicationButtonInitInterrupt>:
void applicationButtonInitInterrupt(){
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
	Button_Init_Interrupt();
 8000936:	f000 f893 	bl	8000a60 <Button_Init_Interrupt>
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}

0800093e <App_LCD_ScreenLayers>:
void LCD_Visual_Demo(void)
{
	visualDemo();
}

void App_LCD_ScreenLayers(void){
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
	LCD_ScreenLayers();
 8000942:	f001 fab7 	bl	8001eb4 <LCD_ScreenLayers>
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <EXTI0_IRQHandler>:

}
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void EXTI0_IRQHandler(){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	IRQ_DI(EXTI0_IRQ_NUMBER);
 8000950:	2006      	movs	r0, #6
 8000952:	f000 fdc5 	bl	80014e0 <IRQ_DI>

	if (ButtonPressed()){
 8000956:	f000 f873 	bl	8000a40 <ButtonPressed>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d04d      	beq.n	80009fc <EXTI0_IRQHandler+0xb0>
		//printf("Button pressed, currentScreen = %d\n", currentScreen);
		switch(currentScreen){
 8000960:	4b27      	ldr	r3, [pc, #156]	@ (8000a00 <EXTI0_IRQHandler+0xb4>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b02      	cmp	r3, #2
 8000966:	d023      	beq.n	80009b0 <EXTI0_IRQHandler+0x64>
 8000968:	2b02      	cmp	r3, #2
 800096a:	dc3e      	bgt.n	80009ea <EXTI0_IRQHandler+0x9e>
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <EXTI0_IRQHandler+0x2a>
 8000970:	2b01      	cmp	r3, #1
 8000972:	d019      	beq.n	80009a8 <EXTI0_IRQHandler+0x5c>
 8000974:	e039      	b.n	80009ea <EXTI0_IRQHandler+0x9e>
		case SCREEN_MAIN_MENU:
			currentScreen = SCREEN_GAMEPLAY;
 8000976:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <EXTI0_IRQHandler+0xb4>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
			HAL_LTDC_SetAlpha(&hltdc, 0, MAIN_MENU_LAYER);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	4820      	ldr	r0, [pc, #128]	@ (8000a04 <EXTI0_IRQHandler+0xb8>)
 8000982:	f002 ffe3 	bl	800394c <HAL_LTDC_SetAlpha>
			HAL_LTDC_SetAlpha(&hltdc, 0xFF, GAMEPLAY_LAYER);
 8000986:	2201      	movs	r2, #1
 8000988:	21ff      	movs	r1, #255	@ 0xff
 800098a:	481e      	ldr	r0, [pc, #120]	@ (8000a04 <EXTI0_IRQHandler+0xb8>)
 800098c:	f002 ffde 	bl	800394c <HAL_LTDC_SetAlpha>
			HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_IMMEDIATE);
 8000990:	2101      	movs	r1, #1
 8000992:	481c      	ldr	r0, [pc, #112]	@ (8000a04 <EXTI0_IRQHandler+0xb8>)
 8000994:	f003 f810 	bl	80039b8 <HAL_LTDC_Reload>

	        StartTimer();
 8000998:	f001 fbf8 	bl	800218c <StartTimer>
            generateGameGrid();
 800099c:	f000 fb28 	bl	8000ff0 <generateGameGrid>
            addSchedulerEvent(GENERATE_TETRIMINO_EVENT);
 80009a0:	2004      	movs	r0, #4
 80009a2:	f001 fb91 	bl	80020c8 <addSchedulerEvent>
			break;
 80009a6:	e020      	b.n	80009ea <EXTI0_IRQHandler+0x9e>

		case SCREEN_GAMEPLAY:
			//PLAY UNTIL LOSE
			//WHEN LOSE = TRUE, ENDSCREEN LAYER
			addSchedulerEvent(ROTATE_CW_EVENT);
 80009a8:	2008      	movs	r0, #8
 80009aa:	f001 fb8d 	bl	80020c8 <addSchedulerEvent>
			break;
 80009ae:	e01c      	b.n	80009ea <EXTI0_IRQHandler+0x9e>

		case SCREEN_GAME_OVER:
            currentScreen = SCREEN_MAIN_MENU;
 80009b0:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <EXTI0_IRQHandler+0xb4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
            HAL_LTDC_SetAlpha(&hltdc, 0, ENDSCREEN_LAYER);
 80009b6:	2202      	movs	r2, #2
 80009b8:	2100      	movs	r1, #0
 80009ba:	4812      	ldr	r0, [pc, #72]	@ (8000a04 <EXTI0_IRQHandler+0xb8>)
 80009bc:	f002 ffc6 	bl	800394c <HAL_LTDC_SetAlpha>
            HAL_LTDC_SetAlpha(&hltdc, 0xFF, MAIN_MENU_LAYER);
 80009c0:	2200      	movs	r2, #0
 80009c2:	21ff      	movs	r1, #255	@ 0xff
 80009c4:	480f      	ldr	r0, [pc, #60]	@ (8000a04 <EXTI0_IRQHandler+0xb8>)
 80009c6:	f002 ffc1 	bl	800394c <HAL_LTDC_SetAlpha>
            HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_IMMEDIATE);
 80009ca:	2101      	movs	r1, #1
 80009cc:	480d      	ldr	r0, [pc, #52]	@ (8000a04 <EXTI0_IRQHandler+0xb8>)
 80009ce:	f002 fff3 	bl	80039b8 <HAL_LTDC_Reload>

	        StartTimer();
 80009d2:	f001 fbdb 	bl	800218c <StartTimer>
	        LCD_Clear(0,LCD_COLOR_BLACK);
 80009d6:	2100      	movs	r1, #0
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 f913 	bl	8001c04 <LCD_Clear>
            generateGameGrid();
 80009de:	f000 fb07 	bl	8000ff0 <generateGameGrid>
            addSchedulerEvent(GENERATE_TETRIMINO_EVENT);
 80009e2:	2004      	movs	r0, #4
 80009e4:	f001 fb70 	bl	80020c8 <addSchedulerEvent>
            break;
 80009e8:	bf00      	nop

		}
	IRQ_CPI(EXTI0_IRQ_NUMBER);
 80009ea:	2006      	movs	r0, #6
 80009ec:	f000 fd86 	bl	80014fc <IRQ_CPI>
	EXTI_CPIB(GPIO_PIN_0);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f000 fd91 	bl	8001518 <EXTI_CPIB>
	IRQ_EI(EXTI0_IRQ_NUMBER);
 80009f6:	2006      	movs	r0, #6
 80009f8:	f000 fd64 	bl	80014c4 <IRQ_EI>
	}
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000110 	.word	0x20000110
 8000a04:	20000114 	.word	0x20000114

08000a08 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	IRQ_DI(TIM2_IRQ_NUMBER);
 8000a0c:	201c      	movs	r0, #28
 8000a0e:	f000 fd67 	bl	80014e0 <IRQ_DI>
		if (TIM2->SR & UIF_SET){		//if status register and update interrupt flagged bit is 1///macro for UIF
 8000a12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d007      	beq.n	8000a30 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~(UIF_SET);				//uif is 1 in sr now (CLEAR WITH 1)
 8000a20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a24:	691b      	ldr	r3, [r3, #16]
 8000a26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a2a:	f023 0301 	bic.w	r3, r3, #1
 8000a2e:	6113      	str	r3, [r2, #16]
		}
			IRQ_CPI(TIM2_IRQ_NUMBER);
 8000a30:	201c      	movs	r0, #28
 8000a32:	f000 fd63 	bl	80014fc <IRQ_CPI>
			IRQ_EI(TIM2_IRQ_NUMBER);
 8000a36:	201c      	movs	r0, #28
 8000a38:	f000 fd44 	bl	80014c4 <IRQ_EI>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <ButtonPressed>:
 *      Author: poofy
 */
#include "Button_Driver.h"


bool ButtonPressed(){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN) == GPIO_PIN_SET;
 8000a44:	2101      	movs	r1, #1
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <ButtonPressed+0x1c>)
 8000a48:	f002 fe40 	bl	80036cc <HAL_GPIO_ReadPin>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	bf0c      	ite	eq
 8000a52:	2301      	moveq	r3, #1
 8000a54:	2300      	movne	r3, #0
 8000a56:	b2db      	uxtb	r3, r3
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40020000 	.word	0x40020000

08000a60 <Button_Init_Interrupt>:

void Button_Init_Interrupt(void){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef ButtonConfig = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <Button_Init_Interrupt+0x60>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7c:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <Button_Init_Interrupt+0x60>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <Button_Init_Interrupt+0x60>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]
	ButtonConfig.Pin = BUTTON_PIN;
 8000a90:	2301      	movs	r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
	ButtonConfig.Mode = GPIO_MODE_IT_RISING;
 8000a94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a98:	60bb      	str	r3, [r7, #8]
	ButtonConfig.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(BUTTON_PORT, &ButtonConfig);
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <Button_Init_Interrupt+0x64>)
 8000aa4:	f002 fb5a 	bl	800315c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQ_NUMBER, 2, 0);          		////PARAMETERS: IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2102      	movs	r1, #2
 8000aac:	2006      	movs	r0, #6
 8000aae:	f002 fb02 	bl	80030b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQ_NUMBER);
 8000ab2:	2006      	movs	r0, #6
 8000ab4:	f002 fb1b 	bl	80030ee <HAL_NVIC_EnableIRQ>
}
 8000ab8:	bf00      	nop
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <generateTetrimino>:
bool gameOver = false;

int board[GRID_HEIGHT][GRID_WIDTH] = {0};


void generateTetrimino(void){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
	if (lastTetriminoIsPlaced == true){
 8000ace:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <generateTetrimino+0xc8>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d058      	beq.n	8000b88 <generateTetrimino+0xc0>
		if(checkforCollision(currentX, currentY-20)){
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b94 <generateTetrimino+0xcc>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b2f      	ldr	r3, [pc, #188]	@ (8000b98 <generateTetrimino+0xd0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3b14      	subs	r3, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	f000 f862 	bl	8000bac <checkforCollision>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d006      	beq.n	8000afc <generateTetrimino+0x34>
			gameOver = true;
 8000aee:	4b2b      	ldr	r3, [pc, #172]	@ (8000b9c <generateTetrimino+0xd4>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
			addSchedulerEvent(END_GAME_EVENT);
 8000af4:	2020      	movs	r0, #32
 8000af6:	f001 fae7 	bl	80020c8 <addSchedulerEvent>
			return;
 8000afa:	e046      	b.n	8000b8a <generateTetrimino+0xc2>
		}
	RNG_Init();
 8000afc:	f001 fa94 	bl	8002028 <RNG_Init>
	int rando = RNG_Generate();
 8000b00:	f001 fabe 	bl	8002080 <RNG_Generate>
 8000b04:	4603      	mov	r3, r0
 8000b06:	607b      	str	r3, [r7, #4]
	DrawTetriminos(rando, currentX, currentY);
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <generateTetrimino+0xcc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4a22      	ldr	r2, [pc, #136]	@ (8000b98 <generateTetrimino+0xd0>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	b292      	uxth	r2, r2
 8000b14:	4619      	mov	r1, r3
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f001 f800 	bl	8001b1c <DrawTetriminos>
	currentIndex = rando;
 8000b1c:	4a20      	ldr	r2, [pc, #128]	@ (8000ba0 <generateTetrimino+0xd8>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
		//COPY CONTENTS OF GENERATED TETRIMINO TO currentTetrimino
	for (int i = 0; i < 4; i++) {
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	e01e      	b.n	8000b66 <generateTetrimino+0x9e>
		for (int j = 0; j < 4; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	e015      	b.n	8000b5a <generateTetrimino+0x92>
			currentTetrimino[i][j] = Tetriminos[currentIndex][i][j];
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <generateTetrimino+0xd8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	491c      	ldr	r1, [pc, #112]	@ (8000ba4 <generateTetrimino+0xdc>)
 8000b34:	009a      	lsls	r2, r3, #2
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4413      	add	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	18ca      	adds	r2, r1, r3
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	4413      	add	r3, r2
 8000b42:	7819      	ldrb	r1, [r3, #0]
 8000b44:	4a18      	ldr	r2, [pc, #96]	@ (8000ba8 <generateTetrimino+0xe0>)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	441a      	add	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4413      	add	r3, r2
 8000b50:	460a      	mov	r2, r1
 8000b52:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	3301      	adds	r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	dde6      	ble.n	8000b2e <generateTetrimino+0x66>
	for (int i = 0; i < 4; i++) {
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3301      	adds	r3, #1
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	dddd      	ble.n	8000b28 <generateTetrimino+0x60>
		}
	}
	currentX = 120;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <generateTetrimino+0xcc>)
 8000b6e:	2278      	movs	r2, #120	@ 0x78
 8000b70:	601a      	str	r2, [r3, #0]
	currentY = 0;
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <generateTetrimino+0xd0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
	lastTetriminoIsPlaced = false;
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <generateTetrimino+0xc8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]

	HAL_Delay(600);
 8000b7e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000b82:	f002 f957 	bl	8002e34 <HAL_Delay>
 8000b86:	e000      	b.n	8000b8a <generateTetrimino+0xc2>
	}
	else {
		return;
 8000b88:	bf00      	nop
	}
}
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000004 	.word	0x20000004
 8000b94:	20000000 	.word	0x20000000
 8000b98:	200001cc 	.word	0x200001cc
 8000b9c:	200001e8 	.word	0x200001e8
 8000ba0:	200001d0 	.word	0x200001d0
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	200001bc 	.word	0x200001bc

08000bac <checkforCollision>:

bool checkforCollision(int x, int y) {
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	@ 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 4; i++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	e04d      	b.n	8000c58 <checkforCollision+0xac>
        for (int j = 0; j < 4; j++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	e044      	b.n	8000c4c <checkforCollision+0xa0>
            if (currentTetrimino[i][j] == 1) {
 8000bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c6c <checkforCollision+0xc0>)
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	441a      	add	r2, r3
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	4413      	add	r3, r2
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d138      	bne.n	8000c46 <checkforCollision+0x9a>
                int newX = x + j*20;
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	461a      	mov	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4413      	add	r3, r2
 8000be4:	617b      	str	r3, [r7, #20]
                int newY = y + i*20;
 8000be6:	69fa      	ldr	r2, [r7, #28]
 8000be8:	4613      	mov	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
                int newXGrid = newX / 20;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8000c70 <checkforCollision+0xc4>)
 8000bfc:	fb82 1203 	smull	r1, r2, r2, r3
 8000c00:	10d2      	asrs	r2, r2, #3
 8000c02:	17db      	asrs	r3, r3, #31
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	60fb      	str	r3, [r7, #12]
                int newYGrid = newY / 20;
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4a19      	ldr	r2, [pc, #100]	@ (8000c70 <checkforCollision+0xc4>)
 8000c0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c10:	10d2      	asrs	r2, r2, #3
 8000c12:	17db      	asrs	r3, r3, #31
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	60bb      	str	r3, [r7, #8]

                if (newXGrid < 0 || newXGrid >= GRID_WIDTH || newYGrid >= GRID_HEIGHT || board[newYGrid][newXGrid] != 0) {
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db11      	blt.n	8000c42 <checkforCollision+0x96>
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2b0b      	cmp	r3, #11
 8000c22:	dc0e      	bgt.n	8000c42 <checkforCollision+0x96>
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2b0f      	cmp	r3, #15
 8000c28:	dc0b      	bgt.n	8000c42 <checkforCollision+0x96>
 8000c2a:	4912      	ldr	r1, [pc, #72]	@ (8000c74 <checkforCollision+0xc8>)
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	4413      	add	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4413      	add	r3, r2
 8000c3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <checkforCollision+0x9a>
                    return true;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00c      	b.n	8000c60 <checkforCollision+0xb4>
        for (int j = 0; j < 4; j++) {
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	61bb      	str	r3, [r7, #24]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	ddb7      	ble.n	8000bc2 <checkforCollision+0x16>
    for (int i = 0; i < 4; i++) {
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3301      	adds	r3, #1
 8000c56:	61fb      	str	r3, [r7, #28]
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	ddae      	ble.n	8000bbc <checkforCollision+0x10>
                }
            }
        }
    }
    return false; //no collision
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3724      	adds	r7, #36	@ 0x24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	200001bc 	.word	0x200001bc
 8000c70:	66666667 	.word	0x66666667
 8000c74:	200001ec 	.word	0x200001ec

08000c78 <rotateTetriminoCW>:

void rotateTetriminoCW(void){
 8000c78:	b480      	push	{r7}
 8000c7a:	b08d      	sub	sp, #52	@ 0x34
 8000c7c:	af00      	add	r7, sp, #0
	uint8_t tempTetrimino[4][4];
	for (int i = 0; i < 4; i++) {		//TRANSPOSE MATRIX
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c82:	e01b      	b.n	8000cbc <rotateTetriminoCW+0x44>
		for (int j = 0; j < 4; j++) {
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c88:	e012      	b.n	8000cb0 <rotateTetriminoCW+0x38>
	            tempTetrimino[j][i] = currentTetrimino[i][j];
 8000c8a:	4a41      	ldr	r2, [pc, #260]	@ (8000d90 <rotateTetriminoCW+0x118>)
 8000c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	441a      	add	r2, r3
 8000c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c94:	4413      	add	r3, r2
 8000c96:	7819      	ldrb	r1, [r3, #0]
 8000c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	3330      	adds	r3, #48	@ 0x30
 8000c9e:	19da      	adds	r2, r3, r7
 8000ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ca2:	4413      	add	r3, r2
 8000ca4:	3b30      	subs	r3, #48	@ 0x30
 8000ca6:	460a      	mov	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8000caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cac:	3301      	adds	r3, #1
 8000cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	dde9      	ble.n	8000c8a <rotateTetriminoCW+0x12>
	for (int i = 0; i < 4; i++) {		//TRANSPOSE MATRIX
 8000cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cb8:	3301      	adds	r3, #1
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	dde0      	ble.n	8000c84 <rotateTetriminoCW+0xc>
	    }
	}
	for (int i = 0; i < 4; i++) {
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cc6:	e036      	b.n	8000d36 <rotateTetriminoCW+0xbe>
		for (int j = 0, k = 3; j < k; j++, k--) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
 8000ccc:	2303      	movs	r3, #3
 8000cce:	61fb      	str	r3, [r7, #28]
 8000cd0:	e02a      	b.n	8000d28 <rotateTetriminoCW+0xb0>
		    int temp = tempTetrimino[i][j];
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	3330      	adds	r3, #48	@ 0x30
 8000cd8:	19da      	adds	r2, r3, r7
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	4413      	add	r3, r2
 8000cde:	3b30      	subs	r3, #48	@ 0x30
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	613b      	str	r3, [r7, #16]
		    tempTetrimino[i][j] = tempTetrimino[i][k];
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	3330      	adds	r3, #48	@ 0x30
 8000cea:	19da      	adds	r2, r3, r7
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	4413      	add	r3, r2
 8000cf0:	3b30      	subs	r3, #48	@ 0x30
 8000cf2:	7819      	ldrb	r1, [r3, #0]
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	3330      	adds	r3, #48	@ 0x30
 8000cfa:	19da      	adds	r2, r3, r7
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b30      	subs	r3, #48	@ 0x30
 8000d02:	460a      	mov	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
		    tempTetrimino[i][k] = temp;
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	b2d9      	uxtb	r1, r3
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	3330      	adds	r3, #48	@ 0x30
 8000d10:	19da      	adds	r2, r3, r7
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	4413      	add	r3, r2
 8000d16:	3b30      	subs	r3, #48	@ 0x30
 8000d18:	460a      	mov	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
		for (int j = 0, k = 3; j < k; j++, k--) {
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	623b      	str	r3, [r7, #32]
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
 8000d28:	6a3a      	ldr	r2, [r7, #32]
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbd0      	blt.n	8000cd2 <rotateTetriminoCW+0x5a>
	for (int i = 0; i < 4; i++) {
 8000d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d32:	3301      	adds	r3, #1
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	ddc5      	ble.n	8000cc8 <rotateTetriminoCW+0x50>
		}
	}
	for (int i = 0; i < 4; i++) {							//copy transposed, reversed rows NEW MATRIX
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	e01b      	b.n	8000d7a <rotateTetriminoCW+0x102>
		 for (int j = 0; j < 4; j++) {
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	e012      	b.n	8000d6e <rotateTetriminoCW+0xf6>
			 currentTetrimino[i][j] = tempTetrimino[i][j];
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	3330      	adds	r3, #48	@ 0x30
 8000d4e:	19da      	adds	r2, r3, r7
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	4413      	add	r3, r2
 8000d54:	3b30      	subs	r3, #48	@ 0x30
 8000d56:	7819      	ldrb	r1, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <rotateTetriminoCW+0x118>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	441a      	add	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	4413      	add	r3, r2
 8000d64:	460a      	mov	r2, r1
 8000d66:	701a      	strb	r2, [r3, #0]
		 for (int j = 0; j < 4; j++) {
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	dde9      	ble.n	8000d48 <rotateTetriminoCW+0xd0>
	for (int i = 0; i < 4; i++) {							//copy transposed, reversed rows NEW MATRIX
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	3301      	adds	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	dde0      	ble.n	8000d42 <rotateTetriminoCW+0xca>
	     }
	}
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	3734      	adds	r7, #52	@ 0x34
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200001bc 	.word	0x200001bc

08000d94 <rotateTetrimino>:

void rotateTetrimino(void){
 8000d94:	b5b0      	push	{r4, r5, r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
	uint8_t tempTetrimino[4][4];
	clearTetrimino(currentX, currentY);
 8000d9a:	4b37      	ldr	r3, [pc, #220]	@ (8000e78 <rotateTetrimino+0xe4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a37      	ldr	r2, [pc, #220]	@ (8000e7c <rotateTetrimino+0xe8>)
 8000da0:	6812      	ldr	r2, [r2, #0]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f8df 	bl	8000f68 <clearTetrimino>

	for (int i = 0; i < 4; i++) {
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	e01b      	b.n	8000de8 <rotateTetrimino+0x54>
		for (int j = 0; j < 4; j++) {
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	e012      	b.n	8000ddc <rotateTetrimino+0x48>
			tempTetrimino[i][j] = currentTetrimino[i][j];
 8000db6:	4a32      	ldr	r2, [pc, #200]	@ (8000e80 <rotateTetrimino+0xec>)
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	441a      	add	r2, r3
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	7819      	ldrb	r1, [r3, #0]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	3320      	adds	r3, #32
 8000dca:	19da      	adds	r2, r3, r7
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	4413      	add	r3, r2
 8000dd0:	3b20      	subs	r3, #32
 8000dd2:	460a      	mov	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	2b03      	cmp	r3, #3
 8000de0:	dde9      	ble.n	8000db6 <rotateTetrimino+0x22>
	for (int i = 0; i < 4; i++) {
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3301      	adds	r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	dde0      	ble.n	8000db0 <rotateTetrimino+0x1c>
		}
	}
	rotateTetriminoCW();
 8000dee:	f7ff ff43 	bl	8000c78 <rotateTetriminoCW>
	if (checkforCollision(currentX, currentY)){
 8000df2:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <rotateTetrimino+0xe4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a21      	ldr	r2, [pc, #132]	@ (8000e7c <rotateTetrimino+0xe8>)
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fed5 	bl	8000bac <checkforCollision>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d022      	beq.n	8000e4e <rotateTetrimino+0xba>
		for (int i = 0; i < 4; i++) {
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	e01b      	b.n	8000e46 <rotateTetrimino+0xb2>
				for (int j = 0; j < 4; j++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	e012      	b.n	8000e3a <rotateTetrimino+0xa6>
					currentTetrimino[i][j] = tempTetrimino[i][j];
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	3320      	adds	r3, #32
 8000e1a:	19da      	adds	r2, r3, r7
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4413      	add	r3, r2
 8000e20:	3b20      	subs	r3, #32
 8000e22:	7819      	ldrb	r1, [r3, #0]
 8000e24:	4a16      	ldr	r2, [pc, #88]	@ (8000e80 <rotateTetrimino+0xec>)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	441a      	add	r2, r3
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4413      	add	r3, r2
 8000e30:	460a      	mov	r2, r1
 8000e32:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 4; j++) {
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	3301      	adds	r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	dde9      	ble.n	8000e14 <rotateTetrimino+0x80>
		for (int i = 0; i < 4; i++) {
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	3301      	adds	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	dde0      	ble.n	8000e0e <rotateTetrimino+0x7a>
		DrawTetrimino(currentX, currentY, currentTetrimino, TetriminoColors(currentIndex));

	}


}
 8000e4c:	e010      	b.n	8000e70 <rotateTetrimino+0xdc>
		DrawTetrimino(currentX, currentY, currentTetrimino, TetriminoColors(currentIndex));
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <rotateTetrimino+0xe4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	b29c      	uxth	r4, r3
 8000e54:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <rotateTetrimino+0xe8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	b29d      	uxth	r5, r3
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <rotateTetrimino+0xf0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fe28 	bl	8001ab4 <TetriminoColors>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4a06      	ldr	r2, [pc, #24]	@ (8000e80 <rotateTetrimino+0xec>)
 8000e68:	4629      	mov	r1, r5
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f000 fd9e 	bl	80019ac <DrawTetrimino>
}
 8000e70:	bf00      	nop
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bdb0      	pop	{r4, r5, r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	200001cc 	.word	0x200001cc
 8000e80:	200001bc 	.word	0x200001bc
 8000e84:	200001d0 	.word	0x200001d0

08000e88 <placeTetrimino>:

void placeTetrimino(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; i++) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e04f      	b.n	8000f34 <placeTetrimino+0xac>
        for (int j = 0; j < 4; j++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	e046      	b.n	8000f28 <placeTetrimino+0xa0>
            if (currentTetrimino[i][j] == 1) {		//
 8000e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8000f54 <placeTetrimino+0xcc>)
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	441a      	add	r2, r3
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d13a      	bne.n	8000f22 <placeTetrimino+0x9a>
                int newX = currentX + j*20;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <placeTetrimino+0xd0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
                int newY = currentY + i*20;
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <placeTetrimino+0xd4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
                int newXGrid = newX / 20;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4a22      	ldr	r2, [pc, #136]	@ (8000f60 <placeTetrimino+0xd8>)
 8000ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8000edc:	10d2      	asrs	r2, r2, #3
 8000ede:	17db      	asrs	r3, r3, #31
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	607b      	str	r3, [r7, #4]
                int newYGrid = newY / 20;
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8000f60 <placeTetrimino+0xd8>)
 8000ee8:	fb82 1203 	smull	r1, r2, r2, r3
 8000eec:	10d2      	asrs	r2, r2, #3
 8000eee:	17db      	asrs	r3, r3, #31
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	603b      	str	r3, [r7, #0]

                if (newYGrid >= 0 && newYGrid < GRID_HEIGHT && newXGrid >= 0 && newXGrid < GRID_WIDTH) {
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db13      	blt.n	8000f22 <placeTetrimino+0x9a>
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	dc10      	bgt.n	8000f22 <placeTetrimino+0x9a>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0d      	blt.n	8000f22 <placeTetrimino+0x9a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0b      	cmp	r3, #11
 8000f0a:	dc0a      	bgt.n	8000f22 <placeTetrimino+0x9a>
                    board[newYGrid][newXGrid] = 1; //mark position on 12*16 grid as occupied
 8000f0c:	4915      	ldr	r1, [pc, #84]	@ (8000f64 <placeTetrimino+0xdc>)
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < 4; j++) {
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	3301      	adds	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	ddb5      	ble.n	8000e9a <placeTetrimino+0x12>
    for (int i = 0; i < 4; i++) {
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3301      	adds	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	ddac      	ble.n	8000e94 <placeTetrimino+0xc>

                }
            }
        }
    }
    currentX = 120;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <placeTetrimino+0xd0>)
 8000f3c:	2278      	movs	r2, #120	@ 0x78
 8000f3e:	601a      	str	r2, [r3, #0]
    currentY = 0;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <placeTetrimino+0xd4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
    clearRows();
 8000f46:	f000 f8c1 	bl	80010cc <clearRows>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200001bc 	.word	0x200001bc
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	200001cc 	.word	0x200001cc
 8000f60:	66666667 	.word	0x66666667
 8000f64:	200001ec 	.word	0x200001ec

08000f68 <clearTetrimino>:
	    }
}



void clearTetrimino(int x, int y){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 4; i++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	e030      	b.n	8000fda <clearTetrimino+0x72>
		for (int j = 0; j < 4; j++) {
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	e027      	b.n	8000fce <clearTetrimino+0x66>
			if (currentTetrimino[i][j] == 1) { //check if cell is part of tetrimino
 8000f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8000fec <clearTetrimino+0x84>)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	441a      	add	r2, r3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4413      	add	r3, r2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d11b      	bne.n	8000fc8 <clearTetrimino+0x60>
	        	int blockX = x + j * 20; 		//grid coordinates to pixel coordinates
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
	        	int blockY = y + i * 20;
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	461a      	mov	r2, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
	        	LCD_Draw_Rectangle_Fill(blockX, blockY, 20, 20, LCD_COLOR_BLACK);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	b298      	uxth	r0, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	b299      	uxth	r1, r3
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2314      	movs	r3, #20
 8000fc2:	2214      	movs	r2, #20
 8000fc4:	f000 fc4c 	bl	8001860 <LCD_Draw_Rectangle_Fill>
		for (int j = 0; j < 4; j++) {
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	ddd4      	ble.n	8000f7e <clearTetrimino+0x16>
	for (int i = 0; i < 4; i++) {
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	ddcb      	ble.n	8000f78 <clearTetrimino+0x10>
	     	}
		}
	}
	LCD_DrawGrid();
 8000fe0:	f000 ff32 	bl	8001e48 <LCD_DrawGrid>
}
 8000fe4:	bf00      	nop
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200001bc 	.word	0x200001bc

08000ff0 <generateGameGrid>:

void generateGameGrid(void){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	LCD_Clear(ENDSCREEN_LAYER, LCD_COLOR_BLACK);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	f000 fe04 	bl	8001c04 <LCD_Clear>
	LCD_DrawLayer(GAMEPLAY_LAYER);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 fcb9 	bl	8001974 <LCD_DrawLayer>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <moveTetriminoDown>:

void moveTetriminoDown(){
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	af00      	add	r7, sp, #0
	if(!lastTetriminoIsPlaced){
 800100c:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <moveTetriminoDown+0x88>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	f083 0301 	eor.w	r3, r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d039      	beq.n	800108e <moveTetriminoDown+0x86>
	if (checkforCollision(currentX, currentY + 20)){//IF THERE IS A COLLISION
 800101a:	4b1e      	ldr	r3, [pc, #120]	@ (8001094 <moveTetriminoDown+0x8c>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <moveTetriminoDown+0x90>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3314      	adds	r3, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4610      	mov	r0, r2
 8001028:	f7ff fdc0 	bl	8000bac <checkforCollision>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00b      	beq.n	800104a <moveTetriminoDown+0x42>
			placeTetrimino();
 8001032:	f7ff ff29 	bl	8000e88 <placeTetrimino>
			lastTetriminoIsPlaced = true;
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <moveTetriminoDown+0x88>)
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
			removeSchedulerEvent(MOVE_TETRIMINO_DOWN_EVENT);
 800103c:	2010      	movs	r0, #16
 800103e:	f001 f855 	bl	80020ec <removeSchedulerEvent>
			addSchedulerEvent(GENERATE_TETRIMINO_EVENT);
 8001042:	2004      	movs	r0, #4
 8001044:	f001 f840 	bl	80020c8 <addSchedulerEvent>
			return;
 8001048:	e021      	b.n	800108e <moveTetriminoDown+0x86>
	}
	else{
		clearTetrimino(currentX, currentY);
 800104a:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <moveTetriminoDown+0x8c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <moveTetriminoDown+0x90>)
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff87 	bl	8000f68 <clearTetrimino>
		currentY+=20;
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <moveTetriminoDown+0x90>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3314      	adds	r3, #20
 8001060:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <moveTetriminoDown+0x90>)
 8001062:	6013      	str	r3, [r2, #0]
	    DrawTetrimino(currentX, currentY, currentTetrimino, TetriminoColors(currentIndex));
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <moveTetriminoDown+0x8c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	b29c      	uxth	r4, r3
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <moveTetriminoDown+0x90>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	b29d      	uxth	r5, r3
 8001070:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <moveTetriminoDown+0x94>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fd1d 	bl	8001ab4 <TetriminoColors>
 800107a:	4603      	mov	r3, r0
 800107c:	4a08      	ldr	r2, [pc, #32]	@ (80010a0 <moveTetriminoDown+0x98>)
 800107e:	4629      	mov	r1, r5
 8001080:	4620      	mov	r0, r4
 8001082:	f000 fc93 	bl	80019ac <DrawTetrimino>
		HAL_Delay(600);
 8001086:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800108a:	f001 fed3 	bl	8002e34 <HAL_Delay>
	}
	}
}
 800108e:	bdb0      	pop	{r4, r5, r7, pc}
 8001090:	20000004 	.word	0x20000004
 8001094:	20000000 	.word	0x20000000
 8001098:	200001cc 	.word	0x200001cc
 800109c:	200001d0 	.word	0x200001d0
 80010a0:	200001bc 	.word	0x200001bc

080010a4 <gameOverFunction>:

void gameOverFunction(void){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	if (gameOver){
 80010a8:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <gameOverFunction+0x24>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d008      	beq.n	80010c2 <gameOverFunction+0x1e>
		stopTimer();
 80010b0:	f001 f87a 	bl	80021a8 <stopTimer>
		LCD_DrawLayer(ENDSCREEN_LAYER);
 80010b4:	2002      	movs	r0, #2
 80010b6:	f000 fc5d 	bl	8001974 <LCD_DrawLayer>
		removeSchedulerEvent(END_GAME_EVENT);
 80010ba:	2020      	movs	r0, #32
 80010bc:	f001 f816 	bl	80020ec <removeSchedulerEvent>
	}
	return;
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
}
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200001e8 	.word	0x200001e8

080010cc <clearRows>:

void clearRows(void) {
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	@ 0x24
 80010d0:	af00      	add	r7, sp, #0
    int clearedRows = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    for (int y = 0; y < GRID_HEIGHT; y++) {
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	e057      	b.n	800118c <clearRows+0xc0>
        bool fullRow = true;
 80010dc:	2301      	movs	r3, #1
 80010de:	75fb      	strb	r3, [r7, #23]
        for (int x = 0; x < GRID_WIDTH; x++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	e011      	b.n	800110a <clearRows+0x3e>
            if (board[y][x] == 0) {
 80010e6:	494d      	ldr	r1, [pc, #308]	@ (800121c <clearRows+0x150>)
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4413      	add	r3, r2
 80010f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <clearRows+0x38>
                fullRow = false;
 80010fe:	2300      	movs	r3, #0
 8001100:	75fb      	strb	r3, [r7, #23]
                break;
 8001102:	e005      	b.n	8001110 <clearRows+0x44>
        for (int x = 0; x < GRID_WIDTH; x++) {
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	3301      	adds	r3, #1
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	2b0b      	cmp	r3, #11
 800110e:	ddea      	ble.n	80010e6 <clearRows+0x1a>
            }
        }
        if (fullRow) {
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d037      	beq.n	8001186 <clearRows+0xba>
            clearedRows++;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3301      	adds	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
            for (int i = y; i > 0; i--) {
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	e020      	b.n	8001164 <clearRows+0x98>
                for (int j = 0; j < GRID_WIDTH; j++) {
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	e017      	b.n	8001158 <clearRows+0x8c>
                    board[i][j] = board[i - 1][j];
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	1e5a      	subs	r2, r3, #1
 800112c:	493b      	ldr	r1, [pc, #236]	@ (800121c <clearRows+0x150>)
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	4413      	add	r3, r2
 800113a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800113e:	4837      	ldr	r0, [pc, #220]	@ (800121c <clearRows+0x150>)
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	4413      	add	r3, r2
 800114e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                for (int j = 0; j < GRID_WIDTH; j++) {
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	3301      	adds	r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2b0b      	cmp	r3, #11
 800115c:	dde4      	ble.n	8001128 <clearRows+0x5c>
            for (int i = y; i > 0; i--) {
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3b01      	subs	r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	dcdb      	bgt.n	8001122 <clearRows+0x56>
                }
            }
            for (int j = 0; j < GRID_WIDTH; j++) {
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	e007      	b.n	8001180 <clearRows+0xb4>
                board[0][j] = 0; 						//row becomes empty
 8001170:	4a2a      	ldr	r2, [pc, #168]	@ (800121c <clearRows+0x150>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2100      	movs	r1, #0
 8001176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for (int j = 0; j < GRID_WIDTH; j++) {
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3301      	adds	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b0b      	cmp	r3, #11
 8001184:	ddf4      	ble.n	8001170 <clearRows+0xa4>
    for (int y = 0; y < GRID_HEIGHT; y++) {
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	3301      	adds	r3, #1
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	dda4      	ble.n	80010dc <clearRows+0x10>
            }
        }
    }
    switch (clearedRows) {             //counters
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b01      	subs	r3, #1
 8001196:	2b03      	cmp	r3, #3
 8001198:	d838      	bhi.n	800120c <clearRows+0x140>
 800119a:	a201      	add	r2, pc, #4	@ (adr r2, 80011a0 <clearRows+0xd4>)
 800119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a0:	080011b1 	.word	0x080011b1
 80011a4:	080011c7 	.word	0x080011c7
 80011a8:	080011dd 	.word	0x080011dd
 80011ac:	080011f5 	.word	0x080011f5
        case 1:
        	singles++;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <clearRows+0x154>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001220 <clearRows+0x154>)
 80011b8:	6013      	str	r3, [r2, #0]
        	score+= 40;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <clearRows+0x158>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3328      	adds	r3, #40	@ 0x28
 80011c0:	4a18      	ldr	r2, [pc, #96]	@ (8001224 <clearRows+0x158>)
 80011c2:	6013      	str	r3, [r2, #0]
        	break;
 80011c4:	e023      	b.n	800120e <clearRows+0x142>
        case 2:
        	doubles++;
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <clearRows+0x15c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a16      	ldr	r2, [pc, #88]	@ (8001228 <clearRows+0x15c>)
 80011ce:	6013      	str	r3, [r2, #0]
        	score+= 100;
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <clearRows+0x158>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3364      	adds	r3, #100	@ 0x64
 80011d6:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <clearRows+0x158>)
 80011d8:	6013      	str	r3, [r2, #0]
        	break;
 80011da:	e018      	b.n	800120e <clearRows+0x142>
        case 3:
        	triples++;
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <clearRows+0x160>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a12      	ldr	r2, [pc, #72]	@ (800122c <clearRows+0x160>)
 80011e4:	6013      	str	r3, [r2, #0]
        	score+= 300;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <clearRows+0x158>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80011ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001224 <clearRows+0x158>)
 80011f0:	6013      	str	r3, [r2, #0]
        	break;
 80011f2:	e00c      	b.n	800120e <clearRows+0x142>
        case 4:
        	tetrises++;
 80011f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <clearRows+0x164>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <clearRows+0x164>)
 80011fc:	6013      	str	r3, [r2, #0]
        	score+= 1200;
 80011fe:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <clearRows+0x158>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8001206:	4a07      	ldr	r2, [pc, #28]	@ (8001224 <clearRows+0x158>)
 8001208:	6013      	str	r3, [r2, #0]
        	break;
 800120a:	e000      	b.n	800120e <clearRows+0x142>
        default:
        	break;
 800120c:	bf00      	nop
    }
}
 800120e:	bf00      	nop
 8001210:	3724      	adds	r7, #36	@ 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	200001ec 	.word	0x200001ec
 8001220:	200001d4 	.word	0x200001d4
 8001224:	200001e4 	.word	0x200001e4
 8001228:	200001d8 	.word	0x200001d8
 800122c:	200001dc 	.word	0x200001dc
 8001230:	200001e0 	.word	0x200001e0

08001234 <drawEndScreen>:

void updateScore(int points){
	score += points;
}

void drawEndScreen(void){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
	LCD_Clear(0, LCD_COLOR_PINK);
 800123a:	f24d 618f 	movw	r1, #54927	@ 0xd68f
 800123e:	2000      	movs	r0, #0
 8001240:	f000 fce0 	bl	8001c04 <LCD_Clear>
	LCD_DisplayChar(50, 0, 'G');
 8001244:	2247      	movs	r2, #71	@ 0x47
 8001246:	2100      	movs	r1, #0
 8001248:	2032      	movs	r0, #50	@ 0x32
 800124a:	f000 fd8b 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(65, 0, 'A');
 800124e:	2241      	movs	r2, #65	@ 0x41
 8001250:	2100      	movs	r1, #0
 8001252:	2041      	movs	r0, #65	@ 0x41
 8001254:	f000 fd86 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(80, 0, 'M');
 8001258:	224d      	movs	r2, #77	@ 0x4d
 800125a:	2100      	movs	r1, #0
 800125c:	2050      	movs	r0, #80	@ 0x50
 800125e:	f000 fd81 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(95, 0, 'E');
 8001262:	2245      	movs	r2, #69	@ 0x45
 8001264:	2100      	movs	r1, #0
 8001266:	205f      	movs	r0, #95	@ 0x5f
 8001268:	f000 fd7c 	bl	8001d64 <LCD_DisplayChar>

	LCD_DisplayChar(125, 0, 'O');
 800126c:	224f      	movs	r2, #79	@ 0x4f
 800126e:	2100      	movs	r1, #0
 8001270:	207d      	movs	r0, #125	@ 0x7d
 8001272:	f000 fd77 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(140, 0, 'V');
 8001276:	2256      	movs	r2, #86	@ 0x56
 8001278:	2100      	movs	r1, #0
 800127a:	208c      	movs	r0, #140	@ 0x8c
 800127c:	f000 fd72 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(155, 0, 'E');
 8001280:	2245      	movs	r2, #69	@ 0x45
 8001282:	2100      	movs	r1, #0
 8001284:	209b      	movs	r0, #155	@ 0x9b
 8001286:	f000 fd6d 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(170, 0, 'R');
 800128a:	2252      	movs	r2, #82	@ 0x52
 800128c:	2100      	movs	r1, #0
 800128e:	20aa      	movs	r0, #170	@ 0xaa
 8001290:	f000 fd68 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(180, 0, '!');
 8001294:	2221      	movs	r2, #33	@ 0x21
 8001296:	2100      	movs	r1, #0
 8001298:	20b4      	movs	r0, #180	@ 0xb4
 800129a:	f000 fd63 	bl	8001d64 <LCD_DisplayChar>

	LCD_DisplayChar(20, 20, 'S');
 800129e:	2253      	movs	r2, #83	@ 0x53
 80012a0:	2114      	movs	r1, #20
 80012a2:	2014      	movs	r0, #20
 80012a4:	f000 fd5e 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(35, 20, 'i');
 80012a8:	2269      	movs	r2, #105	@ 0x69
 80012aa:	2114      	movs	r1, #20
 80012ac:	2023      	movs	r0, #35	@ 0x23
 80012ae:	f000 fd59 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(50, 20, 'n');
 80012b2:	226e      	movs	r2, #110	@ 0x6e
 80012b4:	2114      	movs	r1, #20
 80012b6:	2032      	movs	r0, #50	@ 0x32
 80012b8:	f000 fd54 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(65, 20, 'g');
 80012bc:	2267      	movs	r2, #103	@ 0x67
 80012be:	2114      	movs	r1, #20
 80012c0:	2041      	movs	r0, #65	@ 0x41
 80012c2:	f000 fd4f 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(80, 20, 'l');
 80012c6:	226c      	movs	r2, #108	@ 0x6c
 80012c8:	2114      	movs	r1, #20
 80012ca:	2050      	movs	r0, #80	@ 0x50
 80012cc:	f000 fd4a 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(95, 20, 'e');
 80012d0:	2265      	movs	r2, #101	@ 0x65
 80012d2:	2114      	movs	r1, #20
 80012d4:	205f      	movs	r0, #95	@ 0x5f
 80012d6:	f000 fd45 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(110, 20, 's');
 80012da:	2273      	movs	r2, #115	@ 0x73
 80012dc:	2114      	movs	r1, #20
 80012de:	206e      	movs	r0, #110	@ 0x6e
 80012e0:	f000 fd40 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(120, 20, ':');
 80012e4:	223a      	movs	r2, #58	@ 0x3a
 80012e6:	2114      	movs	r1, #20
 80012e8:	2078      	movs	r0, #120	@ 0x78
 80012ea:	f000 fd3b 	bl	8001d64 <LCD_DisplayChar>

	LCD_DisplayInt(135, 20, singles);
 80012ee:	4b71      	ldr	r3, [pc, #452]	@ (80014b4 <drawEndScreen+0x280>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	2114      	movs	r1, #20
 80012f6:	2087      	movs	r0, #135	@ 0x87
 80012f8:	f000 fd56 	bl	8001da8 <LCD_DisplayInt>

	LCD_DisplayChar(20, 40, 'D');
 80012fc:	2244      	movs	r2, #68	@ 0x44
 80012fe:	2128      	movs	r1, #40	@ 0x28
 8001300:	2014      	movs	r0, #20
 8001302:	f000 fd2f 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(35, 40, 'o');
 8001306:	226f      	movs	r2, #111	@ 0x6f
 8001308:	2128      	movs	r1, #40	@ 0x28
 800130a:	2023      	movs	r0, #35	@ 0x23
 800130c:	f000 fd2a 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(50, 40, 'u');
 8001310:	2275      	movs	r2, #117	@ 0x75
 8001312:	2128      	movs	r1, #40	@ 0x28
 8001314:	2032      	movs	r0, #50	@ 0x32
 8001316:	f000 fd25 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(65, 40, 'b');
 800131a:	2262      	movs	r2, #98	@ 0x62
 800131c:	2128      	movs	r1, #40	@ 0x28
 800131e:	2041      	movs	r0, #65	@ 0x41
 8001320:	f000 fd20 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(80, 40, 'l');
 8001324:	226c      	movs	r2, #108	@ 0x6c
 8001326:	2128      	movs	r1, #40	@ 0x28
 8001328:	2050      	movs	r0, #80	@ 0x50
 800132a:	f000 fd1b 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(95, 40, 'e');
 800132e:	2265      	movs	r2, #101	@ 0x65
 8001330:	2128      	movs	r1, #40	@ 0x28
 8001332:	205f      	movs	r0, #95	@ 0x5f
 8001334:	f000 fd16 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(110, 40, 's');
 8001338:	2273      	movs	r2, #115	@ 0x73
 800133a:	2128      	movs	r1, #40	@ 0x28
 800133c:	206e      	movs	r0, #110	@ 0x6e
 800133e:	f000 fd11 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(125, 40, ':');
 8001342:	223a      	movs	r2, #58	@ 0x3a
 8001344:	2128      	movs	r1, #40	@ 0x28
 8001346:	207d      	movs	r0, #125	@ 0x7d
 8001348:	f000 fd0c 	bl	8001d64 <LCD_DisplayChar>

	LCD_DisplayInt(135, 20, doubles);
 800134c:	4b5a      	ldr	r3, [pc, #360]	@ (80014b8 <drawEndScreen+0x284>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	2114      	movs	r1, #20
 8001354:	2087      	movs	r0, #135	@ 0x87
 8001356:	f000 fd27 	bl	8001da8 <LCD_DisplayInt>

	LCD_DisplayChar(20, 60, 'T');
 800135a:	2254      	movs	r2, #84	@ 0x54
 800135c:	213c      	movs	r1, #60	@ 0x3c
 800135e:	2014      	movs	r0, #20
 8001360:	f000 fd00 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(35, 60, 'e');
 8001364:	2265      	movs	r2, #101	@ 0x65
 8001366:	213c      	movs	r1, #60	@ 0x3c
 8001368:	2023      	movs	r0, #35	@ 0x23
 800136a:	f000 fcfb 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(50, 60, 't');
 800136e:	2274      	movs	r2, #116	@ 0x74
 8001370:	213c      	movs	r1, #60	@ 0x3c
 8001372:	2032      	movs	r0, #50	@ 0x32
 8001374:	f000 fcf6 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(65, 60, 'r');
 8001378:	2272      	movs	r2, #114	@ 0x72
 800137a:	213c      	movs	r1, #60	@ 0x3c
 800137c:	2041      	movs	r0, #65	@ 0x41
 800137e:	f000 fcf1 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(80, 60, 'i');
 8001382:	2269      	movs	r2, #105	@ 0x69
 8001384:	213c      	movs	r1, #60	@ 0x3c
 8001386:	2050      	movs	r0, #80	@ 0x50
 8001388:	f000 fcec 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(95, 60, 's');
 800138c:	2273      	movs	r2, #115	@ 0x73
 800138e:	213c      	movs	r1, #60	@ 0x3c
 8001390:	205f      	movs	r0, #95	@ 0x5f
 8001392:	f000 fce7 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(110, 60, 'e');
 8001396:	2265      	movs	r2, #101	@ 0x65
 8001398:	213c      	movs	r1, #60	@ 0x3c
 800139a:	206e      	movs	r0, #110	@ 0x6e
 800139c:	f000 fce2 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(125, 60, 's');
 80013a0:	2273      	movs	r2, #115	@ 0x73
 80013a2:	213c      	movs	r1, #60	@ 0x3c
 80013a4:	207d      	movs	r0, #125	@ 0x7d
 80013a6:	f000 fcdd 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(135, 60, ':');
 80013aa:	223a      	movs	r2, #58	@ 0x3a
 80013ac:	213c      	movs	r1, #60	@ 0x3c
 80013ae:	2087      	movs	r0, #135	@ 0x87
 80013b0:	f000 fcd8 	bl	8001d64 <LCD_DisplayChar>

	LCD_DisplayInt(135, 20, tetrises);
 80013b4:	4b41      	ldr	r3, [pc, #260]	@ (80014bc <drawEndScreen+0x288>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	2114      	movs	r1, #20
 80013bc:	2087      	movs	r0, #135	@ 0x87
 80013be:	f000 fcf3 	bl	8001da8 <LCD_DisplayInt>

	LCD_DisplayChar(20, 100, 'T');
 80013c2:	2254      	movs	r2, #84	@ 0x54
 80013c4:	2164      	movs	r1, #100	@ 0x64
 80013c6:	2014      	movs	r0, #20
 80013c8:	f000 fccc 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(35, 100, 'O');
 80013cc:	224f      	movs	r2, #79	@ 0x4f
 80013ce:	2164      	movs	r1, #100	@ 0x64
 80013d0:	2023      	movs	r0, #35	@ 0x23
 80013d2:	f000 fcc7 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(50, 100, 'T');
 80013d6:	2254      	movs	r2, #84	@ 0x54
 80013d8:	2164      	movs	r1, #100	@ 0x64
 80013da:	2032      	movs	r0, #50	@ 0x32
 80013dc:	f000 fcc2 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(65, 100, 'A');
 80013e0:	2241      	movs	r2, #65	@ 0x41
 80013e2:	2164      	movs	r1, #100	@ 0x64
 80013e4:	2041      	movs	r0, #65	@ 0x41
 80013e6:	f000 fcbd 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(80, 100, 'L');
 80013ea:	224c      	movs	r2, #76	@ 0x4c
 80013ec:	2164      	movs	r1, #100	@ 0x64
 80013ee:	2050      	movs	r0, #80	@ 0x50
 80013f0:	f000 fcb8 	bl	8001d64 <LCD_DisplayChar>

	LCD_DisplayChar(110, 100, 'S');
 80013f4:	2253      	movs	r2, #83	@ 0x53
 80013f6:	2164      	movs	r1, #100	@ 0x64
 80013f8:	206e      	movs	r0, #110	@ 0x6e
 80013fa:	f000 fcb3 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(125, 100, 'C');
 80013fe:	2243      	movs	r2, #67	@ 0x43
 8001400:	2164      	movs	r1, #100	@ 0x64
 8001402:	207d      	movs	r0, #125	@ 0x7d
 8001404:	f000 fcae 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(140, 100, 'O');
 8001408:	224f      	movs	r2, #79	@ 0x4f
 800140a:	2164      	movs	r1, #100	@ 0x64
 800140c:	208c      	movs	r0, #140	@ 0x8c
 800140e:	f000 fca9 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(155, 100, 'R');
 8001412:	2252      	movs	r2, #82	@ 0x52
 8001414:	2164      	movs	r1, #100	@ 0x64
 8001416:	209b      	movs	r0, #155	@ 0x9b
 8001418:	f000 fca4 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(170, 100, 'E');
 800141c:	2245      	movs	r2, #69	@ 0x45
 800141e:	2164      	movs	r1, #100	@ 0x64
 8001420:	20aa      	movs	r0, #170	@ 0xaa
 8001422:	f000 fc9f 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(180, 100, ':');
 8001426:	223a      	movs	r2, #58	@ 0x3a
 8001428:	2164      	movs	r1, #100	@ 0x64
 800142a:	20b4      	movs	r0, #180	@ 0xb4
 800142c:	f000 fc9a 	bl	8001d64 <LCD_DisplayChar>

	LCD_DisplayInt(195, 100, score);
 8001430:	4b23      	ldr	r3, [pc, #140]	@ (80014c0 <drawEndScreen+0x28c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	2164      	movs	r1, #100	@ 0x64
 8001438:	20c3      	movs	r0, #195	@ 0xc3
 800143a:	f000 fcb5 	bl	8001da8 <LCD_DisplayInt>

	LCD_DisplayChar(50, 140, 'T');
 800143e:	2254      	movs	r2, #84	@ 0x54
 8001440:	218c      	movs	r1, #140	@ 0x8c
 8001442:	2032      	movs	r0, #50	@ 0x32
 8001444:	f000 fc8e 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(60, 140, 'I');
 8001448:	2249      	movs	r2, #73	@ 0x49
 800144a:	218c      	movs	r1, #140	@ 0x8c
 800144c:	203c      	movs	r0, #60	@ 0x3c
 800144e:	f000 fc89 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(70, 140, 'M');
 8001452:	224d      	movs	r2, #77	@ 0x4d
 8001454:	218c      	movs	r1, #140	@ 0x8c
 8001456:	2046      	movs	r0, #70	@ 0x46
 8001458:	f000 fc84 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(85, 140, 'E');
 800145c:	2245      	movs	r2, #69	@ 0x45
 800145e:	218c      	movs	r1, #140	@ 0x8c
 8001460:	2055      	movs	r0, #85	@ 0x55
 8001462:	f000 fc7f 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(100, 140, ':');
 8001466:	223a      	movs	r2, #58	@ 0x3a
 8001468:	218c      	movs	r1, #140	@ 0x8c
 800146a:	2064      	movs	r0, #100	@ 0x64
 800146c:	f000 fc7a 	bl	8001d64 <LCD_DisplayChar>

	uint32_t x = GetElapsedTime() / 8;
 8001470:	f000 fea4 	bl	80021bc <GetElapsedTime>
 8001474:	4603      	mov	r3, r0
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	607b      	str	r3, [r7, #4]
	LCD_DisplayInt(120, 140, x);
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	218c      	movs	r1, #140	@ 0x8c
 800147e:	2078      	movs	r0, #120	@ 0x78
 8001480:	f000 fc92 	bl	8001da8 <LCD_DisplayInt>


	LCD_DisplayChar(170, 140, 's');
 8001484:	2273      	movs	r2, #115	@ 0x73
 8001486:	218c      	movs	r1, #140	@ 0x8c
 8001488:	20aa      	movs	r0, #170	@ 0xaa
 800148a:	f000 fc6b 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(180, 140, 'e');
 800148e:	2265      	movs	r2, #101	@ 0x65
 8001490:	218c      	movs	r1, #140	@ 0x8c
 8001492:	20b4      	movs	r0, #180	@ 0xb4
 8001494:	f000 fc66 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(190, 140, 'c');
 8001498:	2263      	movs	r2, #99	@ 0x63
 800149a:	218c      	movs	r1, #140	@ 0x8c
 800149c:	20be      	movs	r0, #190	@ 0xbe
 800149e:	f000 fc61 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(200, 140, 's');
 80014a2:	2273      	movs	r2, #115	@ 0x73
 80014a4:	218c      	movs	r1, #140	@ 0x8c
 80014a6:	20c8      	movs	r0, #200	@ 0xc8
 80014a8:	f000 fc5c 	bl	8001d64 <LCD_DisplayChar>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200001d4 	.word	0x200001d4
 80014b8:	200001d8 	.word	0x200001d8
 80014bc:	200001e0 	.word	0x200001e0
 80014c0:	200001e4 	.word	0x200001e4

080014c4 <IRQ_EI>:
		 {0, 0, 0, 0},
		 {0, 0, 0, 0}},
};


void IRQ_EI(uint8_t IRQnum){					//enable interrupt
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_EnableIRQ((IRQn_Type)IRQnum);
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 fe0b 	bl	80030ee <HAL_NVIC_EnableIRQ>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <IRQ_DI>:
void IRQ_DI(uint8_t IRQnum){					//disable interrupt
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ((IRQn_Type)IRQnum);
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fe0b 	bl	800310a <HAL_NVIC_DisableIRQ>

}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <IRQ_CPI>:
void IRQ_SPI(uint8_t IRQnum){						//SET PENDING INTERRUPT
	HAL_NVIC_SetPendingIRQ((IRQn_Type)IRQnum);
}
void IRQ_CPI(uint8_t IRQnum){							//CLEAR PENDING INTERRUPT
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_ClearPendingIRQ((IRQn_Type)IRQnum);
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fe17 	bl	800313e <HAL_NVIC_ClearPendingIRQ>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <EXTI_CPIB>:
void EXTI_CPIB(uint8_t PinNum){						//clear pending interrupt pin
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
	 __HAL_GPIO_EXTI_CLEAR_IT(PinNum);
 8001522:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <EXTI_CPIB+0x1c>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	6153      	str	r3, [r2, #20]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	40013c00 	.word	0x40013c00

08001538 <LCD_GPIO_Init>:
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.



void LCD_GPIO_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	@ 0x30
 800153c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	4b5e      	ldr	r3, [pc, #376]	@ (80016bc <LCD_GPIO_Init+0x184>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	4a5d      	ldr	r2, [pc, #372]	@ (80016bc <LCD_GPIO_Init+0x184>)
 8001548:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800154c:	6453      	str	r3, [r2, #68]	@ 0x44
 800154e:	4b5b      	ldr	r3, [pc, #364]	@ (80016bc <LCD_GPIO_Init+0x184>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	4b57      	ldr	r3, [pc, #348]	@ (80016bc <LCD_GPIO_Init+0x184>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a56      	ldr	r2, [pc, #344]	@ (80016bc <LCD_GPIO_Init+0x184>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b54      	ldr	r3, [pc, #336]	@ (80016bc <LCD_GPIO_Init+0x184>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b50      	ldr	r3, [pc, #320]	@ (80016bc <LCD_GPIO_Init+0x184>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a4f      	ldr	r2, [pc, #316]	@ (80016bc <LCD_GPIO_Init+0x184>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b4d      	ldr	r3, [pc, #308]	@ (80016bc <LCD_GPIO_Init+0x184>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b49      	ldr	r3, [pc, #292]	@ (80016bc <LCD_GPIO_Init+0x184>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	4a48      	ldr	r2, [pc, #288]	@ (80016bc <LCD_GPIO_Init+0x184>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a2:	4b46      	ldr	r3, [pc, #280]	@ (80016bc <LCD_GPIO_Init+0x184>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b42      	ldr	r3, [pc, #264]	@ (80016bc <LCD_GPIO_Init+0x184>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a41      	ldr	r2, [pc, #260]	@ (80016bc <LCD_GPIO_Init+0x184>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b3f      	ldr	r3, [pc, #252]	@ (80016bc <LCD_GPIO_Init+0x184>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b3b      	ldr	r3, [pc, #236]	@ (80016bc <LCD_GPIO_Init+0x184>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a3a      	ldr	r2, [pc, #232]	@ (80016bc <LCD_GPIO_Init+0x184>)
 80015d4:	f043 0320 	orr.w	r3, r3, #32
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b38      	ldr	r3, [pc, #224]	@ (80016bc <LCD_GPIO_Init+0x184>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0320 	and.w	r3, r3, #32
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <LCD_GPIO_Init+0x184>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a33      	ldr	r2, [pc, #204]	@ (80016bc <LCD_GPIO_Init+0x184>)
 80015f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <LCD_GPIO_Init+0x184>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_11 | GPIO_PIN_12;
 8001602:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001610:	2302      	movs	r3, #2
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001614:	230e      	movs	r3, #14
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4828      	ldr	r0, [pc, #160]	@ (80016c0 <LCD_GPIO_Init+0x188>)
 8001620:	f001 fd9c 	bl	800315c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 8001624:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	4824      	ldr	r0, [pc, #144]	@ (80016c4 <LCD_GPIO_Init+0x18c>)
 8001632:	f001 fd93 	bl	800315c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001636:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800163a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4821      	ldr	r0, [pc, #132]	@ (80016c8 <LCD_GPIO_Init+0x190>)
 8001644:	f001 fd8a 	bl	800315c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001648:	2348      	movs	r3, #72	@ 0x48
 800164a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	481e      	ldr	r0, [pc, #120]	@ (80016cc <LCD_GPIO_Init+0x194>)
 8001654:	f001 fd82 	bl	800315c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001658:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800165c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	481a      	ldr	r0, [pc, #104]	@ (80016d0 <LCD_GPIO_Init+0x198>)
 8001666:	f001 fd79 	bl	800315c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800166a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800166e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4619      	mov	r1, r3
 8001676:	4817      	ldr	r0, [pc, #92]	@ (80016d4 <LCD_GPIO_Init+0x19c>)
 8001678:	f001 fd70 	bl	800315c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800167c:	2303      	movs	r3, #3
 800167e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001680:	2309      	movs	r3, #9
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	480e      	ldr	r0, [pc, #56]	@ (80016c4 <LCD_GPIO_Init+0x18c>)
 800168c:	f001 fd66 	bl	800315c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001690:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	480d      	ldr	r0, [pc, #52]	@ (80016d4 <LCD_GPIO_Init+0x19c>)
 800169e:	f001 fd5d 	bl	800315c <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);  // Adjust IRQ number and priority
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	2028      	movs	r0, #40	@ 0x28
 80016a8:	f001 fd05 	bl	80030b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ac:	2028      	movs	r0, #40	@ 0x28
 80016ae:	f001 fd1e 	bl	80030ee <HAL_NVIC_EnableIRQ>
}
 80016b2:	bf00      	nop
 80016b4:	3730      	adds	r7, #48	@ 0x30
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40020800 	.word	0x40020800
 80016cc:	40020c00 	.word	0x40020c00
 80016d0:	40021400 	.word	0x40021400
 80016d4:	40021800 	.word	0x40021800

080016d8 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b090      	sub	sp, #64	@ 0x40
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80016e6:	23f0      	movs	r3, #240	@ 0xf0
 80016e8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80016ee:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80016f2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80016f4:	2302      	movs	r3, #2
 80016f6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80016f8:	23ff      	movs	r3, #255	@ 0xff
 80016fa:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001700:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001704:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001706:	2305      	movs	r3, #5
 8001708:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001710:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <LTCD_Layer_Init+0x78>)
 8001712:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001714:	23f0      	movs	r3, #240	@ 0xf0
 8001716:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001718:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800171c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001730:	79fa      	ldrb	r2, [r7, #7]
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	4619      	mov	r1, r3
 8001738:	4806      	ldr	r0, [pc, #24]	@ (8001754 <LTCD_Layer_Init+0x7c>)
 800173a:	f002 f8c9 	bl	80038d0 <HAL_LTDC_ConfigLayer>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001744:	f000 fbd0 	bl	8001ee8 <LCD_Error_Handler>
	}
}
 8001748:	bf00      	nop
 800174a:	3740      	adds	r7, #64	@ 0x40
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200005cc 	.word	0x200005cc
 8001754:	200004ec 	.word	0x200004ec

08001758 <LTCD_Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800175c:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <LTCD_Init+0xb0>)
 800175e:	4a2b      	ldr	r2, [pc, #172]	@ (800180c <LTCD_Init+0xb4>)
 8001760:	601a      	str	r2, [r3, #0]

	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001762:	4b29      	ldr	r3, [pc, #164]	@ (8001808 <LTCD_Init+0xb0>)
 8001764:	2209      	movs	r2, #9
 8001766:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001768:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <LTCD_Init+0xb0>)
 800176a:	2201      	movs	r2, #1
 800176c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800176e:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <LTCD_Init+0xb0>)
 8001770:	221d      	movs	r2, #29
 8001772:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001774:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <LTCD_Init+0xb0>)
 8001776:	2203      	movs	r2, #3
 8001778:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800177a:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <LTCD_Init+0xb0>)
 800177c:	f240 120d 	movw	r2, #269	@ 0x10d
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001782:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <LTCD_Init+0xb0>)
 8001784:	f240 1243 	movw	r2, #323	@ 0x143
 8001788:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800178a:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <LTCD_Init+0xb0>)
 800178c:	f240 1217 	movw	r2, #279	@ 0x117
 8001790:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001792:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <LTCD_Init+0xb0>)
 8001794:	f240 1247 	movw	r2, #327	@ 0x147
 8001798:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800179a:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <LTCD_Init+0xb0>)
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80017a2:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <LTCD_Init+0xb0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80017aa:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <LTCD_Init+0xb0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017b2:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <LTCD_Init+0xb8>)
 80017b4:	2208      	movs	r2, #8
 80017b6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80017b8:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <LTCD_Init+0xb8>)
 80017ba:	22c0      	movs	r2, #192	@ 0xc0
 80017bc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80017be:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <LTCD_Init+0xb8>)
 80017c0:	2204      	movs	r2, #4
 80017c2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <LTCD_Init+0xb8>)
 80017c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ca:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80017cc:	4810      	ldr	r0, [pc, #64]	@ (8001810 <LTCD_Init+0xb8>)
 80017ce:	f002 fedd 	bl	800458c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <LTCD_Init+0xb0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <LTCD_Init+0xb0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017de:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <LTCD_Init+0xb0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <LTCD_Init+0xb0>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80017ea:	f7ff fea5 	bl	8001538 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80017ee:	4806      	ldr	r0, [pc, #24]	@ (8001808 <LTCD_Init+0xb0>)
 80017f0:	f001 ff9e 	bl	8003730 <HAL_LTDC_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <LTCD_Init+0xa6>
	 {
	   LCD_Error_Handler();
 80017fa:	f000 fb75 	bl	8001ee8 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80017fe:	f000 fcf1 	bl	80021e4 <ili9341_Init>
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200004ec 	.word	0x200004ec
 800180c:	40016800 	.word	0x40016800
 8001810:	20000594 	.word	0x20000594

08001814 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
 800181e:	460b      	mov	r3, r1
 8001820:	80bb      	strh	r3, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	807b      	strh	r3, [r7, #2]
	if(x < 0 || x > 239 || y < 0 || y > 319){
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	2bef      	cmp	r3, #239	@ 0xef
 800182a:	d810      	bhi.n	800184e <LCD_Draw_Pixel+0x3a>
 800182c:	88bb      	ldrh	r3, [r7, #4]
 800182e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001832:	d20c      	bcs.n	800184e <LCD_Draw_Pixel+0x3a>
		return;
	}
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8001834:	88ba      	ldrh	r2, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	461a      	mov	r2, r3
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	4413      	add	r3, r2
 8001844:	4905      	ldr	r1, [pc, #20]	@ (800185c <LCD_Draw_Pixel+0x48>)
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800184c:	e000      	b.n	8001850 <LCD_Draw_Pixel+0x3c>
		return;
 800184e:	bf00      	nop
}
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	200005cc 	.word	0x200005cc

08001860 <LCD_Draw_Rectangle_Fill>:
            }
        }
    }
}

void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t width, uint16_t height, uint16_t color){
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	4604      	mov	r4, r0
 8001868:	4608      	mov	r0, r1
 800186a:	4611      	mov	r1, r2
 800186c:	461a      	mov	r2, r3
 800186e:	4623      	mov	r3, r4
 8001870:	80fb      	strh	r3, [r7, #6]
 8001872:	4603      	mov	r3, r0
 8001874:	80bb      	strh	r3, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	807b      	strh	r3, [r7, #2]
 800187a:	4613      	mov	r3, r2
 800187c:	803b      	strh	r3, [r7, #0]
	for (int16_t y = 0; y < height; y++){
 800187e:	2300      	movs	r3, #0
 8001880:	81fb      	strh	r3, [r7, #14]
 8001882:	e01f      	b.n	80018c4 <LCD_Draw_Rectangle_Fill+0x64>
		for (int16_t x = 0; x < width; x++){
 8001884:	2300      	movs	r3, #0
 8001886:	81bb      	strh	r3, [r7, #12]
 8001888:	e011      	b.n	80018ae <LCD_Draw_Rectangle_Fill+0x4e>
	            LCD_Draw_Pixel(Xpos+x, Ypos+y, color);
 800188a:	89ba      	ldrh	r2, [r7, #12]
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	4413      	add	r3, r2
 8001890:	b298      	uxth	r0, r3
 8001892:	89fa      	ldrh	r2, [r7, #14]
 8001894:	88bb      	ldrh	r3, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	8c3a      	ldrh	r2, [r7, #32]
 800189c:	4619      	mov	r1, r3
 800189e:	f7ff ffb9 	bl	8001814 <LCD_Draw_Pixel>
		for (int16_t x = 0; x < width; x++){
 80018a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3301      	adds	r3, #1
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	81bb      	strh	r3, [r7, #12]
 80018ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dbe8      	blt.n	800188a <LCD_Draw_Rectangle_Fill+0x2a>
	for (int16_t y = 0; y < height; y++){
 80018b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	81fb      	strh	r3, [r7, #14]
 80018c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018c8:	883b      	ldrh	r3, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	dbda      	blt.n	8001884 <LCD_Draw_Rectangle_Fill+0x24>
	    }
	}
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}

080018d8 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4604      	mov	r4, r0
 80018e0:	4608      	mov	r0, r1
 80018e2:	4611      	mov	r1, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	4623      	mov	r3, r4
 80018e8:	80fb      	strh	r3, [r7, #6]
 80018ea:	4603      	mov	r3, r0
 80018ec:	80bb      	strh	r3, [r7, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	807b      	strh	r3, [r7, #2]
 80018f2:	4613      	mov	r3, r2
 80018f4:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	81fb      	strh	r3, [r7, #14]
 80018fa:	e00b      	b.n	8001914 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 80018fc:	89fa      	ldrh	r2, [r7, #14]
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	b299      	uxth	r1, r3
 8001904:	883a      	ldrh	r2, [r7, #0]
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff83 	bl	8001814 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	3301      	adds	r3, #1
 8001912:	81fb      	strh	r3, [r7, #14]
 8001914:	89fa      	ldrh	r2, [r7, #14]
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	429a      	cmp	r2, r3
 800191a:	d3ef      	bcc.n	80018fc <LCD_Draw_Vertical_Line+0x24>
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}

08001926 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001926:	b590      	push	{r4, r7, lr}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	4604      	mov	r4, r0
 800192e:	4608      	mov	r0, r1
 8001930:	4611      	mov	r1, r2
 8001932:	461a      	mov	r2, r3
 8001934:	4623      	mov	r3, r4
 8001936:	80fb      	strh	r3, [r7, #6]
 8001938:	4603      	mov	r3, r0
 800193a:	80bb      	strh	r3, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001944:	2300      	movs	r3, #0
 8001946:	81fb      	strh	r3, [r7, #14]
 8001948:	e00b      	b.n	8001962 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 800194a:	89fa      	ldrh	r2, [r7, #14]
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	883a      	ldrh	r2, [r7, #0]
 8001954:	88b9      	ldrh	r1, [r7, #4]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff5c 	bl	8001814 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800195c:	89fb      	ldrh	r3, [r7, #14]
 800195e:	3301      	adds	r3, #1
 8001960:	81fb      	strh	r3, [r7, #14]
 8001962:	89fa      	ldrh	r2, [r7, #14]
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	429a      	cmp	r2, r3
 8001968:	d3ef      	bcc.n	800194a <LCD_Draw_Horizontal_Line+0x24>
  }
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bd90      	pop	{r4, r7, pc}

08001974 <LCD_DrawLayer>:
void LCD_DrawLayer(uint8_t LayerIndex){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
	if (LayerIndex == MAIN_MENU_LAYER){
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <LCD_DrawLayer+0x14>
			DrawMainMenu();
 8001984:	f000 fb3c 	bl	8002000 <DrawMainMenu>
		}

	if (LayerIndex == GAMEPLAY_LAYER){
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d105      	bne.n	800199a <LCD_DrawLayer+0x26>
			LCD_Clear(0,LCD_COLOR_BLACK);
 800198e:	2100      	movs	r1, #0
 8001990:	2000      	movs	r0, #0
 8001992:	f000 f937 	bl	8001c04 <LCD_Clear>
			LCD_DrawGrid();
 8001996:	f000 fa57 	bl	8001e48 <LCD_DrawGrid>
		}

	if (LayerIndex == ENDSCREEN_LAYER){
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d101      	bne.n	80019a4 <LCD_DrawLayer+0x30>
			drawEndScreen();
 80019a0:	f7ff fc48 	bl	8001234 <drawEndScreen>
		}
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <DrawTetrimino>:

void DrawTetrimino(uint16_t Xpos, uint16_t Ypos, uint8_t tetrimino[4][4], uint16_t color){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60ba      	str	r2, [r7, #8]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4603      	mov	r3, r0
 80019b8:	81fb      	strh	r3, [r7, #14]
 80019ba:	460b      	mov	r3, r1
 80019bc:	81bb      	strh	r3, [r7, #12]
 80019be:	4613      	mov	r3, r2
 80019c0:	80fb      	strh	r3, [r7, #6]
	uint16_t x, y;
	uint16_t i, j;
	uint16_t blockSize = 20;
 80019c2:	2314      	movs	r3, #20
 80019c4:	82fb      	strh	r3, [r7, #22]

	for(y = 0; y < 4; y++){
 80019c6:	2300      	movs	r3, #0
 80019c8:	83bb      	strh	r3, [r7, #28]
 80019ca:	e043      	b.n	8001a54 <DrawTetrimino+0xa8>
		for(x = 0; x < 4; x++){
 80019cc:	2300      	movs	r3, #0
 80019ce:	83fb      	strh	r3, [r7, #30]
 80019d0:	e03a      	b.n	8001a48 <DrawTetrimino+0x9c>
			if (tetrimino[y][x] == 1) {
 80019d2:	8bbb      	ldrh	r3, [r7, #28]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	441a      	add	r2, r3
 80019da:	8bfb      	ldrh	r3, [r7, #30]
 80019dc:	5cd3      	ldrb	r3, [r2, r3]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d12f      	bne.n	8001a42 <DrawTetrimino+0x96>
				uint16_t pixelX = Xpos + x * blockSize;
 80019e2:	8bfa      	ldrh	r2, [r7, #30]
 80019e4:	8afb      	ldrh	r3, [r7, #22]
 80019e6:	fb12 f303 	smulbb	r3, r2, r3
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	89fb      	ldrh	r3, [r7, #14]
 80019ee:	4413      	add	r3, r2
 80019f0:	82bb      	strh	r3, [r7, #20]
				uint16_t pixelY = Ypos + y * blockSize; //////////////
 80019f2:	8bba      	ldrh	r2, [r7, #28]
 80019f4:	8afb      	ldrh	r3, [r7, #22]
 80019f6:	fb12 f303 	smulbb	r3, r2, r3
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	89bb      	ldrh	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	827b      	strh	r3, [r7, #18]
				for (i = 0; i < blockSize; i++) {
 8001a02:	2300      	movs	r3, #0
 8001a04:	837b      	strh	r3, [r7, #26]
 8001a06:	e018      	b.n	8001a3a <DrawTetrimino+0x8e>
				   for (j = 0; j < blockSize; j++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	833b      	strh	r3, [r7, #24]
 8001a0c:	e00e      	b.n	8001a2c <DrawTetrimino+0x80>
				       LCD_Draw_Pixel(pixelX + i, pixelY + j, color); //fill in block, resolve error of single pixel every 20x pixels
 8001a0e:	8aba      	ldrh	r2, [r7, #20]
 8001a10:	8b7b      	ldrh	r3, [r7, #26]
 8001a12:	4413      	add	r3, r2
 8001a14:	b298      	uxth	r0, r3
 8001a16:	8a7a      	ldrh	r2, [r7, #18]
 8001a18:	8b3b      	ldrh	r3, [r7, #24]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	88fa      	ldrh	r2, [r7, #6]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f7ff fef7 	bl	8001814 <LCD_Draw_Pixel>
				   for (j = 0; j < blockSize; j++) {
 8001a26:	8b3b      	ldrh	r3, [r7, #24]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	833b      	strh	r3, [r7, #24]
 8001a2c:	8b3a      	ldrh	r2, [r7, #24]
 8001a2e:	8afb      	ldrh	r3, [r7, #22]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d3ec      	bcc.n	8001a0e <DrawTetrimino+0x62>
				for (i = 0; i < blockSize; i++) {
 8001a34:	8b7b      	ldrh	r3, [r7, #26]
 8001a36:	3301      	adds	r3, #1
 8001a38:	837b      	strh	r3, [r7, #26]
 8001a3a:	8b7a      	ldrh	r2, [r7, #26]
 8001a3c:	8afb      	ldrh	r3, [r7, #22]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d3e2      	bcc.n	8001a08 <DrawTetrimino+0x5c>
		for(x = 0; x < 4; x++){
 8001a42:	8bfb      	ldrh	r3, [r7, #30]
 8001a44:	3301      	adds	r3, #1
 8001a46:	83fb      	strh	r3, [r7, #30]
 8001a48:	8bfb      	ldrh	r3, [r7, #30]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d9c1      	bls.n	80019d2 <DrawTetrimino+0x26>
	for(y = 0; y < 4; y++){
 8001a4e:	8bbb      	ldrh	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	83bb      	strh	r3, [r7, #28]
 8001a54:	8bbb      	ldrh	r3, [r7, #28]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d9b8      	bls.n	80019cc <DrawTetrimino+0x20>
				   }
				}
			}
		}
	}
}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <MainTetriminoes>:

void MainTetriminoes(void){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	DrawTetriminos(0, 50, 30);
 8001a68:	221e      	movs	r2, #30
 8001a6a:	2132      	movs	r1, #50	@ 0x32
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f000 f855 	bl	8001b1c <DrawTetriminos>
	DrawTetriminos(1, 120, 30);
 8001a72:	221e      	movs	r2, #30
 8001a74:	2178      	movs	r1, #120	@ 0x78
 8001a76:	2001      	movs	r0, #1
 8001a78:	f000 f850 	bl	8001b1c <DrawTetriminos>
	DrawTetriminos(2, 10, 80);
 8001a7c:	2250      	movs	r2, #80	@ 0x50
 8001a7e:	210a      	movs	r1, #10
 8001a80:	2002      	movs	r0, #2
 8001a82:	f000 f84b 	bl	8001b1c <DrawTetriminos>
	DrawTetriminos(3, 150, 130);
 8001a86:	2282      	movs	r2, #130	@ 0x82
 8001a88:	2196      	movs	r1, #150	@ 0x96
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	f000 f846 	bl	8001b1c <DrawTetriminos>
	DrawTetriminos(4, 100, 110);
 8001a90:	226e      	movs	r2, #110	@ 0x6e
 8001a92:	2164      	movs	r1, #100	@ 0x64
 8001a94:	2004      	movs	r0, #4
 8001a96:	f000 f841 	bl	8001b1c <DrawTetriminos>
	DrawTetriminos(5, 30, 170);
 8001a9a:	22aa      	movs	r2, #170	@ 0xaa
 8001a9c:	211e      	movs	r1, #30
 8001a9e:	2005      	movs	r0, #5
 8001aa0:	f000 f83c 	bl	8001b1c <DrawTetriminos>
	DrawTetriminos(6, 130, 180);
 8001aa4:	22b4      	movs	r2, #180	@ 0xb4
 8001aa6:	2182      	movs	r1, #130	@ 0x82
 8001aa8:	2006      	movs	r0, #6
 8001aaa:	f000 f837 	bl	8001b1c <DrawTetriminos>
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <TetriminoColors>:

uint16_t TetriminoColors(int x){
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	switch(x){
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d824      	bhi.n	8001b0c <TetriminoColors+0x58>
 8001ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac8 <TetriminoColors+0x14>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ae5 	.word	0x08001ae5
 8001acc:	08001aeb 	.word	0x08001aeb
 8001ad0:	08001af1 	.word	0x08001af1
 8001ad4:	08001af7 	.word	0x08001af7
 8001ad8:	08001afd 	.word	0x08001afd
 8001adc:	08001b01 	.word	0x08001b01
 8001ae0:	08001b07 	.word	0x08001b07
		case 0:
			return LCD_COLOR_CYAN;
 8001ae4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001ae8:	e011      	b.n	8001b0e <TetriminoColors+0x5a>
			break;
		case 1:
			return LCD_COLOR_YELLOW;
 8001aea:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001aee:	e00e      	b.n	8001b0e <TetriminoColors+0x5a>
			break;
		case 2:
			return LCD_COLOR_MAGENTA;
 8001af0:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001af4:	e00b      	b.n	8001b0e <TetriminoColors+0x5a>
			break;
		case 3:
			return LCD_COLOR_ORANGE;
 8001af6:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8001afa:	e008      	b.n	8001b0e <TetriminoColors+0x5a>
			break;
		case 4:
			return LCD_COLOR_BLUE;
 8001afc:	231f      	movs	r3, #31
 8001afe:	e006      	b.n	8001b0e <TetriminoColors+0x5a>
			break;
		case 5:
			return LCD_COLOR_GREEN;
 8001b00:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b04:	e003      	b.n	8001b0e <TetriminoColors+0x5a>
			break;
		case 6:
			return LCD_COLOR_RED;
 8001b06:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001b0a:	e000      	b.n	8001b0e <TetriminoColors+0x5a>
			break;
		default:
			return 0;
 8001b0c:	2300      	movs	r3, #0
	}
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop

08001b1c <DrawTetriminos>:


void DrawTetriminos(int x, uint16_t posX, uint16_t posY){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	803b      	strh	r3, [r7, #0]
	switch(x){
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d856      	bhi.n	8001be0 <DrawTetriminos+0xc4>
 8001b32:	a201      	add	r2, pc, #4	@ (adr r2, 8001b38 <DrawTetriminos+0x1c>)
 8001b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b38:	08001b55 	.word	0x08001b55
 8001b3c:	08001b69 	.word	0x08001b69
 8001b40:	08001b7d 	.word	0x08001b7d
 8001b44:	08001b91 	.word	0x08001b91
 8001b48:	08001ba5 	.word	0x08001ba5
 8001b4c:	08001bb9 	.word	0x08001bb9
 8001b50:	08001bcd 	.word	0x08001bcd
	case 0:
		DrawTetrimino(posX, posY, Tetriminos[0], TetriminoColors(0));
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff ffad 	bl	8001ab4 <TetriminoColors>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	8839      	ldrh	r1, [r7, #0]
 8001b5e:	8878      	ldrh	r0, [r7, #2]
 8001b60:	4a21      	ldr	r2, [pc, #132]	@ (8001be8 <DrawTetriminos+0xcc>)
 8001b62:	f7ff ff23 	bl	80019ac <DrawTetrimino>
		break;
 8001b66:	e03b      	b.n	8001be0 <DrawTetriminos+0xc4>
	case 1:
		DrawTetrimino(posX, posY, Tetriminos[1], TetriminoColors(1));
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f7ff ffa3 	bl	8001ab4 <TetriminoColors>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	8839      	ldrh	r1, [r7, #0]
 8001b72:	8878      	ldrh	r0, [r7, #2]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	@ (8001bec <DrawTetriminos+0xd0>)
 8001b76:	f7ff ff19 	bl	80019ac <DrawTetrimino>
		break;
 8001b7a:	e031      	b.n	8001be0 <DrawTetriminos+0xc4>
	case 2:
		DrawTetrimino(posX, posY, Tetriminos[2], TetriminoColors(2));
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f7ff ff99 	bl	8001ab4 <TetriminoColors>
 8001b82:	4603      	mov	r3, r0
 8001b84:	8839      	ldrh	r1, [r7, #0]
 8001b86:	8878      	ldrh	r0, [r7, #2]
 8001b88:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <DrawTetriminos+0xd4>)
 8001b8a:	f7ff ff0f 	bl	80019ac <DrawTetrimino>
		break;
 8001b8e:	e027      	b.n	8001be0 <DrawTetriminos+0xc4>
	case 3:
		DrawTetrimino(posX, posY, Tetriminos[3], TetriminoColors(3));
 8001b90:	2003      	movs	r0, #3
 8001b92:	f7ff ff8f 	bl	8001ab4 <TetriminoColors>
 8001b96:	4603      	mov	r3, r0
 8001b98:	8839      	ldrh	r1, [r7, #0]
 8001b9a:	8878      	ldrh	r0, [r7, #2]
 8001b9c:	4a15      	ldr	r2, [pc, #84]	@ (8001bf4 <DrawTetriminos+0xd8>)
 8001b9e:	f7ff ff05 	bl	80019ac <DrawTetrimino>
		break;
 8001ba2:	e01d      	b.n	8001be0 <DrawTetriminos+0xc4>
	case 4:
		DrawTetrimino(posX, posY, Tetriminos[4], TetriminoColors(4));
 8001ba4:	2004      	movs	r0, #4
 8001ba6:	f7ff ff85 	bl	8001ab4 <TetriminoColors>
 8001baa:	4603      	mov	r3, r0
 8001bac:	8839      	ldrh	r1, [r7, #0]
 8001bae:	8878      	ldrh	r0, [r7, #2]
 8001bb0:	4a11      	ldr	r2, [pc, #68]	@ (8001bf8 <DrawTetriminos+0xdc>)
 8001bb2:	f7ff fefb 	bl	80019ac <DrawTetrimino>
		break;
 8001bb6:	e013      	b.n	8001be0 <DrawTetriminos+0xc4>
	case 5:
		DrawTetrimino(posX, posY, Tetriminos[5], TetriminoColors(5));
 8001bb8:	2005      	movs	r0, #5
 8001bba:	f7ff ff7b 	bl	8001ab4 <TetriminoColors>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	8839      	ldrh	r1, [r7, #0]
 8001bc2:	8878      	ldrh	r0, [r7, #2]
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <DrawTetriminos+0xe0>)
 8001bc6:	f7ff fef1 	bl	80019ac <DrawTetrimino>
		break;
 8001bca:	e009      	b.n	8001be0 <DrawTetriminos+0xc4>
	case 6:
		DrawTetrimino( posX, posY, Tetriminos[6], TetriminoColors(6));
 8001bcc:	2006      	movs	r0, #6
 8001bce:	f7ff ff71 	bl	8001ab4 <TetriminoColors>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	8839      	ldrh	r1, [r7, #0]
 8001bd6:	8878      	ldrh	r0, [r7, #2]
 8001bd8:	4a09      	ldr	r2, [pc, #36]	@ (8001c00 <DrawTetriminos+0xe4>)
 8001bda:	f7ff fee7 	bl	80019ac <DrawTetrimino>
		break;
 8001bde:	bf00      	nop
	}
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000008 	.word	0x20000008
 8001bec:	20000018 	.word	0x20000018
 8001bf0:	20000028 	.word	0x20000028
 8001bf4:	20000038 	.word	0x20000038
 8001bf8:	20000048 	.word	0x20000048
 8001bfc:	20000058 	.word	0x20000058
 8001c00:	20000068 	.word	0x20000068

08001c04 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	4613      	mov	r3, r2
 8001c12:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10e      	bne.n	8001c38 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e007      	b.n	8001c30 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001c20:	4908      	ldr	r1, [pc, #32]	@ (8001c44 <LCD_Clear+0x40>)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	88ba      	ldrh	r2, [r7, #4]
 8001c26:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001c36:	d3f3      	bcc.n	8001c20 <LCD_Clear+0x1c>
		}
	}
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	200005cc 	.word	0x200005cc

08001c48 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001c52:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <LCD_SetTextColor+0x1c>)
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	8013      	strh	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	200005c8 	.word	0x200005c8

08001c68 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001c70:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <LCD_SetFont+0x1c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	200005c4 	.word	0x200005c4

08001c88 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	603a      	str	r2, [r7, #0]
 8001c92:	80fb      	strh	r3, [r7, #6]
 8001c94:	460b      	mov	r3, r1
 8001c96:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	e04c      	b.n	8001d40 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	e03f      	b.n	8001d2c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4b27      	ldr	r3, [pc, #156]	@ (8001d58 <LCD_Draw_Char+0xd0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	889b      	ldrh	r3, [r3, #4]
 8001cbe:	4a27      	ldr	r2, [pc, #156]	@ (8001d5c <LCD_Draw_Char+0xd4>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	08db      	lsrs	r3, r3, #3
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	2280      	movs	r2, #128	@ 0x80
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	fa42 f303 	asr.w	r3, r2, r3
 8001cd4:	400b      	ands	r3, r1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <LCD_Draw_Char+0x5c>
 8001cda:	4b1f      	ldr	r3, [pc, #124]	@ (8001d58 <LCD_Draw_Char+0xd0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	889b      	ldrh	r3, [r3, #4]
 8001ce0:	2b0c      	cmp	r3, #12
 8001ce2:	d920      	bls.n	8001d26 <LCD_Draw_Char+0x9e>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	fa42 f303 	asr.w	r3, r2, r3
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d104      	bne.n	8001d08 <LCD_Draw_Char+0x80>
 8001cfe:	4b16      	ldr	r3, [pc, #88]	@ (8001d58 <LCD_Draw_Char+0xd0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	889b      	ldrh	r3, [r3, #4]
 8001d04:	2b0c      	cmp	r3, #12
 8001d06:	d80e      	bhi.n	8001d26 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b298      	uxth	r0, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	88bb      	ldrh	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4a10      	ldr	r2, [pc, #64]	@ (8001d60 <LCD_Draw_Char+0xd8>)
 8001d1e:	8812      	ldrh	r2, [r2, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	f7ff fd77 	bl	8001814 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <LCD_Draw_Char+0xd0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	889b      	ldrh	r3, [r3, #4]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d3b8      	bcc.n	8001cac <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <LCD_Draw_Char+0xd0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	88db      	ldrh	r3, [r3, #6]
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d3ab      	bcc.n	8001ca6 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001d4e:	bf00      	nop
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200005c4 	.word	0x200005c4
 8001d5c:	aaaaaaab 	.word	0xaaaaaaab
 8001d60:	200005c8 	.word	0x200005c8

08001d64 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	80bb      	strh	r3, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	3b20      	subs	r3, #32
 8001d7a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <LCD_DisplayChar+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	4907      	ldr	r1, [pc, #28]	@ (8001da4 <LCD_DisplayChar+0x40>)
 8001d86:	6809      	ldr	r1, [r1, #0]
 8001d88:	88c9      	ldrh	r1, [r1, #6]
 8001d8a:	fb01 f303 	mul.w	r3, r1, r3
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	441a      	add	r2, r3
 8001d92:	88b9      	ldrh	r1, [r7, #4]
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff76 	bl	8001c88 <LCD_Draw_Char>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200005c4 	.word	0x200005c4

08001da8 <LCD_DisplayInt>:

void LCD_DisplayInt(uint16_t Xpos, uint16_t Ypos, uint32_t rnum){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	603a      	str	r2, [r7, #0]
 8001db2:	80fb      	strh	r3, [r7, #6]
 8001db4:	460b      	mov	r3, r1
 8001db6:	80bb      	strh	r3, [r7, #4]
	char buffer[10];
	int i = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]

	if (rnum == 0){
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d122      	bne.n	8001e08 <LCD_DisplayInt+0x60>
		LCD_DisplayChar(Xpos, Ypos, '0');
 8001dc2:	88b9      	ldrh	r1, [r7, #4]
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	2230      	movs	r2, #48	@ 0x30
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ffcb 	bl	8001d64 <LCD_DisplayChar>
 8001dce:	e035      	b.n	8001e3c <LCD_DisplayInt+0x94>
		return;
	}
	while (rnum > 0) {					//extract in reverse order
		buffer[i] = (rnum % 10) + '0';
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <LCD_DisplayInt+0x9c>)
 8001dd4:	fba3 2301 	umull	r2, r3, r3, r1
 8001dd8:	08da      	lsrs	r2, r3, #3
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	1aca      	subs	r2, r1, r3
 8001de4:	b2d3      	uxtb	r3, r2
 8001de6:	3330      	adds	r3, #48	@ 0x30
 8001de8:	b2d9      	uxtb	r1, r3
 8001dea:	f107 020c 	add.w	r2, r7, #12
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	460a      	mov	r2, r1
 8001df4:	701a      	strb	r2, [r3, #0]
		rnum /= 10;						//shifts digits one place to the right
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <LCD_DisplayInt+0x9c>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	08db      	lsrs	r3, r3, #3
 8001e00:	603b      	str	r3, [r7, #0]
	    i++;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3301      	adds	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
	while (rnum > 0) {					//extract in reverse order
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1e0      	bne.n	8001dd0 <LCD_DisplayInt+0x28>
	}

	for (int j = i - 1; j >= 0; j--) {
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	e00f      	b.n	8001e36 <LCD_DisplayInt+0x8e>
		LCD_DisplayChar(Xpos, Ypos, buffer[j]);
 8001e16:	f107 020c 	add.w	r2, r7, #12
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	88b9      	ldrh	r1, [r7, #4]
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff9d 	bl	8001d64 <LCD_DisplayChar>
	    Xpos += 15;
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	330f      	adds	r3, #15
 8001e2e:	80fb      	strh	r3, [r7, #6]
	for (int j = i - 1; j >= 0; j--) {
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	daec      	bge.n	8001e16 <LCD_DisplayInt+0x6e>
	}
}
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	cccccccd 	.word	0xcccccccd

08001e48 <LCD_DrawGrid>:

void LCD_DrawGrid(void){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
	uint16_t x, y;

	for (y = 0; y <= GRID_HEIGHT; y++){
 8001e4e:	2300      	movs	r3, #0
 8001e50:	80bb      	strh	r3, [r7, #4]
 8001e52:	e00f      	b.n	8001e74 <LCD_DrawGrid+0x2c>
	   uint16_t startY = y * BLOCK_SIZE;
 8001e54:	88bb      	ldrh	r3, [r7, #4]
 8001e56:	461a      	mov	r2, r3
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	803b      	strh	r3, [r7, #0]
	   LCD_Draw_Horizontal_Line(0, startY, GRID_WIDTH * BLOCK_SIZE, LCD_COLOR_WHITE);
 8001e60:	8839      	ldrh	r1, [r7, #0]
 8001e62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e66:	22f0      	movs	r2, #240	@ 0xf0
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fd5c 	bl	8001926 <LCD_Draw_Horizontal_Line>
	for (y = 0; y <= GRID_HEIGHT; y++){
 8001e6e:	88bb      	ldrh	r3, [r7, #4]
 8001e70:	3301      	adds	r3, #1
 8001e72:	80bb      	strh	r3, [r7, #4]
 8001e74:	88bb      	ldrh	r3, [r7, #4]
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d9ec      	bls.n	8001e54 <LCD_DrawGrid+0xc>
	}
	for (x = 0; x <= GRID_WIDTH; x++) {
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	80fb      	strh	r3, [r7, #6]
 8001e7e:	e010      	b.n	8001ea2 <LCD_DrawGrid+0x5a>
		uint16_t startX = x * BLOCK_SIZE;
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	461a      	mov	r2, r3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	807b      	strh	r3, [r7, #2]
	    LCD_Draw_Vertical_Line(startX, 0, GRID_HEIGHT * BLOCK_SIZE, LCD_COLOR_WHITE);
 8001e8c:	8878      	ldrh	r0, [r7, #2]
 8001e8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e92:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e96:	2100      	movs	r1, #0
 8001e98:	f7ff fd1e 	bl	80018d8 <LCD_Draw_Vertical_Line>
	for (x = 0; x <= GRID_WIDTH; x++) {
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	80fb      	strh	r3, [r7, #6]
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d9eb      	bls.n	8001e80 <LCD_DrawGrid+0x38>
	}
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <LCD_ScreenLayers>:
	//TESTING FOR RNG - COMPLETE
	//char randomchar = RNGAscii();
	//LCD_Draw_Char(100,50,randomchar);
//}

void LCD_ScreenLayers(){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	LTCD_Layer_Init(MAIN_MENU_LAYER);
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff fc0d 	bl	80016d8 <LTCD_Layer_Init>
	LTCD_Layer_Init(GAMEPLAY_LAYER);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7ff fc0a 	bl	80016d8 <LTCD_Layer_Init>
	LTCD_Layer_Init(ENDSCREEN_LAYER);
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f7ff fc07 	bl	80016d8 <LTCD_Layer_Init>

	HAL_LTDC_SetAlpha(&hltdc, 0xFF, MAIN_MENU_LAYER); 		//225 implies visible. this is the initial state
 8001eca:	2200      	movs	r2, #0
 8001ecc:	21ff      	movs	r1, #255	@ 0xff
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <LCD_ScreenLayers+0x30>)
 8001ed0:	f001 fd3c 	bl	800394c <HAL_LTDC_SetAlpha>
	HAL_LTDC_SetAlpha(&hltdc, 0x00, GAMEPLAY_LAYER);   			 //0 is NOT visible
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <LCD_ScreenLayers+0x30>)
 8001eda:	f001 fd37 	bl	800394c <HAL_LTDC_SetAlpha>
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200004ec 	.word	0x200004ec

08001ee8 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void LCD_Error_Handler(void){
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eec:	b672      	cpsid	i
}
 8001eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <LCD_Error_Handler+0x8>

08001ef4 <DisplayTitle>:
 */

#include "MainMenu.h"


void DisplayTitle(void){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	LCD_DisplayChar(75, 0, 'T');
 8001ef8:	2254      	movs	r2, #84	@ 0x54
 8001efa:	2100      	movs	r1, #0
 8001efc:	204b      	movs	r0, #75	@ 0x4b
 8001efe:	f7ff ff31 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(90, 0, 'E');
 8001f02:	2245      	movs	r2, #69	@ 0x45
 8001f04:	2100      	movs	r1, #0
 8001f06:	205a      	movs	r0, #90	@ 0x5a
 8001f08:	f7ff ff2c 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(105, 0, 'T');
 8001f0c:	2254      	movs	r2, #84	@ 0x54
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2069      	movs	r0, #105	@ 0x69
 8001f12:	f7ff ff27 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(120, 0, 'R');
 8001f16:	2252      	movs	r2, #82	@ 0x52
 8001f18:	2100      	movs	r1, #0
 8001f1a:	2078      	movs	r0, #120	@ 0x78
 8001f1c:	f7ff ff22 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(130, 0, 'I');
 8001f20:	2249      	movs	r2, #73	@ 0x49
 8001f22:	2100      	movs	r1, #0
 8001f24:	2082      	movs	r0, #130	@ 0x82
 8001f26:	f7ff ff1d 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(140, 0, 'S');
 8001f2a:	2253      	movs	r2, #83	@ 0x53
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	208c      	movs	r0, #140	@ 0x8c
 8001f30:	f7ff ff18 	bl	8001d64 <LCD_DisplayChar>
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <ButtonToStart>:

void ButtonToStart(void){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	LCD_DisplayChar(15, 250, 'U');
 8001f3c:	2255      	movs	r2, #85	@ 0x55
 8001f3e:	21fa      	movs	r1, #250	@ 0xfa
 8001f40:	200f      	movs	r0, #15
 8001f42:	f7ff ff0f 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(30, 250, 'S');
 8001f46:	2253      	movs	r2, #83	@ 0x53
 8001f48:	21fa      	movs	r1, #250	@ 0xfa
 8001f4a:	201e      	movs	r0, #30
 8001f4c:	f7ff ff0a 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(45, 250, 'E');
 8001f50:	2245      	movs	r2, #69	@ 0x45
 8001f52:	21fa      	movs	r1, #250	@ 0xfa
 8001f54:	202d      	movs	r0, #45	@ 0x2d
 8001f56:	f7ff ff05 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(60, 250, 'R');
 8001f5a:	2252      	movs	r2, #82	@ 0x52
 8001f5c:	21fa      	movs	r1, #250	@ 0xfa
 8001f5e:	203c      	movs	r0, #60	@ 0x3c
 8001f60:	f7ff ff00 	bl	8001d64 <LCD_DisplayChar>

	LCD_DisplayChar(90, 250, 'B');
 8001f64:	2242      	movs	r2, #66	@ 0x42
 8001f66:	21fa      	movs	r1, #250	@ 0xfa
 8001f68:	205a      	movs	r0, #90	@ 0x5a
 8001f6a:	f7ff fefb 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(105, 250, 'U');
 8001f6e:	2255      	movs	r2, #85	@ 0x55
 8001f70:	21fa      	movs	r1, #250	@ 0xfa
 8001f72:	2069      	movs	r0, #105	@ 0x69
 8001f74:	f7ff fef6 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(120, 250, 'T');
 8001f78:	2254      	movs	r2, #84	@ 0x54
 8001f7a:	21fa      	movs	r1, #250	@ 0xfa
 8001f7c:	2078      	movs	r0, #120	@ 0x78
 8001f7e:	f7ff fef1 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(135, 250, 'T');
 8001f82:	2254      	movs	r2, #84	@ 0x54
 8001f84:	21fa      	movs	r1, #250	@ 0xfa
 8001f86:	2087      	movs	r0, #135	@ 0x87
 8001f88:	f7ff feec 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(150, 250, 'O');
 8001f8c:	224f      	movs	r2, #79	@ 0x4f
 8001f8e:	21fa      	movs	r1, #250	@ 0xfa
 8001f90:	2096      	movs	r0, #150	@ 0x96
 8001f92:	f7ff fee7 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(165, 250, 'N');
 8001f96:	224e      	movs	r2, #78	@ 0x4e
 8001f98:	21fa      	movs	r1, #250	@ 0xfa
 8001f9a:	20a5      	movs	r0, #165	@ 0xa5
 8001f9c:	f7ff fee2 	bl	8001d64 <LCD_DisplayChar>

	LCD_DisplayChar(195, 250, 'T');
 8001fa0:	2254      	movs	r2, #84	@ 0x54
 8001fa2:	21fa      	movs	r1, #250	@ 0xfa
 8001fa4:	20c3      	movs	r0, #195	@ 0xc3
 8001fa6:	f7ff fedd 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(210, 250, 'O');
 8001faa:	224f      	movs	r2, #79	@ 0x4f
 8001fac:	21fa      	movs	r1, #250	@ 0xfa
 8001fae:	20d2      	movs	r0, #210	@ 0xd2
 8001fb0:	f7ff fed8 	bl	8001d64 <LCD_DisplayChar>

	LCD_DisplayChar(75, 280, 'S');
 8001fb4:	2253      	movs	r2, #83	@ 0x53
 8001fb6:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001fba:	204b      	movs	r0, #75	@ 0x4b
 8001fbc:	f7ff fed2 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(90, 280, 'T');
 8001fc0:	2254      	movs	r2, #84	@ 0x54
 8001fc2:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001fc6:	205a      	movs	r0, #90	@ 0x5a
 8001fc8:	f7ff fecc 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(105, 280, 'A');
 8001fcc:	2241      	movs	r2, #65	@ 0x41
 8001fce:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001fd2:	2069      	movs	r0, #105	@ 0x69
 8001fd4:	f7ff fec6 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(120, 280, 'R');
 8001fd8:	2252      	movs	r2, #82	@ 0x52
 8001fda:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001fde:	2078      	movs	r0, #120	@ 0x78
 8001fe0:	f7ff fec0 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(135, 280, 'T');
 8001fe4:	2254      	movs	r2, #84	@ 0x54
 8001fe6:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001fea:	2087      	movs	r0, #135	@ 0x87
 8001fec:	f7ff feba 	bl	8001d64 <LCD_DisplayChar>
	LCD_DisplayChar(150, 280, '!');
 8001ff0:	2221      	movs	r2, #33	@ 0x21
 8001ff2:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001ff6:	2096      	movs	r0, #150	@ 0x96
 8001ff8:	f7ff feb4 	bl	8001d64 <LCD_DisplayChar>
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <DrawMainMenu>:

void DrawMainMenu(void){
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8002004:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002008:	f7ff fe1e 	bl	8001c48 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800200c:	4805      	ldr	r0, [pc, #20]	@ (8002024 <DrawMainMenu+0x24>)
 800200e:	f7ff fe2b 	bl	8001c68 <LCD_SetFont>

	DisplayTitle();
 8002012:	f7ff ff6f 	bl	8001ef4 <DisplayTitle>

	MainTetriminoes();
 8002016:	f7ff fd25 	bl	8001a64 <MainTetriminoes>
	ButtonToStart();
 800201a:	f7ff ff8d 	bl	8001f38 <ButtonToStart>
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000078 	.word	0x20000078

08002028 <RNG_Init>:

#include "RNG.h"

static RNG_HandleTypeDef hrng;

void RNG_Init(void){
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
	__HAL_RCC_RNG_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <RNG_Init+0x40>)
 8002034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002036:	4a0c      	ldr	r2, [pc, #48]	@ (8002068 <RNG_Init+0x40>)
 8002038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800203c:	6353      	str	r3, [r2, #52]	@ 0x34
 800203e:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <RNG_Init+0x40>)
 8002040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
	hrng.Instance = RNG;
 800204a:	4b08      	ldr	r3, [pc, #32]	@ (800206c <RNG_Init+0x44>)
 800204c:	4a08      	ldr	r2, [pc, #32]	@ (8002070 <RNG_Init+0x48>)
 800204e:	601a      	str	r2, [r3, #0]

	if (HAL_RNG_Init(&hrng) != HAL_OK){
 8002050:	4806      	ldr	r0, [pc, #24]	@ (800206c <RNG_Init+0x44>)
 8002052:	f002 fc5b 	bl	800490c <HAL_RNG_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <RNG_Init+0x38>
		RNG_Error_Handler();
 800205c:	f000 f80a 	bl	8002074 <RNG_Error_Handler>
	}
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40023800 	.word	0x40023800
 800206c:	20025dcc 	.word	0x20025dcc
 8002070:	50060800 	.word	0x50060800

08002074 <RNG_Error_Handler>:
void RNG_Error_Handler(void){
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002078:	b672      	cpsid	i
}
 800207a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <RNG_Error_Handler+0x8>

08002080 <RNG_Generate>:
	  {
	  }
}
uint32_t RNG_Generate(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
    uint32_t randomValue;
    hrng.State == HAL_RNG_STATE_READY;
 8002086:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <RNG_Generate+0x40>)
 8002088:	795b      	ldrb	r3, [r3, #5]
    if (HAL_RNG_GenerateRandomNumber(&hrng, &randomValue) == HAL_OK) {
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	4619      	mov	r1, r3
 800208e:	480c      	ldr	r0, [pc, #48]	@ (80020c0 <RNG_Generate+0x40>)
 8002090:	f002 fc66 	bl	8004960 <HAL_RNG_GenerateRandomNumber>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10c      	bne.n	80020b4 <RNG_Generate+0x34>
        return (int)(randomValue % 7);
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <RNG_Generate+0x44>)
 800209e:	fba3 1302 	umull	r1, r3, r3, r2
 80020a2:	1ad1      	subs	r1, r2, r3
 80020a4:	0849      	lsrs	r1, r1, #1
 80020a6:	440b      	add	r3, r1
 80020a8:	0899      	lsrs	r1, r3, #2
 80020aa:	460b      	mov	r3, r1
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	1a5b      	subs	r3, r3, r1
 80020b0:	1ad1      	subs	r1, r2, r3
 80020b2:	e000      	b.n	80020b6 <RNG_Generate+0x36>
    }
    else{
    	return 0;
 80020b4:	2100      	movs	r1, #0
    }
}
 80020b6:	460b      	mov	r3, r1
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20025dcc 	.word	0x20025dcc
 80020c4:	24924925 	.word	0x24924925

080020c8 <addSchedulerEvent>:
#include "Scheduler.h"

static uint32_t scheduledEvents = 0;


void addSchedulerEvent(uint32_t eventID){    				//adds an event to be scheduled
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	scheduledEvents |= eventID;		////SET bit (input arg) in scheduledEvents
 80020d0:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <addSchedulerEvent+0x20>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	4a03      	ldr	r2, [pc, #12]	@ (80020e8 <addSchedulerEvent+0x20>)
 80020da:	6013      	str	r3, [r2, #0]

}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	20025ddc 	.word	0x20025ddc

080020ec <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t eventID){				//removes event to be scheduled
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~(eventID);							//clear bit (input arg) in scheduledEvents
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	43da      	mvns	r2, r3
 80020f8:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <removeSchedulerEvent+0x24>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4013      	ands	r3, r2
 80020fe:	4a04      	ldr	r2, [pc, #16]	@ (8002110 <removeSchedulerEvent+0x24>)
 8002100:	6013      	str	r3, [r2, #0]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20025ddc 	.word	0x20025ddc

08002114 <getScheduledEvents>:

uint32_t getScheduledEvents(void){							//return scheduled events
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8002118:	4b03      	ldr	r3, [pc, #12]	@ (8002128 <getScheduledEvents+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20025ddc 	.word	0x20025ddc

0800212c <Timer_Init>:

static TIM_HandleTypeDef htim2;

int elapsedTime = 0;

void Timer_Init(void){					//initialize the specified timer,
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <Timer_Init+0x58>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	4a12      	ldr	r2, [pc, #72]	@ (8002184 <Timer_Init+0x58>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6413      	str	r3, [r2, #64]	@ 0x40
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <Timer_Init+0x58>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
		htim2.Instance = TIM2;
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <Timer_Init+0x5c>)
 8002150:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002154:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 0;
 8002156:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <Timer_Init+0x5c>)
 8002158:	2200      	movs	r2, #0
 800215a:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215c:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <Timer_Init+0x5c>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 999;
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <Timer_Init+0x5c>)
 8002164:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002168:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216a:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <Timer_Init+0x5c>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <Timer_Init+0x5c>)
 8002172:	2200      	movs	r2, #0
 8002174:	619a      	str	r2, [r3, #24]


	    HAL_TIM_Base_Init(&htim2);
 8002176:	4804      	ldr	r0, [pc, #16]	@ (8002188 <Timer_Init+0x5c>)
 8002178:	f002 ff28 	bl	8004fcc <HAL_TIM_Base_Init>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40023800 	.word	0x40023800
 8002188:	20025de0 	.word	0x20025de0

0800218c <StartTimer>:

void StartTimer(void){
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	elapsedTime = 0;
 8002190:	4b03      	ldr	r3, [pc, #12]	@ (80021a0 <StartTimer+0x14>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 8002196:	4803      	ldr	r0, [pc, #12]	@ (80021a4 <StartTimer+0x18>)
 8002198:	f002 ff68 	bl	800506c <HAL_TIM_Base_Start>
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20025e28 	.word	0x20025e28
 80021a4:	20025de0 	.word	0x20025de0

080021a8 <stopTimer>:

void stopTimer(void){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim2);
 80021ac:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <stopTimer+0x10>)
 80021ae:	f002 ffc5 	bl	800513c <HAL_TIM_Base_Stop>
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20025de0 	.word	0x20025de0

080021bc <GetElapsedTime>:

uint32_t TimerValue(TIM_TypeDef *conTimReg){
		return conTimReg->CNT;
}
uint32_t GetElapsedTime(void){
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	 return (double)(htim2.Instance->CNT);
 80021c0:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <GetElapsedTime+0x24>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f95a 	bl	8000480 <__aeabi_ui2d>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe f9ce 	bl	8000574 <__aeabi_d2uiz>
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20025de0 	.word	0x20025de0

080021e4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80021e8:	f000 f9fe 	bl	80025e8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80021ec:	20ca      	movs	r0, #202	@ 0xca
 80021ee:	f000 f943 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80021f2:	20c3      	movs	r0, #195	@ 0xc3
 80021f4:	f000 f94d 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80021f8:	2008      	movs	r0, #8
 80021fa:	f000 f94a 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80021fe:	2050      	movs	r0, #80	@ 0x50
 8002200:	f000 f947 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8002204:	20cf      	movs	r0, #207	@ 0xcf
 8002206:	f000 f937 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800220a:	2000      	movs	r0, #0
 800220c:	f000 f941 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8002210:	20c1      	movs	r0, #193	@ 0xc1
 8002212:	f000 f93e 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8002216:	2030      	movs	r0, #48	@ 0x30
 8002218:	f000 f93b 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800221c:	20ed      	movs	r0, #237	@ 0xed
 800221e:	f000 f92b 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8002222:	2064      	movs	r0, #100	@ 0x64
 8002224:	f000 f935 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8002228:	2003      	movs	r0, #3
 800222a:	f000 f932 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800222e:	2012      	movs	r0, #18
 8002230:	f000 f92f 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8002234:	2081      	movs	r0, #129	@ 0x81
 8002236:	f000 f92c 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800223a:	20e8      	movs	r0, #232	@ 0xe8
 800223c:	f000 f91c 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8002240:	2085      	movs	r0, #133	@ 0x85
 8002242:	f000 f926 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002246:	2000      	movs	r0, #0
 8002248:	f000 f923 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800224c:	2078      	movs	r0, #120	@ 0x78
 800224e:	f000 f920 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002252:	20cb      	movs	r0, #203	@ 0xcb
 8002254:	f000 f910 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8002258:	2039      	movs	r0, #57	@ 0x39
 800225a:	f000 f91a 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800225e:	202c      	movs	r0, #44	@ 0x2c
 8002260:	f000 f917 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002264:	2000      	movs	r0, #0
 8002266:	f000 f914 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800226a:	2034      	movs	r0, #52	@ 0x34
 800226c:	f000 f911 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002270:	2002      	movs	r0, #2
 8002272:	f000 f90e 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8002276:	20f7      	movs	r0, #247	@ 0xf7
 8002278:	f000 f8fe 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800227c:	2020      	movs	r0, #32
 800227e:	f000 f908 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002282:	20ea      	movs	r0, #234	@ 0xea
 8002284:	f000 f8f8 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002288:	2000      	movs	r0, #0
 800228a:	f000 f902 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800228e:	2000      	movs	r0, #0
 8002290:	f000 f8ff 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002294:	20b1      	movs	r0, #177	@ 0xb1
 8002296:	f000 f8ef 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800229a:	2000      	movs	r0, #0
 800229c:	f000 f8f9 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80022a0:	201b      	movs	r0, #27
 80022a2:	f000 f8f6 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80022a6:	20b6      	movs	r0, #182	@ 0xb6
 80022a8:	f000 f8e6 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80022ac:	200a      	movs	r0, #10
 80022ae:	f000 f8f0 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80022b2:	20a2      	movs	r0, #162	@ 0xa2
 80022b4:	f000 f8ed 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80022b8:	20c0      	movs	r0, #192	@ 0xc0
 80022ba:	f000 f8dd 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80022be:	2010      	movs	r0, #16
 80022c0:	f000 f8e7 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80022c4:	20c1      	movs	r0, #193	@ 0xc1
 80022c6:	f000 f8d7 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80022ca:	2010      	movs	r0, #16
 80022cc:	f000 f8e1 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80022d0:	20c5      	movs	r0, #197	@ 0xc5
 80022d2:	f000 f8d1 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80022d6:	2045      	movs	r0, #69	@ 0x45
 80022d8:	f000 f8db 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80022dc:	2015      	movs	r0, #21
 80022de:	f000 f8d8 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80022e2:	20c7      	movs	r0, #199	@ 0xc7
 80022e4:	f000 f8c8 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80022e8:	2090      	movs	r0, #144	@ 0x90
 80022ea:	f000 f8d2 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80022ee:	2036      	movs	r0, #54	@ 0x36
 80022f0:	f000 f8c2 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80022f4:	20c8      	movs	r0, #200	@ 0xc8
 80022f6:	f000 f8cc 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80022fa:	20f2      	movs	r0, #242	@ 0xf2
 80022fc:	f000 f8bc 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002300:	2000      	movs	r0, #0
 8002302:	f000 f8c6 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002306:	20b0      	movs	r0, #176	@ 0xb0
 8002308:	f000 f8b6 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800230c:	20c2      	movs	r0, #194	@ 0xc2
 800230e:	f000 f8c0 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002312:	20b6      	movs	r0, #182	@ 0xb6
 8002314:	f000 f8b0 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002318:	200a      	movs	r0, #10
 800231a:	f000 f8ba 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800231e:	20a7      	movs	r0, #167	@ 0xa7
 8002320:	f000 f8b7 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002324:	2027      	movs	r0, #39	@ 0x27
 8002326:	f000 f8b4 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800232a:	2004      	movs	r0, #4
 800232c:	f000 f8b1 	bl	8002492 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002330:	202a      	movs	r0, #42	@ 0x2a
 8002332:	f000 f8a1 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002336:	2000      	movs	r0, #0
 8002338:	f000 f8ab 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800233c:	2000      	movs	r0, #0
 800233e:	f000 f8a8 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002342:	2000      	movs	r0, #0
 8002344:	f000 f8a5 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8002348:	20ef      	movs	r0, #239	@ 0xef
 800234a:	f000 f8a2 	bl	8002492 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800234e:	202b      	movs	r0, #43	@ 0x2b
 8002350:	f000 f892 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002354:	2000      	movs	r0, #0
 8002356:	f000 f89c 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800235a:	2000      	movs	r0, #0
 800235c:	f000 f899 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002360:	2001      	movs	r0, #1
 8002362:	f000 f896 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002366:	203f      	movs	r0, #63	@ 0x3f
 8002368:	f000 f893 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800236c:	20f6      	movs	r0, #246	@ 0xf6
 800236e:	f000 f883 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002372:	2001      	movs	r0, #1
 8002374:	f000 f88d 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002378:	2000      	movs	r0, #0
 800237a:	f000 f88a 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800237e:	2006      	movs	r0, #6
 8002380:	f000 f887 	bl	8002492 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002384:	202c      	movs	r0, #44	@ 0x2c
 8002386:	f000 f877 	bl	8002478 <ili9341_Write_Reg>
  LCD_Delay(200);
 800238a:	20c8      	movs	r0, #200	@ 0xc8
 800238c:	f000 f9e8 	bl	8002760 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002390:	2026      	movs	r0, #38	@ 0x26
 8002392:	f000 f871 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002396:	2001      	movs	r0, #1
 8002398:	f000 f87b 	bl	8002492 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800239c:	20e0      	movs	r0, #224	@ 0xe0
 800239e:	f000 f86b 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80023a2:	200f      	movs	r0, #15
 80023a4:	f000 f875 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80023a8:	2029      	movs	r0, #41	@ 0x29
 80023aa:	f000 f872 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80023ae:	2024      	movs	r0, #36	@ 0x24
 80023b0:	f000 f86f 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80023b4:	200c      	movs	r0, #12
 80023b6:	f000 f86c 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80023ba:	200e      	movs	r0, #14
 80023bc:	f000 f869 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80023c0:	2009      	movs	r0, #9
 80023c2:	f000 f866 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80023c6:	204e      	movs	r0, #78	@ 0x4e
 80023c8:	f000 f863 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80023cc:	2078      	movs	r0, #120	@ 0x78
 80023ce:	f000 f860 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80023d2:	203c      	movs	r0, #60	@ 0x3c
 80023d4:	f000 f85d 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80023d8:	2009      	movs	r0, #9
 80023da:	f000 f85a 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80023de:	2013      	movs	r0, #19
 80023e0:	f000 f857 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80023e4:	2005      	movs	r0, #5
 80023e6:	f000 f854 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80023ea:	2017      	movs	r0, #23
 80023ec:	f000 f851 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80023f0:	2011      	movs	r0, #17
 80023f2:	f000 f84e 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f000 f84b 	bl	8002492 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80023fc:	20e1      	movs	r0, #225	@ 0xe1
 80023fe:	f000 f83b 	bl	8002478 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002402:	2000      	movs	r0, #0
 8002404:	f000 f845 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002408:	2016      	movs	r0, #22
 800240a:	f000 f842 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800240e:	201b      	movs	r0, #27
 8002410:	f000 f83f 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002414:	2004      	movs	r0, #4
 8002416:	f000 f83c 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800241a:	2011      	movs	r0, #17
 800241c:	f000 f839 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002420:	2007      	movs	r0, #7
 8002422:	f000 f836 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002426:	2031      	movs	r0, #49	@ 0x31
 8002428:	f000 f833 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800242c:	2033      	movs	r0, #51	@ 0x33
 800242e:	f000 f830 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002432:	2042      	movs	r0, #66	@ 0x42
 8002434:	f000 f82d 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002438:	2005      	movs	r0, #5
 800243a:	f000 f82a 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800243e:	200c      	movs	r0, #12
 8002440:	f000 f827 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002444:	200a      	movs	r0, #10
 8002446:	f000 f824 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800244a:	2028      	movs	r0, #40	@ 0x28
 800244c:	f000 f821 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002450:	202f      	movs	r0, #47	@ 0x2f
 8002452:	f000 f81e 	bl	8002492 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002456:	200f      	movs	r0, #15
 8002458:	f000 f81b 	bl	8002492 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800245c:	2011      	movs	r0, #17
 800245e:	f000 f80b 	bl	8002478 <ili9341_Write_Reg>
  LCD_Delay(200);
 8002462:	20c8      	movs	r0, #200	@ 0xc8
 8002464:	f000 f97c 	bl	8002760 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002468:	2029      	movs	r0, #41	@ 0x29
 800246a:	f000 f805 	bl	8002478 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800246e:	202c      	movs	r0, #44	@ 0x2c
 8002470:	f000 f802 	bl	8002478 <ili9341_Write_Reg>
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}

08002478 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f949 	bl	800271c <LCD_IO_WriteReg>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f91a 	bl	80026d8 <LCD_IO_WriteData>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80024b0:	4819      	ldr	r0, [pc, #100]	@ (8002518 <SPI_Init+0x6c>)
 80024b2:	f002 fca0 	bl	8004df6 <HAL_SPI_GetState>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d12b      	bne.n	8002514 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80024bc:	4b16      	ldr	r3, [pc, #88]	@ (8002518 <SPI_Init+0x6c>)
 80024be:	4a17      	ldr	r2, [pc, #92]	@ (800251c <SPI_Init+0x70>)
 80024c0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80024c2:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <SPI_Init+0x6c>)
 80024c4:	2218      	movs	r2, #24
 80024c6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <SPI_Init+0x6c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80024ce:	4b12      	ldr	r3, [pc, #72]	@ (8002518 <SPI_Init+0x6c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80024d4:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <SPI_Init+0x6c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80024da:	4b0f      	ldr	r3, [pc, #60]	@ (8002518 <SPI_Init+0x6c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80024e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <SPI_Init+0x6c>)
 80024e2:	2207      	movs	r2, #7
 80024e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80024e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <SPI_Init+0x6c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80024ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <SPI_Init+0x6c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80024f2:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <SPI_Init+0x6c>)
 80024f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024f8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80024fa:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <SPI_Init+0x6c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <SPI_Init+0x6c>)
 8002502:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002506:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002508:	4803      	ldr	r0, [pc, #12]	@ (8002518 <SPI_Init+0x6c>)
 800250a:	f000 f833 	bl	8002574 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800250e:	4802      	ldr	r0, [pc, #8]	@ (8002518 <SPI_Init+0x6c>)
 8002510:	f002 fa7c 	bl	8004a0c <HAL_SPI_Init>
  }
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20025e2c 	.word	0x20025e2c
 800251c:	40015000 	.word	0x40015000

08002520 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800252e:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <SPI_Write+0x34>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	1db9      	adds	r1, r7, #6
 8002534:	2201      	movs	r2, #1
 8002536:	4808      	ldr	r0, [pc, #32]	@ (8002558 <SPI_Write+0x38>)
 8002538:	f002 fb19 	bl	8004b6e <HAL_SPI_Transmit>
 800253c:	4603      	mov	r3, r0
 800253e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002546:	f000 f809 	bl	800255c <SPI_Error>
  }
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000080 	.word	0x20000080
 8002558:	20025e2c 	.word	0x20025e2c

0800255c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002560:	4803      	ldr	r0, [pc, #12]	@ (8002570 <SPI_Error+0x14>)
 8002562:	f002 fadc 	bl	8004b1e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002566:	f7ff ffa1 	bl	80024ac <SPI_Init>
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20025e2c 	.word	0x20025e2c

08002574 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	@ 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	4b17      	ldr	r3, [pc, #92]	@ (80025e0 <SPI_MspInit+0x6c>)
 8002582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002584:	4a16      	ldr	r2, [pc, #88]	@ (80025e0 <SPI_MspInit+0x6c>)
 8002586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800258a:	6453      	str	r3, [r2, #68]	@ 0x44
 800258c:	4b14      	ldr	r3, [pc, #80]	@ (80025e0 <SPI_MspInit+0x6c>)
 800258e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002590:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <SPI_MspInit+0x6c>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a0:	4a0f      	ldr	r2, [pc, #60]	@ (80025e0 <SPI_MspInit+0x6c>)
 80025a2:	f043 0320 	orr.w	r3, r3, #32
 80025a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a8:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <SPI_MspInit+0x6c>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80025b4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80025b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80025be:	2302      	movs	r3, #2
 80025c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80025c2:	2301      	movs	r3, #1
 80025c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80025c6:	2305      	movs	r3, #5
 80025c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	4804      	ldr	r0, [pc, #16]	@ (80025e4 <SPI_MspInit+0x70>)
 80025d2:	f000 fdc3 	bl	800315c <HAL_GPIO_Init>
}
 80025d6:	bf00      	nop
 80025d8:	3728      	adds	r7, #40	@ 0x28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40021400 	.word	0x40021400

080025e8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80025ee:	4b36      	ldr	r3, [pc, #216]	@ (80026c8 <LCD_IO_Init+0xe0>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d164      	bne.n	80026c0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80025f6:	4b34      	ldr	r3, [pc, #208]	@ (80026c8 <LCD_IO_Init+0xe0>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	4b32      	ldr	r3, [pc, #200]	@ (80026cc <LCD_IO_Init+0xe4>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	4a31      	ldr	r2, [pc, #196]	@ (80026cc <LCD_IO_Init+0xe4>)
 8002606:	f043 0308 	orr.w	r3, r3, #8
 800260a:	6313      	str	r3, [r2, #48]	@ 0x30
 800260c:	4b2f      	ldr	r3, [pc, #188]	@ (80026cc <LCD_IO_Init+0xe4>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002618:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800261c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800261e:	2301      	movs	r3, #1
 8002620:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002626:	2302      	movs	r3, #2
 8002628:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800262a:	f107 030c 	add.w	r3, r7, #12
 800262e:	4619      	mov	r1, r3
 8002630:	4827      	ldr	r0, [pc, #156]	@ (80026d0 <LCD_IO_Init+0xe8>)
 8002632:	f000 fd93 	bl	800315c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	4b24      	ldr	r3, [pc, #144]	@ (80026cc <LCD_IO_Init+0xe4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	4a23      	ldr	r2, [pc, #140]	@ (80026cc <LCD_IO_Init+0xe4>)
 8002640:	f043 0308 	orr.w	r3, r3, #8
 8002644:	6313      	str	r3, [r2, #48]	@ 0x30
 8002646:	4b21      	ldr	r3, [pc, #132]	@ (80026cc <LCD_IO_Init+0xe4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002652:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002656:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002658:	2301      	movs	r3, #1
 800265a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002660:	2302      	movs	r3, #2
 8002662:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	4619      	mov	r1, r3
 800266a:	4819      	ldr	r0, [pc, #100]	@ (80026d0 <LCD_IO_Init+0xe8>)
 800266c:	f000 fd76 	bl	800315c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002670:	2300      	movs	r3, #0
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <LCD_IO_Init+0xe4>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002678:	4a14      	ldr	r2, [pc, #80]	@ (80026cc <LCD_IO_Init+0xe4>)
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002680:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <LCD_IO_Init+0xe4>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800268c:	2304      	movs	r3, #4
 800268e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002690:	2301      	movs	r3, #1
 8002692:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002698:	2302      	movs	r3, #2
 800269a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	4619      	mov	r1, r3
 80026a2:	480c      	ldr	r0, [pc, #48]	@ (80026d4 <LCD_IO_Init+0xec>)
 80026a4:	f000 fd5a 	bl	800315c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80026a8:	2200      	movs	r2, #0
 80026aa:	2104      	movs	r1, #4
 80026ac:	4809      	ldr	r0, [pc, #36]	@ (80026d4 <LCD_IO_Init+0xec>)
 80026ae:	f001 f825 	bl	80036fc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80026b2:	2201      	movs	r2, #1
 80026b4:	2104      	movs	r1, #4
 80026b6:	4807      	ldr	r0, [pc, #28]	@ (80026d4 <LCD_IO_Init+0xec>)
 80026b8:	f001 f820 	bl	80036fc <HAL_GPIO_WritePin>

    SPI_Init();
 80026bc:	f7ff fef6 	bl	80024ac <SPI_Init>
  }
}
 80026c0:	bf00      	nop
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20025e84 	.word	0x20025e84
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020c00 	.word	0x40020c00
 80026d4:	40020800 	.word	0x40020800

080026d8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80026e2:	2201      	movs	r2, #1
 80026e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026e8:	480a      	ldr	r0, [pc, #40]	@ (8002714 <LCD_IO_WriteData+0x3c>)
 80026ea:	f001 f807 	bl	80036fc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80026ee:	2200      	movs	r2, #0
 80026f0:	2104      	movs	r1, #4
 80026f2:	4809      	ldr	r0, [pc, #36]	@ (8002718 <LCD_IO_WriteData+0x40>)
 80026f4:	f001 f802 	bl	80036fc <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff ff10 	bl	8002520 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002700:	2201      	movs	r2, #1
 8002702:	2104      	movs	r1, #4
 8002704:	4804      	ldr	r0, [pc, #16]	@ (8002718 <LCD_IO_WriteData+0x40>)
 8002706:	f000 fff9 	bl	80036fc <HAL_GPIO_WritePin>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40020c00 	.word	0x40020c00
 8002718:	40020800 	.word	0x40020800

0800271c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800272c:	480a      	ldr	r0, [pc, #40]	@ (8002758 <LCD_IO_WriteReg+0x3c>)
 800272e:	f000 ffe5 	bl	80036fc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002732:	2200      	movs	r2, #0
 8002734:	2104      	movs	r1, #4
 8002736:	4809      	ldr	r0, [pc, #36]	@ (800275c <LCD_IO_WriteReg+0x40>)
 8002738:	f000 ffe0 	bl	80036fc <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	b29b      	uxth	r3, r3
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff feed 	bl	8002520 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002746:	2201      	movs	r2, #1
 8002748:	2104      	movs	r1, #4
 800274a:	4804      	ldr	r0, [pc, #16]	@ (800275c <LCD_IO_WriteReg+0x40>)
 800274c:	f000 ffd6 	bl	80036fc <HAL_GPIO_WritePin>
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40020c00 	.word	0x40020c00
 800275c:	40020800 	.word	0x40020800

08002760 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 fb63 	bl	8002e34 <HAL_Delay>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800277c:	f000 fae8 	bl	8002d50 <HAL_Init>
  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8002780:	f000 f83a 	bl	80027f8 <SystemClockOverride>
  //SystemClock_Config();

  ApplicationInit(); // Initializes the LCD functionality
 8002784:	f7fe f8c0 	bl	8000908 <ApplicationInit>
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1){
	  for(;;){
		  uint32_t currentEvents = getScheduledEvents();
 8002788:	f7ff fcc4 	bl	8002114 <getScheduledEvents>
 800278c:	6078      	str	r0, [r7, #4]

		  if (currentEvents & APP_DELAY_FLAG_EVENT){
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d006      	beq.n	80027a6 <main+0x30>
			  appDelay(DEFAULT_DELAY);
 8002798:	f246 10a8 	movw	r0, #25000	@ 0x61a8
 800279c:	f7fe f882 	bl	80008a4 <appDelay>
		      removeSchedulerEvent(APP_DELAY_FLAG_EVENT);						//removes event to be scheduled
 80027a0:	2001      	movs	r0, #1
 80027a2:	f7ff fca3 	bl	80020ec <removeSchedulerEvent>
		  	}

		  if (currentEvents & GENERATE_TETRIMINO_EVENT){
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <main+0x4a>
			  generateTetrimino();
 80027b0:	f7fe f98a 	bl	8000ac8 <generateTetrimino>
			  removeSchedulerEvent(GENERATE_TETRIMINO_EVENT);
 80027b4:	2004      	movs	r0, #4
 80027b6:	f7ff fc99 	bl	80020ec <removeSchedulerEvent>
			  addSchedulerEvent(MOVE_TETRIMINO_DOWN_EVENT);
 80027ba:	2010      	movs	r0, #16
 80027bc:	f7ff fc84 	bl	80020c8 <addSchedulerEvent>
		  }

		  if (currentEvents & MOVE_TETRIMINO_DOWN_EVENT){
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <main+0x58>
			  moveTetriminoDown();
 80027ca:	f7fe fc1d 	bl	8001008 <moveTetriminoDown>
		  }
		  if (currentEvents & ROTATE_CW_EVENT){
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d004      	beq.n	80027e2 <main+0x6c>
			  rotateTetrimino();
 80027d8:	f7fe fadc 	bl	8000d94 <rotateTetrimino>
			  removeSchedulerEvent(ROTATE_CW_EVENT);
 80027dc:	2008      	movs	r0, #8
 80027de:	f7ff fc85 	bl	80020ec <removeSchedulerEvent>
			  //addSchedulerEvent(MOVE_TETRIMINO_DOWN_EVENT);
		  }

		  if (currentEvents & END_GAME_EVENT){
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0cd      	beq.n	8002788 <main+0x12>
			  gameOverFunction();
 80027ec:	f7fe fc5a 	bl	80010a4 <gameOverFunction>
			  removeSchedulerEvent(END_GAME_EVENT);
 80027f0:	2020      	movs	r0, #32
 80027f2:	f7ff fc7b 	bl	80020ec <removeSchedulerEvent>
	  for(;;){
 80027f6:	e7c7      	b.n	8002788 <main+0x12>

080027f8 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b092      	sub	sp, #72	@ 0x48
 80027fc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <SystemClockOverride+0x7c>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	4a1b      	ldr	r2, [pc, #108]	@ (8002874 <SystemClockOverride+0x7c>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280c:	6413      	str	r3, [r2, #64]	@ 0x40
 800280e:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <SystemClockOverride+0x7c>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800281a:	2301      	movs	r3, #1
 800281c:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800281e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002822:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002824:	2302      	movs	r3, #2
 8002826:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002828:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800282c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800282e:	2308      	movs	r3, #8
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002832:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002836:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002838:	2302      	movs	r3, #2
 800283a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800283c:	2307      	movs	r3, #7
 800283e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	4618      	mov	r0, r3
 8002844:	f001 fa7e 	bl	8003d44 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002848:	230f      	movs	r3, #15
 800284a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800284c:	2302      	movs	r3, #2
 800284e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002850:	2300      	movs	r3, #0
 8002852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002854:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002858:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800285a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800285e:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002860:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002864:	2105      	movs	r1, #5
 8002866:	4618      	mov	r0, r3
 8002868:	f001 fce4 	bl	8004234 <HAL_RCC_ClockConfig>
}
 800286c:	bf00      	nop
 800286e:	3748      	adds	r7, #72	@ 0x48
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40023800 	.word	0x40023800

08002878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800287c:	b672      	cpsid	i
}
 800287e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <Error_Handler+0x8>

08002884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_MspInit+0x4c>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	4a0f      	ldr	r2, [pc, #60]	@ (80028d0 <HAL_MspInit+0x4c>)
 8002894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002898:	6453      	str	r3, [r2, #68]	@ 0x44
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <HAL_MspInit+0x4c>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HAL_MspInit+0x4c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	4a08      	ldr	r2, [pc, #32]	@ (80028d0 <HAL_MspInit+0x4c>)
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b6:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_MspInit+0x4c>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028c2:	2007      	movs	r0, #7
 80028c4:	f000 fbec 	bl	80030a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800

080028d4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b09a      	sub	sp, #104	@ 0x68
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028f0:	2230      	movs	r2, #48	@ 0x30
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 f864 	bl	80059c2 <memset>
  if(hltdc->Instance==LTDC)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a81      	ldr	r2, [pc, #516]	@ (8002b04 <HAL_LTDC_MspInit+0x230>)
 8002900:	4293      	cmp	r3, r2
 8002902:	f040 80fa 	bne.w	8002afa <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002906:	2308      	movs	r3, #8
 8002908:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800290a:	2332      	movs	r3, #50	@ 0x32
 800290c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800290e:	2302      	movs	r3, #2
 8002910:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002912:	2300      	movs	r3, #0
 8002914:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800291a:	4618      	mov	r0, r3
 800291c:	f001 fe36 	bl	800458c <HAL_RCCEx_PeriphCLKConfig>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002926:	f7ff ffa7 	bl	8002878 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	623b      	str	r3, [r7, #32]
 800292e:	4b76      	ldr	r3, [pc, #472]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	4a75      	ldr	r2, [pc, #468]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 8002934:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002938:	6453      	str	r3, [r2, #68]	@ 0x44
 800293a:	4b73      	ldr	r3, [pc, #460]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002942:	623b      	str	r3, [r7, #32]
 8002944:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	4b6f      	ldr	r3, [pc, #444]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 8002950:	f043 0320 	orr.w	r3, r3, #32
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4b6c      	ldr	r3, [pc, #432]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	4b68      	ldr	r3, [pc, #416]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	4a67      	ldr	r2, [pc, #412]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6313      	str	r3, [r2, #48]	@ 0x30
 8002972:	4b65      	ldr	r3, [pc, #404]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	4b61      	ldr	r3, [pc, #388]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	4a60      	ldr	r2, [pc, #384]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	6313      	str	r3, [r2, #48]	@ 0x30
 800298e:	4b5e      	ldr	r3, [pc, #376]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	4b5a      	ldr	r3, [pc, #360]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	4a59      	ldr	r2, [pc, #356]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 80029a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029aa:	4b57      	ldr	r3, [pc, #348]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	4b53      	ldr	r3, [pc, #332]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	4a52      	ldr	r2, [pc, #328]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c6:	4b50      	ldr	r3, [pc, #320]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	4a4b      	ldr	r2, [pc, #300]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 80029dc:	f043 0308 	orr.w	r3, r3, #8
 80029e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e2:	4b49      	ldr	r3, [pc, #292]	@ (8002b08 <HAL_LTDC_MspInit+0x234>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80029ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029f2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a00:	230e      	movs	r3, #14
 8002a02:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4840      	ldr	r0, [pc, #256]	@ (8002b0c <HAL_LTDC_MspInit+0x238>)
 8002a0c:	f000 fba6 	bl	800315c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002a10:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002a14:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a22:	230e      	movs	r3, #14
 8002a24:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a26:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4838      	ldr	r0, [pc, #224]	@ (8002b10 <HAL_LTDC_MspInit+0x23c>)
 8002a2e:	f000 fb95 	bl	800315c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002a32:	2303      	movs	r3, #3
 8002a34:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002a42:	2309      	movs	r3, #9
 8002a44:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4831      	ldr	r0, [pc, #196]	@ (8002b14 <HAL_LTDC_MspInit+0x240>)
 8002a4e:	f000 fb85 	bl	800315c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002a52:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002a56:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a64:	230e      	movs	r3, #14
 8002a66:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4829      	ldr	r0, [pc, #164]	@ (8002b14 <HAL_LTDC_MspInit+0x240>)
 8002a70:	f000 fb74 	bl	800315c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002a74:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002a78:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a86:	230e      	movs	r3, #14
 8002a88:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a8a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4821      	ldr	r0, [pc, #132]	@ (8002b18 <HAL_LTDC_MspInit+0x244>)
 8002a92:	f000 fb63 	bl	800315c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002a96:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002a9a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002aa8:	230e      	movs	r3, #14
 8002aaa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	481a      	ldr	r0, [pc, #104]	@ (8002b1c <HAL_LTDC_MspInit+0x248>)
 8002ab4:	f000 fb52 	bl	800315c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002ab8:	2348      	movs	r3, #72	@ 0x48
 8002aba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ac8:	230e      	movs	r3, #14
 8002aca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002acc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4813      	ldr	r0, [pc, #76]	@ (8002b20 <HAL_LTDC_MspInit+0x24c>)
 8002ad4:	f000 fb42 	bl	800315c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002ad8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002adc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002aea:	2309      	movs	r3, #9
 8002aec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002aee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002af2:	4619      	mov	r1, r3
 8002af4:	4808      	ldr	r0, [pc, #32]	@ (8002b18 <HAL_LTDC_MspInit+0x244>)
 8002af6:	f000 fb31 	bl	800315c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002afa:	bf00      	nop
 8002afc:	3768      	adds	r7, #104	@ 0x68
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40016800 	.word	0x40016800
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40021400 	.word	0x40021400
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40020400 	.word	0x40020400
 8002b18:	40021800 	.word	0x40021800
 8002b1c:	40020800 	.word	0x40020800
 8002b20:	40020c00 	.word	0x40020c00

08002b24 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0b      	ldr	r2, [pc, #44]	@ (8002b60 <HAL_RNG_MspInit+0x3c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d10d      	bne.n	8002b52 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <HAL_RNG_MspInit+0x40>)
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3e:	4a09      	ldr	r2, [pc, #36]	@ (8002b64 <HAL_RNG_MspInit+0x40>)
 8002b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b44:	6353      	str	r3, [r2, #52]	@ 0x34
 8002b46:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <HAL_RNG_MspInit+0x40>)
 8002b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	50060800 	.word	0x50060800
 8002b64:	40023800 	.word	0x40023800

08002b68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	@ 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a19      	ldr	r2, [pc, #100]	@ (8002bec <HAL_SPI_MspInit+0x84>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d12c      	bne.n	8002be4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <HAL_SPI_MspInit+0x88>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	4a17      	ldr	r2, [pc, #92]	@ (8002bf0 <HAL_SPI_MspInit+0x88>)
 8002b94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b9a:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <HAL_SPI_MspInit+0x88>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <HAL_SPI_MspInit+0x88>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	4a10      	ldr	r2, [pc, #64]	@ (8002bf0 <HAL_SPI_MspInit+0x88>)
 8002bb0:	f043 0320 	orr.w	r3, r3, #32
 8002bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf0 <HAL_SPI_MspInit+0x88>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002bc2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002bd4:	2305      	movs	r3, #5
 8002bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4805      	ldr	r0, [pc, #20]	@ (8002bf4 <HAL_SPI_MspInit+0x8c>)
 8002be0:	f000 fabc 	bl	800315c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002be4:	bf00      	nop
 8002be6:	3728      	adds	r7, #40	@ 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40015000 	.word	0x40015000
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40021400 	.word	0x40021400

08002bf8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a08      	ldr	r2, [pc, #32]	@ (8002c28 <HAL_SPI_MspDeInit+0x30>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d10a      	bne.n	8002c20 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002c0a:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <HAL_SPI_MspDeInit+0x34>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0e:	4a07      	ldr	r2, [pc, #28]	@ (8002c2c <HAL_SPI_MspDeInit+0x34>)
 8002c10:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002c14:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002c16:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002c1a:	4805      	ldr	r0, [pc, #20]	@ (8002c30 <HAL_SPI_MspDeInit+0x38>)
 8002c1c:	f000 fc4a 	bl	80034b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40015000 	.word	0x40015000
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40021400 	.word	0x40021400

08002c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0b      	ldr	r2, [pc, #44]	@ (8002c70 <HAL_TIM_Base_MspInit+0x3c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10d      	bne.n	8002c62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_TIM_Base_MspInit+0x40>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	4a09      	ldr	r2, [pc, #36]	@ (8002c74 <HAL_TIM_Base_MspInit+0x40>)
 8002c50:	f043 0310 	orr.w	r3, r3, #16
 8002c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c56:	4b07      	ldr	r3, [pc, #28]	@ (8002c74 <HAL_TIM_Base_MspInit+0x40>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40001000 	.word	0x40001000
 8002c74:	40023800 	.word	0x40023800

08002c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <NMI_Handler+0x4>

08002c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <HardFault_Handler+0x4>

08002c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c8c:	bf00      	nop
 8002c8e:	e7fd      	b.n	8002c8c <MemManage_Handler+0x4>

08002c90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c94:	bf00      	nop
 8002c96:	e7fd      	b.n	8002c94 <BusFault_Handler+0x4>

08002c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <UsageFault_Handler+0x4>

08002ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cce:	f000 f891 	bl	8002df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <SystemInit+0x20>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce2:	4a05      	ldr	r2, [pc, #20]	@ (8002cf8 <SystemInit+0x20>)
 8002ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d00:	f7ff ffea 	bl	8002cd8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d04:	480c      	ldr	r0, [pc, #48]	@ (8002d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d06:	490d      	ldr	r1, [pc, #52]	@ (8002d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d08:	4a0d      	ldr	r2, [pc, #52]	@ (8002d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d0c:	e002      	b.n	8002d14 <LoopCopyDataInit>

08002d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d12:	3304      	adds	r3, #4

08002d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d18:	d3f9      	bcc.n	8002d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d20:	e001      	b.n	8002d26 <LoopFillZerobss>

08002d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d24:	3204      	adds	r2, #4

08002d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d28:	d3fb      	bcc.n	8002d22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002d2a:	f002 fe9f 	bl	8005a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d2e:	f7ff fd22 	bl	8002776 <main>
  bx  lr    
 8002d32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002d34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d3c:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8002d40:	08006eec 	.word	0x08006eec
  ldr r2, =_sbss
 8002d44:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8002d48:	20026080 	.word	0x20026080

08002d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d4c:	e7fe      	b.n	8002d4c <ADC_IRQHandler>
	...

08002d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d54:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <HAL_Init+0x40>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0d      	ldr	r2, [pc, #52]	@ (8002d90 <HAL_Init+0x40>)
 8002d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_Init+0x40>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0a      	ldr	r2, [pc, #40]	@ (8002d90 <HAL_Init+0x40>)
 8002d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d6c:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <HAL_Init+0x40>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a07      	ldr	r2, [pc, #28]	@ (8002d90 <HAL_Init+0x40>)
 8002d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d78:	2003      	movs	r0, #3
 8002d7a:	f000 f991 	bl	80030a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f000 f808 	bl	8002d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d84:	f7ff fd7e 	bl	8002884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023c00 	.word	0x40023c00

08002d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d9c:	4b12      	ldr	r3, [pc, #72]	@ (8002de8 <HAL_InitTick+0x54>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <HAL_InitTick+0x58>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	4619      	mov	r1, r3
 8002da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f9b7 	bl	8003126 <HAL_SYSTICK_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00e      	b.n	8002de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b0f      	cmp	r3, #15
 8002dc6:	d80a      	bhi.n	8002dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd0:	f000 f971 	bl	80030b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd4:	4a06      	ldr	r2, [pc, #24]	@ (8002df0 <HAL_InitTick+0x5c>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e000      	b.n	8002de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000084 	.word	0x20000084
 8002dec:	2000008c 	.word	0x2000008c
 8002df0:	20000088 	.word	0x20000088

08002df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_IncTick+0x20>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_IncTick+0x24>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	4a04      	ldr	r2, [pc, #16]	@ (8002e18 <HAL_IncTick+0x24>)
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	2000008c 	.word	0x2000008c
 8002e18:	20025e88 	.word	0x20025e88

08002e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e20:	4b03      	ldr	r3, [pc, #12]	@ (8002e30 <HAL_GetTick+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20025e88 	.word	0x20025e88

08002e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff ffee 	bl	8002e1c <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d005      	beq.n	8002e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <HAL_Delay+0x44>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e5a:	bf00      	nop
 8002e5c:	f7ff ffde 	bl	8002e1c <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d8f7      	bhi.n	8002e5c <HAL_Delay+0x28>
  {
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000008c 	.word	0x2000008c

08002e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eae:	4a04      	ldr	r2, [pc, #16]	@ (8002ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	60d3      	str	r3, [r2, #12]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec8:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <__NVIC_GetPriorityGrouping+0x18>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	f003 0307 	and.w	r3, r3, #7
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	db0b      	blt.n	8002f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	f003 021f 	and.w	r2, r3, #31
 8002ef8:	4907      	ldr	r1, [pc, #28]	@ (8002f18 <__NVIC_EnableIRQ+0x38>)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2001      	movs	r0, #1
 8002f02:	fa00 f202 	lsl.w	r2, r0, r2
 8002f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	e000e100 	.word	0xe000e100

08002f1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	db12      	blt.n	8002f54 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	490a      	ldr	r1, [pc, #40]	@ (8002f60 <__NVIC_DisableIRQ+0x44>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f42:	3320      	adds	r3, #32
 8002f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f48:	f3bf 8f4f 	dsb	sy
}
 8002f4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f4e:	f3bf 8f6f 	isb	sy
}
 8002f52:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000e100 	.word	0xe000e100

08002f64 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db0c      	blt.n	8002f90 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	4907      	ldr	r1, [pc, #28]	@ (8002f9c <__NVIC_ClearPendingIRQ+0x38>)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	2001      	movs	r0, #1
 8002f86:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8a:	3360      	adds	r3, #96	@ 0x60
 8002f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000e100 	.word	0xe000e100

08002fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	6039      	str	r1, [r7, #0]
 8002faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	db0a      	blt.n	8002fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	490c      	ldr	r1, [pc, #48]	@ (8002fec <__NVIC_SetPriority+0x4c>)
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	0112      	lsls	r2, r2, #4
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc8:	e00a      	b.n	8002fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4908      	ldr	r1, [pc, #32]	@ (8002ff0 <__NVIC_SetPriority+0x50>)
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	3b04      	subs	r3, #4
 8002fd8:	0112      	lsls	r2, r2, #4
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	440b      	add	r3, r1
 8002fde:	761a      	strb	r2, [r3, #24]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000e100 	.word	0xe000e100
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	@ 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f1c3 0307 	rsb	r3, r3, #7
 800300e:	2b04      	cmp	r3, #4
 8003010:	bf28      	it	cs
 8003012:	2304      	movcs	r3, #4
 8003014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3304      	adds	r3, #4
 800301a:	2b06      	cmp	r3, #6
 800301c:	d902      	bls.n	8003024 <NVIC_EncodePriority+0x30>
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3b03      	subs	r3, #3
 8003022:	e000      	b.n	8003026 <NVIC_EncodePriority+0x32>
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	f04f 32ff 	mov.w	r2, #4294967295
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	401a      	ands	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800303c:	f04f 31ff 	mov.w	r1, #4294967295
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	43d9      	mvns	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	4313      	orrs	r3, r2
         );
}
 800304e:	4618      	mov	r0, r3
 8003050:	3724      	adds	r7, #36	@ 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800306c:	d301      	bcc.n	8003072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800306e:	2301      	movs	r3, #1
 8003070:	e00f      	b.n	8003092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003072:	4a0a      	ldr	r2, [pc, #40]	@ (800309c <SysTick_Config+0x40>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3b01      	subs	r3, #1
 8003078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307a:	210f      	movs	r1, #15
 800307c:	f04f 30ff 	mov.w	r0, #4294967295
 8003080:	f7ff ff8e 	bl	8002fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <SysTick_Config+0x40>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308a:	4b04      	ldr	r3, [pc, #16]	@ (800309c <SysTick_Config+0x40>)
 800308c:	2207      	movs	r2, #7
 800308e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	e000e010 	.word	0xe000e010

080030a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff fee7 	bl	8002e7c <__NVIC_SetPriorityGrouping>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4603      	mov	r3, r0
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030c8:	f7ff fefc 	bl	8002ec4 <__NVIC_GetPriorityGrouping>
 80030cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	6978      	ldr	r0, [r7, #20]
 80030d4:	f7ff ff8e 	bl	8002ff4 <NVIC_EncodePriority>
 80030d8:	4602      	mov	r2, r0
 80030da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff5d 	bl	8002fa0 <__NVIC_SetPriority>
}
 80030e6:	bf00      	nop
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff feef 	bl	8002ee0 <__NVIC_EnableIRQ>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	4603      	mov	r3, r0
 8003112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff feff 	bl	8002f1c <__NVIC_DisableIRQ>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ff94 	bl	800305c <SysTick_Config>
 8003134:	4603      	mov	r3, r0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff09 	bl	8002f64 <__NVIC_ClearPendingIRQ>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	@ 0x24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	e177      	b.n	8003468 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003178:	2201      	movs	r2, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	429a      	cmp	r2, r3
 8003192:	f040 8166 	bne.w	8003462 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d005      	beq.n	80031ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d130      	bne.n	8003210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	2203      	movs	r2, #3
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e4:	2201      	movs	r2, #1
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 0201 	and.w	r2, r3, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b03      	cmp	r3, #3
 800321a:	d017      	beq.n	800324c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	2203      	movs	r2, #3
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d123      	bne.n	80032a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	08da      	lsrs	r2, r3, #3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3208      	adds	r2, #8
 8003260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	220f      	movs	r2, #15
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	08da      	lsrs	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3208      	adds	r2, #8
 800329a:	69b9      	ldr	r1, [r7, #24]
 800329c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 0203 	and.w	r2, r3, #3
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80c0 	beq.w	8003462 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	4b66      	ldr	r3, [pc, #408]	@ (8003480 <HAL_GPIO_Init+0x324>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ea:	4a65      	ldr	r2, [pc, #404]	@ (8003480 <HAL_GPIO_Init+0x324>)
 80032ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032f2:	4b63      	ldr	r3, [pc, #396]	@ (8003480 <HAL_GPIO_Init+0x324>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032fe:	4a61      	ldr	r2, [pc, #388]	@ (8003484 <HAL_GPIO_Init+0x328>)
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	3302      	adds	r3, #2
 8003306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	220f      	movs	r2, #15
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a58      	ldr	r2, [pc, #352]	@ (8003488 <HAL_GPIO_Init+0x32c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d037      	beq.n	800339a <HAL_GPIO_Init+0x23e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a57      	ldr	r2, [pc, #348]	@ (800348c <HAL_GPIO_Init+0x330>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d031      	beq.n	8003396 <HAL_GPIO_Init+0x23a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a56      	ldr	r2, [pc, #344]	@ (8003490 <HAL_GPIO_Init+0x334>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d02b      	beq.n	8003392 <HAL_GPIO_Init+0x236>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a55      	ldr	r2, [pc, #340]	@ (8003494 <HAL_GPIO_Init+0x338>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d025      	beq.n	800338e <HAL_GPIO_Init+0x232>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a54      	ldr	r2, [pc, #336]	@ (8003498 <HAL_GPIO_Init+0x33c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01f      	beq.n	800338a <HAL_GPIO_Init+0x22e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a53      	ldr	r2, [pc, #332]	@ (800349c <HAL_GPIO_Init+0x340>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d019      	beq.n	8003386 <HAL_GPIO_Init+0x22a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a52      	ldr	r2, [pc, #328]	@ (80034a0 <HAL_GPIO_Init+0x344>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <HAL_GPIO_Init+0x226>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a51      	ldr	r2, [pc, #324]	@ (80034a4 <HAL_GPIO_Init+0x348>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00d      	beq.n	800337e <HAL_GPIO_Init+0x222>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a50      	ldr	r2, [pc, #320]	@ (80034a8 <HAL_GPIO_Init+0x34c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d007      	beq.n	800337a <HAL_GPIO_Init+0x21e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a4f      	ldr	r2, [pc, #316]	@ (80034ac <HAL_GPIO_Init+0x350>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d101      	bne.n	8003376 <HAL_GPIO_Init+0x21a>
 8003372:	2309      	movs	r3, #9
 8003374:	e012      	b.n	800339c <HAL_GPIO_Init+0x240>
 8003376:	230a      	movs	r3, #10
 8003378:	e010      	b.n	800339c <HAL_GPIO_Init+0x240>
 800337a:	2308      	movs	r3, #8
 800337c:	e00e      	b.n	800339c <HAL_GPIO_Init+0x240>
 800337e:	2307      	movs	r3, #7
 8003380:	e00c      	b.n	800339c <HAL_GPIO_Init+0x240>
 8003382:	2306      	movs	r3, #6
 8003384:	e00a      	b.n	800339c <HAL_GPIO_Init+0x240>
 8003386:	2305      	movs	r3, #5
 8003388:	e008      	b.n	800339c <HAL_GPIO_Init+0x240>
 800338a:	2304      	movs	r3, #4
 800338c:	e006      	b.n	800339c <HAL_GPIO_Init+0x240>
 800338e:	2303      	movs	r3, #3
 8003390:	e004      	b.n	800339c <HAL_GPIO_Init+0x240>
 8003392:	2302      	movs	r3, #2
 8003394:	e002      	b.n	800339c <HAL_GPIO_Init+0x240>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_GPIO_Init+0x240>
 800339a:	2300      	movs	r3, #0
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	f002 0203 	and.w	r2, r2, #3
 80033a2:	0092      	lsls	r2, r2, #2
 80033a4:	4093      	lsls	r3, r2
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033ac:	4935      	ldr	r1, [pc, #212]	@ (8003484 <HAL_GPIO_Init+0x328>)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	3302      	adds	r3, #2
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ba:	4b3d      	ldr	r3, [pc, #244]	@ (80034b0 <HAL_GPIO_Init+0x354>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033de:	4a34      	ldr	r2, [pc, #208]	@ (80034b0 <HAL_GPIO_Init+0x354>)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033e4:	4b32      	ldr	r3, [pc, #200]	@ (80034b0 <HAL_GPIO_Init+0x354>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003408:	4a29      	ldr	r2, [pc, #164]	@ (80034b0 <HAL_GPIO_Init+0x354>)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800340e:	4b28      	ldr	r3, [pc, #160]	@ (80034b0 <HAL_GPIO_Init+0x354>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003432:	4a1f      	ldr	r2, [pc, #124]	@ (80034b0 <HAL_GPIO_Init+0x354>)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003438:	4b1d      	ldr	r3, [pc, #116]	@ (80034b0 <HAL_GPIO_Init+0x354>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800345c:	4a14      	ldr	r2, [pc, #80]	@ (80034b0 <HAL_GPIO_Init+0x354>)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3301      	adds	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2b0f      	cmp	r3, #15
 800346c:	f67f ae84 	bls.w	8003178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	3724      	adds	r7, #36	@ 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	40013800 	.word	0x40013800
 8003488:	40020000 	.word	0x40020000
 800348c:	40020400 	.word	0x40020400
 8003490:	40020800 	.word	0x40020800
 8003494:	40020c00 	.word	0x40020c00
 8003498:	40021000 	.word	0x40021000
 800349c:	40021400 	.word	0x40021400
 80034a0:	40021800 	.word	0x40021800
 80034a4:	40021c00 	.word	0x40021c00
 80034a8:	40022000 	.word	0x40022000
 80034ac:	40022400 	.word	0x40022400
 80034b0:	40013c00 	.word	0x40013c00

080034b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	e0d9      	b.n	8003684 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034d0:	2201      	movs	r2, #1
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4013      	ands	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	f040 80c9 	bne.w	800367e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80034ec:	4a6b      	ldr	r2, [pc, #428]	@ (800369c <HAL_GPIO_DeInit+0x1e8>)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	3302      	adds	r3, #2
 80034f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	220f      	movs	r2, #15
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	4013      	ands	r3, r2
 800350c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a63      	ldr	r2, [pc, #396]	@ (80036a0 <HAL_GPIO_DeInit+0x1ec>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d037      	beq.n	8003586 <HAL_GPIO_DeInit+0xd2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a62      	ldr	r2, [pc, #392]	@ (80036a4 <HAL_GPIO_DeInit+0x1f0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d031      	beq.n	8003582 <HAL_GPIO_DeInit+0xce>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a61      	ldr	r2, [pc, #388]	@ (80036a8 <HAL_GPIO_DeInit+0x1f4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d02b      	beq.n	800357e <HAL_GPIO_DeInit+0xca>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a60      	ldr	r2, [pc, #384]	@ (80036ac <HAL_GPIO_DeInit+0x1f8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d025      	beq.n	800357a <HAL_GPIO_DeInit+0xc6>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a5f      	ldr	r2, [pc, #380]	@ (80036b0 <HAL_GPIO_DeInit+0x1fc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01f      	beq.n	8003576 <HAL_GPIO_DeInit+0xc2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a5e      	ldr	r2, [pc, #376]	@ (80036b4 <HAL_GPIO_DeInit+0x200>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d019      	beq.n	8003572 <HAL_GPIO_DeInit+0xbe>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a5d      	ldr	r2, [pc, #372]	@ (80036b8 <HAL_GPIO_DeInit+0x204>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_GPIO_DeInit+0xba>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a5c      	ldr	r2, [pc, #368]	@ (80036bc <HAL_GPIO_DeInit+0x208>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00d      	beq.n	800356a <HAL_GPIO_DeInit+0xb6>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a5b      	ldr	r2, [pc, #364]	@ (80036c0 <HAL_GPIO_DeInit+0x20c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_GPIO_DeInit+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a5a      	ldr	r2, [pc, #360]	@ (80036c4 <HAL_GPIO_DeInit+0x210>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_GPIO_DeInit+0xae>
 800355e:	2309      	movs	r3, #9
 8003560:	e012      	b.n	8003588 <HAL_GPIO_DeInit+0xd4>
 8003562:	230a      	movs	r3, #10
 8003564:	e010      	b.n	8003588 <HAL_GPIO_DeInit+0xd4>
 8003566:	2308      	movs	r3, #8
 8003568:	e00e      	b.n	8003588 <HAL_GPIO_DeInit+0xd4>
 800356a:	2307      	movs	r3, #7
 800356c:	e00c      	b.n	8003588 <HAL_GPIO_DeInit+0xd4>
 800356e:	2306      	movs	r3, #6
 8003570:	e00a      	b.n	8003588 <HAL_GPIO_DeInit+0xd4>
 8003572:	2305      	movs	r3, #5
 8003574:	e008      	b.n	8003588 <HAL_GPIO_DeInit+0xd4>
 8003576:	2304      	movs	r3, #4
 8003578:	e006      	b.n	8003588 <HAL_GPIO_DeInit+0xd4>
 800357a:	2303      	movs	r3, #3
 800357c:	e004      	b.n	8003588 <HAL_GPIO_DeInit+0xd4>
 800357e:	2302      	movs	r3, #2
 8003580:	e002      	b.n	8003588 <HAL_GPIO_DeInit+0xd4>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_GPIO_DeInit+0xd4>
 8003586:	2300      	movs	r3, #0
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	f002 0203 	and.w	r2, r2, #3
 800358e:	0092      	lsls	r2, r2, #2
 8003590:	4093      	lsls	r3, r2
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	429a      	cmp	r2, r3
 8003596:	d132      	bne.n	80035fe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003598:	4b4b      	ldr	r3, [pc, #300]	@ (80036c8 <HAL_GPIO_DeInit+0x214>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	43db      	mvns	r3, r3
 80035a0:	4949      	ldr	r1, [pc, #292]	@ (80036c8 <HAL_GPIO_DeInit+0x214>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80035a6:	4b48      	ldr	r3, [pc, #288]	@ (80036c8 <HAL_GPIO_DeInit+0x214>)
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	4946      	ldr	r1, [pc, #280]	@ (80036c8 <HAL_GPIO_DeInit+0x214>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80035b4:	4b44      	ldr	r3, [pc, #272]	@ (80036c8 <HAL_GPIO_DeInit+0x214>)
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	4942      	ldr	r1, [pc, #264]	@ (80036c8 <HAL_GPIO_DeInit+0x214>)
 80035be:	4013      	ands	r3, r2
 80035c0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80035c2:	4b41      	ldr	r3, [pc, #260]	@ (80036c8 <HAL_GPIO_DeInit+0x214>)
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	493f      	ldr	r1, [pc, #252]	@ (80036c8 <HAL_GPIO_DeInit+0x214>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	220f      	movs	r2, #15
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80035e0:	4a2e      	ldr	r2, [pc, #184]	@ (800369c <HAL_GPIO_DeInit+0x1e8>)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	089b      	lsrs	r3, r3, #2
 80035e6:	3302      	adds	r3, #2
 80035e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	43da      	mvns	r2, r3
 80035f0:	482a      	ldr	r0, [pc, #168]	@ (800369c <HAL_GPIO_DeInit+0x1e8>)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	400a      	ands	r2, r1
 80035f8:	3302      	adds	r3, #2
 80035fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	2103      	movs	r1, #3
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	401a      	ands	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	08da      	lsrs	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3208      	adds	r2, #8
 800361c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	220f      	movs	r2, #15
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	08d2      	lsrs	r2, r2, #3
 8003634:	4019      	ands	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3208      	adds	r2, #8
 800363a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	2103      	movs	r1, #3
 8003648:	fa01 f303 	lsl.w	r3, r1, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	401a      	ands	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	2101      	movs	r1, #1
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	401a      	ands	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	2103      	movs	r1, #3
 8003672:	fa01 f303 	lsl.w	r3, r1, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	401a      	ands	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3301      	adds	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	f67f af22 	bls.w	80034d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40013800 	.word	0x40013800
 80036a0:	40020000 	.word	0x40020000
 80036a4:	40020400 	.word	0x40020400
 80036a8:	40020800 	.word	0x40020800
 80036ac:	40020c00 	.word	0x40020c00
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40021400 	.word	0x40021400
 80036b8:	40021800 	.word	0x40021800
 80036bc:	40021c00 	.word	0x40021c00
 80036c0:	40022000 	.word	0x40022000
 80036c4:	40022400 	.word	0x40022400
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	887b      	ldrh	r3, [r7, #2]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
 80036e8:	e001      	b.n	80036ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
 8003708:	4613      	mov	r3, r2
 800370a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800370c:	787b      	ldrb	r3, [r7, #1]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003718:	e003      	b.n	8003722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	041a      	lsls	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	619a      	str	r2, [r3, #24]
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e0bf      	b.n	80038c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff f8bc 	bl	80028d4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003772:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6999      	ldr	r1, [r3, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003788:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6899      	ldr	r1, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4b4a      	ldr	r3, [pc, #296]	@ (80038cc <HAL_LTDC_Init+0x19c>)
 80037a4:	400b      	ands	r3, r1
 80037a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6899      	ldr	r1, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68d9      	ldr	r1, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b3e      	ldr	r3, [pc, #248]	@ (80038cc <HAL_LTDC_Init+0x19c>)
 80037d2:	400b      	ands	r3, r1
 80037d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	041b      	lsls	r3, r3, #16
 80037dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68d9      	ldr	r1, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6919      	ldr	r1, [r3, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b33      	ldr	r3, [pc, #204]	@ (80038cc <HAL_LTDC_Init+0x19c>)
 8003800:	400b      	ands	r3, r1
 8003802:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	041b      	lsls	r3, r3, #16
 800380a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6919      	ldr	r1, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6959      	ldr	r1, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b27      	ldr	r3, [pc, #156]	@ (80038cc <HAL_LTDC_Init+0x19c>)
 800382e:	400b      	ands	r3, r1
 8003830:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	041b      	lsls	r3, r3, #16
 8003838:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6959      	ldr	r1, [r3, #20]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003860:	041b      	lsls	r3, r3, #16
 8003862:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003872:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0206 	orr.w	r2, r2, #6
 800389e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	f000f800 	.word	0xf000f800

080038d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80038d0:	b5b0      	push	{r4, r5, r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_LTDC_ConfigLayer+0x1a>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e02c      	b.n	8003944 <HAL_LTDC_ConfigLayer+0x74>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2202      	movs	r2, #2
 80038f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2134      	movs	r1, #52	@ 0x34
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	4413      	add	r3, r2
 8003906:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4614      	mov	r4, r2
 800390e:	461d      	mov	r5, r3
 8003910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800391a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f876 	bl	8003a16 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2201      	movs	r2, #1
 8003930:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bdb0      	pop	{r4, r5, r7, pc}

0800394c <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_LTDC_SetAlpha+0x1a>
 8003962:	2302      	movs	r3, #2
 8003964:	e024      	b.n	80039b0 <HAL_LTDC_SetAlpha+0x64>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2202      	movs	r2, #2
 8003972:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2234      	movs	r2, #52	@ 0x34
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	3338      	adds	r3, #56	@ 0x38
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6979      	ldr	r1, [r7, #20]
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f840 	bl	8003a16 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2201      	movs	r2, #1
 800399c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_LTDC_Reload+0x18>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e01c      	b.n	8003a0a <HAL_LTDC_Reload+0x52>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0208 	orr.w	r2, r2, #8
 80039ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b089      	sub	sp, #36	@ 0x24
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a32:	4413      	add	r3, r2
 8003a34:	041b      	lsls	r3, r3, #16
 8003a36:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	01db      	lsls	r3, r3, #7
 8003a42:	4413      	add	r3, r2
 8003a44:	3384      	adds	r3, #132	@ 0x84
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	01d2      	lsls	r2, r2, #7
 8003a52:	440a      	add	r2, r1
 8003a54:	3284      	adds	r2, #132	@ 0x84
 8003a56:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003a5a:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	0c1b      	lsrs	r3, r3, #16
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a6c:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a6e:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4619      	mov	r1, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	01db      	lsls	r3, r3, #7
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3384      	adds	r3, #132	@ 0x84
 8003a7e:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a84:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a94:	4413      	add	r3, r2
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	01db      	lsls	r3, r3, #7
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3384      	adds	r3, #132	@ 0x84
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	4611      	mov	r1, r2
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	01d2      	lsls	r2, r2, #7
 8003ab4:	440a      	add	r2, r1
 8003ab6:	3284      	adds	r2, #132	@ 0x84
 8003ab8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003abc:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003acc:	4413      	add	r3, r2
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	01db      	lsls	r3, r3, #7
 8003ada:	440b      	add	r3, r1
 8003adc:	3384      	adds	r3, #132	@ 0x84
 8003ade:	4619      	mov	r1, r3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	01db      	lsls	r3, r3, #7
 8003af0:	4413      	add	r3, r2
 8003af2:	3384      	adds	r3, #132	@ 0x84
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	4611      	mov	r1, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	01d2      	lsls	r2, r2, #7
 8003b00:	440a      	add	r2, r1
 8003b02:	3284      	adds	r2, #132	@ 0x84
 8003b04:	f023 0307 	bic.w	r3, r3, #7
 8003b08:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	01db      	lsls	r3, r3, #7
 8003b14:	4413      	add	r3, r2
 8003b16:	3384      	adds	r3, #132	@ 0x84
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003b30:	041b      	lsls	r3, r3, #16
 8003b32:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	01db      	lsls	r3, r3, #7
 8003b46:	4413      	add	r3, r2
 8003b48:	3384      	adds	r3, #132	@ 0x84
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	01db      	lsls	r3, r3, #7
 8003b56:	4413      	add	r3, r2
 8003b58:	3384      	adds	r3, #132	@ 0x84
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b66:	461a      	mov	r2, r3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4619      	mov	r1, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	01db      	lsls	r3, r3, #7
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3384      	adds	r3, #132	@ 0x84
 8003b7e:	4619      	mov	r1, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	01db      	lsls	r3, r3, #7
 8003b90:	4413      	add	r3, r2
 8003b92:	3384      	adds	r3, #132	@ 0x84
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	01d2      	lsls	r2, r2, #7
 8003ba0:	440a      	add	r2, r1
 8003ba2:	3284      	adds	r2, #132	@ 0x84
 8003ba4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ba8:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	01db      	lsls	r3, r3, #7
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3384      	adds	r3, #132	@ 0x84
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	01db      	lsls	r3, r3, #7
 8003bca:	4413      	add	r3, r2
 8003bcc:	3384      	adds	r3, #132	@ 0x84
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	01d2      	lsls	r2, r2, #7
 8003bda:	440a      	add	r2, r1
 8003bdc:	3284      	adds	r2, #132	@ 0x84
 8003bde:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003be2:	f023 0307 	bic.w	r3, r3, #7
 8003be6:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	68f9      	ldr	r1, [r7, #12]
 8003bf2:	6809      	ldr	r1, [r1, #0]
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	01c9      	lsls	r1, r1, #7
 8003bfa:	4401      	add	r1, r0
 8003bfc:	3184      	adds	r1, #132	@ 0x84
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	01db      	lsls	r3, r3, #7
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3384      	adds	r3, #132	@ 0x84
 8003c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	01db      	lsls	r3, r3, #7
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3384      	adds	r3, #132	@ 0x84
 8003c20:	461a      	mov	r2, r3
 8003c22:	2300      	movs	r3, #0
 8003c24:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	01db      	lsls	r3, r3, #7
 8003c30:	4413      	add	r3, r2
 8003c32:	3384      	adds	r3, #132	@ 0x84
 8003c34:	461a      	mov	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003c44:	2304      	movs	r3, #4
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	e01b      	b.n	8003c82 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d102      	bne.n	8003c58 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003c52:	2303      	movs	r3, #3
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e014      	b.n	8003c82 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d00b      	beq.n	8003c78 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d007      	beq.n	8003c78 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d003      	beq.n	8003c78 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c74:	2b07      	cmp	r3, #7
 8003c76:	d102      	bne.n	8003c7e <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	e001      	b.n	8003c82 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	01db      	lsls	r3, r3, #7
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3384      	adds	r3, #132	@ 0x84
 8003c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	4611      	mov	r1, r2
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	01d2      	lsls	r2, r2, #7
 8003c9c:	440a      	add	r2, r1
 8003c9e:	3284      	adds	r2, #132	@ 0x84
 8003ca0:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	fb02 f303 	mul.w	r3, r2, r3
 8003cb0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6859      	ldr	r1, [r3, #4]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	1acb      	subs	r3, r1, r3
 8003cbc:	69f9      	ldr	r1, [r7, #28]
 8003cbe:	fb01 f303 	mul.w	r3, r1, r3
 8003cc2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003cc4:	68f9      	ldr	r1, [r7, #12]
 8003cc6:	6809      	ldr	r1, [r1, #0]
 8003cc8:	4608      	mov	r0, r1
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	01c9      	lsls	r1, r1, #7
 8003cce:	4401      	add	r1, r0
 8003cd0:	3184      	adds	r1, #132	@ 0x84
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	01db      	lsls	r3, r3, #7
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3384      	adds	r3, #132	@ 0x84
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	4611      	mov	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	01d2      	lsls	r2, r2, #7
 8003cf0:	440a      	add	r2, r1
 8003cf2:	3284      	adds	r2, #132	@ 0x84
 8003cf4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003cf8:	f023 0307 	bic.w	r3, r3, #7
 8003cfc:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	01db      	lsls	r3, r3, #7
 8003d08:	4413      	add	r3, r2
 8003d0a:	3384      	adds	r3, #132	@ 0x84
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	01db      	lsls	r3, r3, #7
 8003d1e:	4413      	add	r3, r2
 8003d20:	3384      	adds	r3, #132	@ 0x84
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	4611      	mov	r1, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	01d2      	lsls	r2, r2, #7
 8003d2e:	440a      	add	r2, r1
 8003d30:	3284      	adds	r2, #132	@ 0x84
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6013      	str	r3, [r2, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	3724      	adds	r7, #36	@ 0x24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e267      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d075      	beq.n	8003e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d62:	4b88      	ldr	r3, [pc, #544]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d00c      	beq.n	8003d88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d6e:	4b85      	ldr	r3, [pc, #532]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d112      	bne.n	8003da0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7a:	4b82      	ldr	r3, [pc, #520]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d86:	d10b      	bne.n	8003da0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	4b7e      	ldr	r3, [pc, #504]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d05b      	beq.n	8003e4c <HAL_RCC_OscConfig+0x108>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d157      	bne.n	8003e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e242      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da8:	d106      	bne.n	8003db8 <HAL_RCC_OscConfig+0x74>
 8003daa:	4b76      	ldr	r3, [pc, #472]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a75      	ldr	r2, [pc, #468]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e01d      	b.n	8003df4 <HAL_RCC_OscConfig+0xb0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x98>
 8003dc2:	4b70      	ldr	r3, [pc, #448]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a6f      	ldr	r2, [pc, #444]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b6d      	ldr	r3, [pc, #436]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a6c      	ldr	r2, [pc, #432]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e00b      	b.n	8003df4 <HAL_RCC_OscConfig+0xb0>
 8003ddc:	4b69      	ldr	r3, [pc, #420]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a68      	ldr	r2, [pc, #416]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	4b66      	ldr	r3, [pc, #408]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a65      	ldr	r2, [pc, #404]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003dee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d013      	beq.n	8003e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7ff f80e 	bl	8002e1c <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e04:	f7ff f80a 	bl	8002e1c <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	@ 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e207      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	4b5b      	ldr	r3, [pc, #364]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0xc0>
 8003e22:	e014      	b.n	8003e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fe fffa 	bl	8002e1c <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7fe fff6 	bl	8002e1c <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	@ 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e1f3      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3e:	4b51      	ldr	r3, [pc, #324]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0xe8>
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d063      	beq.n	8003f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e66:	4b47      	ldr	r3, [pc, #284]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d11c      	bne.n	8003eac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e72:	4b44      	ldr	r3, [pc, #272]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d116      	bne.n	8003eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	4b41      	ldr	r3, [pc, #260]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_RCC_OscConfig+0x152>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d001      	beq.n	8003e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e1c7      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e96:	4b3b      	ldr	r3, [pc, #236]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4937      	ldr	r1, [pc, #220]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	e03a      	b.n	8003f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d020      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb4:	4b34      	ldr	r3, [pc, #208]	@ (8003f88 <HAL_RCC_OscConfig+0x244>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7fe ffaf 	bl	8002e1c <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec2:	f7fe ffab 	bl	8002e1c <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e1a8      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee0:	4b28      	ldr	r3, [pc, #160]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4925      	ldr	r1, [pc, #148]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]
 8003ef4:	e015      	b.n	8003f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef6:	4b24      	ldr	r3, [pc, #144]	@ (8003f88 <HAL_RCC_OscConfig+0x244>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe ff8e 	bl	8002e1c <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f04:	f7fe ff8a 	bl	8002e1c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e187      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f16:	4b1b      	ldr	r3, [pc, #108]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d036      	beq.n	8003f9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f36:	4b15      	ldr	r3, [pc, #84]	@ (8003f8c <HAL_RCC_OscConfig+0x248>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fe ff6e 	bl	8002e1c <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f44:	f7fe ff6a 	bl	8002e1c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e167      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f56:	4b0b      	ldr	r3, [pc, #44]	@ (8003f84 <HAL_RCC_OscConfig+0x240>)
 8003f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x200>
 8003f62:	e01b      	b.n	8003f9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f64:	4b09      	ldr	r3, [pc, #36]	@ (8003f8c <HAL_RCC_OscConfig+0x248>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6a:	f7fe ff57 	bl	8002e1c <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f70:	e00e      	b.n	8003f90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f72:	f7fe ff53 	bl	8002e1c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d907      	bls.n	8003f90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e150      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
 8003f84:	40023800 	.word	0x40023800
 8003f88:	42470000 	.word	0x42470000
 8003f8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f90:	4b88      	ldr	r3, [pc, #544]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ea      	bne.n	8003f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8097 	beq.w	80040d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003faa:	2300      	movs	r3, #0
 8003fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fae:	4b81      	ldr	r3, [pc, #516]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	4b7d      	ldr	r3, [pc, #500]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	4a7c      	ldr	r2, [pc, #496]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fca:	4b7a      	ldr	r3, [pc, #488]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fda:	4b77      	ldr	r3, [pc, #476]	@ (80041b8 <HAL_RCC_OscConfig+0x474>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d118      	bne.n	8004018 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fe6:	4b74      	ldr	r3, [pc, #464]	@ (80041b8 <HAL_RCC_OscConfig+0x474>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a73      	ldr	r2, [pc, #460]	@ (80041b8 <HAL_RCC_OscConfig+0x474>)
 8003fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff2:	f7fe ff13 	bl	8002e1c <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffa:	f7fe ff0f 	bl	8002e1c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e10c      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	4b6a      	ldr	r3, [pc, #424]	@ (80041b8 <HAL_RCC_OscConfig+0x474>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d106      	bne.n	800402e <HAL_RCC_OscConfig+0x2ea>
 8004020:	4b64      	ldr	r3, [pc, #400]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004024:	4a63      	ldr	r2, [pc, #396]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6713      	str	r3, [r2, #112]	@ 0x70
 800402c:	e01c      	b.n	8004068 <HAL_RCC_OscConfig+0x324>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b05      	cmp	r3, #5
 8004034:	d10c      	bne.n	8004050 <HAL_RCC_OscConfig+0x30c>
 8004036:	4b5f      	ldr	r3, [pc, #380]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	4a5e      	ldr	r2, [pc, #376]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 800403c:	f043 0304 	orr.w	r3, r3, #4
 8004040:	6713      	str	r3, [r2, #112]	@ 0x70
 8004042:	4b5c      	ldr	r3, [pc, #368]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004046:	4a5b      	ldr	r2, [pc, #364]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6713      	str	r3, [r2, #112]	@ 0x70
 800404e:	e00b      	b.n	8004068 <HAL_RCC_OscConfig+0x324>
 8004050:	4b58      	ldr	r3, [pc, #352]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004054:	4a57      	ldr	r2, [pc, #348]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	6713      	str	r3, [r2, #112]	@ 0x70
 800405c:	4b55      	ldr	r3, [pc, #340]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004060:	4a54      	ldr	r2, [pc, #336]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004062:	f023 0304 	bic.w	r3, r3, #4
 8004066:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d015      	beq.n	800409c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fe fed4 	bl	8002e1c <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004076:	e00a      	b.n	800408e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fe fed0 	bl	8002e1c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e0cb      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408e:	4b49      	ldr	r3, [pc, #292]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0ee      	beq.n	8004078 <HAL_RCC_OscConfig+0x334>
 800409a:	e014      	b.n	80040c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409c:	f7fe febe 	bl	8002e1c <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a4:	f7fe feba 	bl	8002e1c <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e0b5      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ba:	4b3e      	ldr	r3, [pc, #248]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1ee      	bne.n	80040a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d105      	bne.n	80040d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040cc:	4b39      	ldr	r3, [pc, #228]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	4a38      	ldr	r2, [pc, #224]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 80040d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80a1 	beq.w	8004224 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e2:	4b34      	ldr	r3, [pc, #208]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d05c      	beq.n	80041a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d141      	bne.n	800417a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4b31      	ldr	r3, [pc, #196]	@ (80041bc <HAL_RCC_OscConfig+0x478>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fe fe8e 	bl	8002e1c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004104:	f7fe fe8a 	bl	8002e1c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e087      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	4b27      	ldr	r3, [pc, #156]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	019b      	lsls	r3, r3, #6
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	3b01      	subs	r3, #1
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	491b      	ldr	r1, [pc, #108]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414c:	4b1b      	ldr	r3, [pc, #108]	@ (80041bc <HAL_RCC_OscConfig+0x478>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004152:	f7fe fe63 	bl	8002e1c <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415a:	f7fe fe5f 	bl	8002e1c <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e05c      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416c:	4b11      	ldr	r3, [pc, #68]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x416>
 8004178:	e054      	b.n	8004224 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <HAL_RCC_OscConfig+0x478>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fe fe4c 	bl	8002e1c <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fe fe48 	bl	8002e1c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e045      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_RCC_OscConfig+0x470>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x444>
 80041a6:	e03d      	b.n	8004224 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e038      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40007000 	.word	0x40007000
 80041bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004230 <HAL_RCC_OscConfig+0x4ec>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d028      	beq.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d121      	bne.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d11a      	bne.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041f0:	4013      	ands	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d111      	bne.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	3b01      	subs	r3, #1
 800420a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d107      	bne.n	8004220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40023800 	.word	0x40023800

08004234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0cc      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004248:	4b68      	ldr	r3, [pc, #416]	@ (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d90c      	bls.n	8004270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b65      	ldr	r3, [pc, #404]	@ (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425e:	4b63      	ldr	r3, [pc, #396]	@ (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0b8      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d020      	beq.n	80042be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004288:	4b59      	ldr	r3, [pc, #356]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a58      	ldr	r2, [pc, #352]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004292:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a0:	4b53      	ldr	r3, [pc, #332]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4a52      	ldr	r2, [pc, #328]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ac:	4b50      	ldr	r3, [pc, #320]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	494d      	ldr	r1, [pc, #308]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d044      	beq.n	8004354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	4b47      	ldr	r3, [pc, #284]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d119      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e07f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d003      	beq.n	80042f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f2:	4b3f      	ldr	r3, [pc, #252]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e06f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004302:	4b3b      	ldr	r3, [pc, #236]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e067      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004312:	4b37      	ldr	r3, [pc, #220]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f023 0203 	bic.w	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4934      	ldr	r1, [pc, #208]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	4313      	orrs	r3, r2
 8004322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004324:	f7fe fd7a 	bl	8002e1c <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432a:	e00a      	b.n	8004342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800432c:	f7fe fd76 	bl	8002e1c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e04f      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	4b2b      	ldr	r3, [pc, #172]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 020c 	and.w	r2, r3, #12
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	429a      	cmp	r2, r3
 8004352:	d1eb      	bne.n	800432c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004354:	4b25      	ldr	r3, [pc, #148]	@ (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d20c      	bcs.n	800437c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b22      	ldr	r3, [pc, #136]	@ (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b20      	ldr	r3, [pc, #128]	@ (80043ec <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e032      	b.n	80043e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004388:	4b19      	ldr	r3, [pc, #100]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4916      	ldr	r1, [pc, #88]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043a6:	4b12      	ldr	r3, [pc, #72]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	490e      	ldr	r1, [pc, #56]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ba:	f000 f821 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80043be:	4602      	mov	r2, r0
 80043c0:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	490a      	ldr	r1, [pc, #40]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 80043cc:	5ccb      	ldrb	r3, [r1, r3]
 80043ce:	fa22 f303 	lsr.w	r3, r2, r3
 80043d2:	4a09      	ldr	r2, [pc, #36]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80043d6:	4b09      	ldr	r3, [pc, #36]	@ (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fcda 	bl	8002d94 <HAL_InitTick>

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40023c00 	.word	0x40023c00
 80043f0:	40023800 	.word	0x40023800
 80043f4:	08006eb0 	.word	0x08006eb0
 80043f8:	20000084 	.word	0x20000084
 80043fc:	20000088 	.word	0x20000088

08004400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004404:	b090      	sub	sp, #64	@ 0x40
 8004406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004418:	4b59      	ldr	r3, [pc, #356]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b08      	cmp	r3, #8
 8004422:	d00d      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x40>
 8004424:	2b08      	cmp	r3, #8
 8004426:	f200 80a1 	bhi.w	800456c <HAL_RCC_GetSysClockFreq+0x16c>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x34>
 800442e:	2b04      	cmp	r3, #4
 8004430:	d003      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0x3a>
 8004432:	e09b      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004434:	4b53      	ldr	r3, [pc, #332]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x184>)
 8004436:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004438:	e09b      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800443a:	4b53      	ldr	r3, [pc, #332]	@ (8004588 <HAL_RCC_GetSysClockFreq+0x188>)
 800443c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800443e:	e098      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004440:	4b4f      	ldr	r3, [pc, #316]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004448:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800444a:	4b4d      	ldr	r3, [pc, #308]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d028      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004456:	4b4a      	ldr	r3, [pc, #296]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	099b      	lsrs	r3, r3, #6
 800445c:	2200      	movs	r2, #0
 800445e:	623b      	str	r3, [r7, #32]
 8004460:	627a      	str	r2, [r7, #36]	@ 0x24
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004468:	2100      	movs	r1, #0
 800446a:	4b47      	ldr	r3, [pc, #284]	@ (8004588 <HAL_RCC_GetSysClockFreq+0x188>)
 800446c:	fb03 f201 	mul.w	r2, r3, r1
 8004470:	2300      	movs	r3, #0
 8004472:	fb00 f303 	mul.w	r3, r0, r3
 8004476:	4413      	add	r3, r2
 8004478:	4a43      	ldr	r2, [pc, #268]	@ (8004588 <HAL_RCC_GetSysClockFreq+0x188>)
 800447a:	fba0 1202 	umull	r1, r2, r0, r2
 800447e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004480:	460a      	mov	r2, r1
 8004482:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004486:	4413      	add	r3, r2
 8004488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800448a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448c:	2200      	movs	r2, #0
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	61fa      	str	r2, [r7, #28]
 8004492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004496:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800449a:	f7fc f88b 	bl	80005b4 <__aeabi_uldivmod>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4613      	mov	r3, r2
 80044a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044a6:	e053      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a8:	4b35      	ldr	r3, [pc, #212]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	099b      	lsrs	r3, r3, #6
 80044ae:	2200      	movs	r2, #0
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	617a      	str	r2, [r7, #20]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044ba:	f04f 0b00 	mov.w	fp, #0
 80044be:	4652      	mov	r2, sl
 80044c0:	465b      	mov	r3, fp
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f04f 0100 	mov.w	r1, #0
 80044ca:	0159      	lsls	r1, r3, #5
 80044cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044d0:	0150      	lsls	r0, r2, #5
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	ebb2 080a 	subs.w	r8, r2, sl
 80044da:	eb63 090b 	sbc.w	r9, r3, fp
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044f2:	ebb2 0408 	subs.w	r4, r2, r8
 80044f6:	eb63 0509 	sbc.w	r5, r3, r9
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	00eb      	lsls	r3, r5, #3
 8004504:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004508:	00e2      	lsls	r2, r4, #3
 800450a:	4614      	mov	r4, r2
 800450c:	461d      	mov	r5, r3
 800450e:	eb14 030a 	adds.w	r3, r4, sl
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	eb45 030b 	adc.w	r3, r5, fp
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004526:	4629      	mov	r1, r5
 8004528:	028b      	lsls	r3, r1, #10
 800452a:	4621      	mov	r1, r4
 800452c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004530:	4621      	mov	r1, r4
 8004532:	028a      	lsls	r2, r1, #10
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453a:	2200      	movs	r2, #0
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	60fa      	str	r2, [r7, #12]
 8004540:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004544:	f7fc f836 	bl	80005b4 <__aeabi_uldivmod>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4613      	mov	r3, r2
 800454e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004550:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x180>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	3301      	adds	r3, #1
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004560:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800456a:	e002      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800456c:	4b05      	ldr	r3, [pc, #20]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x184>)
 800456e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004574:	4618      	mov	r0, r3
 8004576:	3740      	adds	r7, #64	@ 0x40
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	00f42400 	.word	0x00f42400
 8004588:	017d7840 	.word	0x017d7840

0800458c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d075      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045c0:	4b91      	ldr	r3, [pc, #580]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045c6:	f7fe fc29 	bl	8002e1c <HAL_GetTick>
 80045ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045cc:	e008      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045ce:	f7fe fc25 	bl	8002e1c <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e189      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045e0:	4b8a      	ldr	r3, [pc, #552]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f0      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	019a      	lsls	r2, r3, #6
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	071b      	lsls	r3, r3, #28
 8004604:	4981      	ldr	r1, [pc, #516]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01f      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004618:	4b7c      	ldr	r3, [pc, #496]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800461a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800461e:	0f1b      	lsrs	r3, r3, #28
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	019a      	lsls	r2, r3, #6
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	431a      	orrs	r2, r3
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	071b      	lsls	r3, r3, #28
 8004638:	4974      	ldr	r1, [pc, #464]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004640:	4b72      	ldr	r3, [pc, #456]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004642:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004646:	f023 021f 	bic.w	r2, r3, #31
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	3b01      	subs	r3, #1
 8004650:	496e      	ldr	r1, [pc, #440]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	019a      	lsls	r2, r3, #6
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	061b      	lsls	r3, r3, #24
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	071b      	lsls	r3, r3, #28
 8004678:	4964      	ldr	r1, [pc, #400]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004680:	4b61      	ldr	r3, [pc, #388]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004686:	f7fe fbc9 	bl	8002e1c <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800468e:	f7fe fbc5 	bl	8002e1c <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e129      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046a0:	4b5a      	ldr	r3, [pc, #360]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d079      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046c4:	4b52      	ldr	r3, [pc, #328]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046ca:	f7fe fba7 	bl	8002e1c <HAL_GetTick>
 80046ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046d2:	f7fe fba3 	bl	8002e1c <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e107      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046e4:	4b49      	ldr	r3, [pc, #292]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046f0:	d0ef      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d020      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046fe:	4b43      	ldr	r3, [pc, #268]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004704:	0f1b      	lsrs	r3, r3, #28
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	019a      	lsls	r2, r3, #6
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	061b      	lsls	r3, r3, #24
 8004718:	431a      	orrs	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	071b      	lsls	r3, r3, #28
 800471e:	493b      	ldr	r1, [pc, #236]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004726:	4b39      	ldr	r3, [pc, #228]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800472c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	3b01      	subs	r3, #1
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	4934      	ldr	r1, [pc, #208]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01e      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800474c:	4b2f      	ldr	r3, [pc, #188]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004752:	0e1b      	lsrs	r3, r3, #24
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	019a      	lsls	r2, r3, #6
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	061b      	lsls	r3, r3, #24
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	071b      	lsls	r3, r3, #28
 800476c:	4927      	ldr	r1, [pc, #156]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004774:	4b25      	ldr	r3, [pc, #148]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800477a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004782:	4922      	ldr	r1, [pc, #136]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800478a:	4b21      	ldr	r3, [pc, #132]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004790:	f7fe fb44 	bl	8002e1c <HAL_GetTick>
 8004794:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004798:	f7fe fb40 	bl	8002e1c <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e0a4      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047aa:	4b18      	ldr	r3, [pc, #96]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047b6:	d1ef      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 808b 	beq.w	80048dc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	4b10      	ldr	r3, [pc, #64]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	4a0f      	ldr	r2, [pc, #60]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80047d6:	4b0d      	ldr	r3, [pc, #52]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a0b      	ldr	r2, [pc, #44]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80047e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047ee:	f7fe fb15 	bl	8002e1c <HAL_GetTick>
 80047f2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80047f4:	e010      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f6:	f7fe fb11 	bl	8002e1c <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d909      	bls.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e075      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004808:	42470068 	.word	0x42470068
 800480c:	40023800 	.word	0x40023800
 8004810:	42470070 	.word	0x42470070
 8004814:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004818:	4b38      	ldr	r3, [pc, #224]	@ (80048fc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0e8      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004824:	4b36      	ldr	r3, [pc, #216]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800482c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02f      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	429a      	cmp	r2, r3
 8004840:	d028      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004842:	4b2f      	ldr	r3, [pc, #188]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800484a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800484c:	4b2d      	ldr	r3, [pc, #180]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004852:	4b2c      	ldr	r3, [pc, #176]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004858:	4a29      	ldr	r2, [pc, #164]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800485e:	4b28      	ldr	r3, [pc, #160]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d114      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800486a:	f7fe fad7 	bl	8002e1c <HAL_GetTick>
 800486e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004870:	e00a      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fe fad3 	bl	8002e1c <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e035      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004888:	4b1d      	ldr	r3, [pc, #116]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ee      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800489c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a0:	d10d      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80048a2:	4b17      	ldr	r3, [pc, #92]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80048b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048b6:	4912      	ldr	r1, [pc, #72]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	608b      	str	r3, [r1, #8]
 80048bc:	e005      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80048be:	4b10      	ldr	r3, [pc, #64]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	4a0f      	ldr	r2, [pc, #60]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048c4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80048c8:	6093      	str	r3, [r2, #8]
 80048ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d6:	490a      	ldr	r1, [pc, #40]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d004      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80048ee:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80048f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40007000 	.word	0x40007000
 8004900:	40023800 	.word	0x40023800
 8004904:	42470e40 	.word	0x42470e40
 8004908:	424711e0 	.word	0x424711e0

0800490c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e01c      	b.n	8004958 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	795b      	ldrb	r3, [r3, #5]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d105      	bne.n	8004934 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fe f8f8 	bl	8002b24 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0204 	orr.w	r2, r2, #4
 8004948:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	791b      	ldrb	r3, [r3, #4]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_RNG_GenerateRandomNumber+0x1a>
 8004976:	2302      	movs	r3, #2
 8004978:	e044      	b.n	8004a04 <HAL_RNG_GenerateRandomNumber+0xa4>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	795b      	ldrb	r3, [r3, #5]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b01      	cmp	r3, #1
 8004988:	d133      	bne.n	80049f2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2202      	movs	r2, #2
 800498e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004990:	f7fe fa44 	bl	8002e1c <HAL_GetTick>
 8004994:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004996:	e018      	b.n	80049ca <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004998:	f7fe fa40 	bl	8002e1c <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d911      	bls.n	80049ca <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d00a      	beq.n	80049ca <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2202      	movs	r2, #2
 80049be:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e01c      	b.n	8004a04 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d1df      	bne.n	8004998 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	715a      	strb	r2, [r3, #5]
 80049f0:	e004      	b.n	80049fc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2204      	movs	r2, #4
 80049f6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	711a      	strb	r2, [r3, #4]

  return status;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e07b      	b.n	8004b16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d108      	bne.n	8004a38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a2e:	d009      	beq.n	8004a44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	61da      	str	r2, [r3, #28]
 8004a36:	e005      	b.n	8004a44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fe f882 	bl	8002b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac8:	ea42 0103 	orr.w	r1, r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	0c1b      	lsrs	r3, r3, #16
 8004ae2:	f003 0104 	and.w	r1, r3, #4
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	f003 0210 	and.w	r2, r3, #16
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e01a      	b.n	8004b66 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b46:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7fe f855 	bl	8002bf8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b088      	sub	sp, #32
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b7e:	f7fe f94d 	bl	8002e1c <HAL_GetTick>
 8004b82:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d001      	beq.n	8004b98 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004b94:	2302      	movs	r3, #2
 8004b96:	e12a      	b.n	8004dee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_SPI_Transmit+0x36>
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e122      	b.n	8004dee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_SPI_Transmit+0x48>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e11b      	b.n	8004dee <HAL_SPI_Transmit+0x280>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	88fa      	ldrh	r2, [r7, #6]
 8004bd6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	88fa      	ldrh	r2, [r7, #6]
 8004bdc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c04:	d10f      	bne.n	8004c26 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c30:	2b40      	cmp	r3, #64	@ 0x40
 8004c32:	d007      	beq.n	8004c44 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c4c:	d152      	bne.n	8004cf4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_SPI_Transmit+0xee>
 8004c56:	8b7b      	ldrh	r3, [r7, #26]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d145      	bne.n	8004ce8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c60:	881a      	ldrh	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6c:	1c9a      	adds	r2, r3, #2
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c80:	e032      	b.n	8004ce8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d112      	bne.n	8004cb6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c94:	881a      	ldrh	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca0:	1c9a      	adds	r2, r3, #2
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004cb4:	e018      	b.n	8004ce8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cb6:	f7fe f8b1 	bl	8002e1c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d803      	bhi.n	8004cce <HAL_SPI_Transmit+0x160>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d102      	bne.n	8004cd4 <HAL_SPI_Transmit+0x166>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d109      	bne.n	8004ce8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e082      	b.n	8004dee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1c7      	bne.n	8004c82 <HAL_SPI_Transmit+0x114>
 8004cf2:	e053      	b.n	8004d9c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_SPI_Transmit+0x194>
 8004cfc:	8b7b      	ldrh	r3, [r7, #26]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d147      	bne.n	8004d92 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	330c      	adds	r3, #12
 8004d0c:	7812      	ldrb	r2, [r2, #0]
 8004d0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d28:	e033      	b.n	8004d92 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d113      	bne.n	8004d60 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	7812      	ldrb	r2, [r2, #0]
 8004d44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d5e:	e018      	b.n	8004d92 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d60:	f7fe f85c 	bl	8002e1c <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d803      	bhi.n	8004d78 <HAL_SPI_Transmit+0x20a>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d102      	bne.n	8004d7e <HAL_SPI_Transmit+0x210>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e02d      	b.n	8004dee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1c6      	bne.n	8004d2a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	6839      	ldr	r1, [r7, #0]
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f8bf 	bl	8004f24 <SPI_EndRxTxTransaction>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004dec:	2300      	movs	r3, #0
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e04:	b2db      	uxtb	r3, r3
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	4613      	mov	r3, r2
 8004e22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e24:	f7fd fffa 	bl	8002e1c <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	4413      	add	r3, r2
 8004e32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e34:	f7fd fff2 	bl	8002e1c <HAL_GetTick>
 8004e38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e3a:	4b39      	ldr	r3, [pc, #228]	@ (8004f20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	015b      	lsls	r3, r3, #5
 8004e40:	0d1b      	lsrs	r3, r3, #20
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	fb02 f303 	mul.w	r3, r2, r3
 8004e48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e4a:	e054      	b.n	8004ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d050      	beq.n	8004ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e54:	f7fd ffe2 	bl	8002e1c <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d902      	bls.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d13d      	bne.n	8004ee6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e82:	d111      	bne.n	8004ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e8c:	d004      	beq.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e96:	d107      	bne.n	8004ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ea6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eb0:	d10f      	bne.n	8004ed2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ed0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e017      	b.n	8004f16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4013      	ands	r3, r2
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d19b      	bne.n	8004e4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000084 	.word	0x20000084

08004f24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2201      	movs	r2, #1
 8004f38:	2102      	movs	r1, #2
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f7ff ff6a 	bl	8004e14 <SPI_WaitFlagStateUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e032      	b.n	8004fbc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f56:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc4 <SPI_EndRxTxTransaction+0xa0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc8 <SPI_EndRxTxTransaction+0xa4>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f60:	0d5b      	lsrs	r3, r3, #21
 8004f62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f66:	fb02 f303 	mul.w	r3, r2, r3
 8004f6a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f74:	d112      	bne.n	8004f9c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2180      	movs	r1, #128	@ 0x80
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff ff47 	bl	8004e14 <SPI_WaitFlagStateUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d016      	beq.n	8004fba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f90:	f043 0220 	orr.w	r2, r3, #32
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e00f      	b.n	8004fbc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb2:	2b80      	cmp	r3, #128	@ 0x80
 8004fb4:	d0f2      	beq.n	8004f9c <SPI_EndRxTxTransaction+0x78>
 8004fb6:	e000      	b.n	8004fba <SPI_EndRxTxTransaction+0x96>
        break;
 8004fb8:	bf00      	nop
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000084 	.word	0x20000084
 8004fc8:	165e9f81 	.word	0x165e9f81

08004fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e041      	b.n	8005062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fd fe1e 	bl	8002c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3304      	adds	r3, #4
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f000 f8be 	bl	800518c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	d001      	beq.n	8005084 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e046      	b.n	8005112 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a23      	ldr	r2, [pc, #140]	@ (8005120 <HAL_TIM_Base_Start+0xb4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d022      	beq.n	80050dc <HAL_TIM_Base_Start+0x70>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800509e:	d01d      	beq.n	80050dc <HAL_TIM_Base_Start+0x70>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005124 <HAL_TIM_Base_Start+0xb8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d018      	beq.n	80050dc <HAL_TIM_Base_Start+0x70>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005128 <HAL_TIM_Base_Start+0xbc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <HAL_TIM_Base_Start+0x70>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1c      	ldr	r2, [pc, #112]	@ (800512c <HAL_TIM_Base_Start+0xc0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00e      	beq.n	80050dc <HAL_TIM_Base_Start+0x70>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <HAL_TIM_Base_Start+0xc4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d009      	beq.n	80050dc <HAL_TIM_Base_Start+0x70>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a19      	ldr	r2, [pc, #100]	@ (8005134 <HAL_TIM_Base_Start+0xc8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d004      	beq.n	80050dc <HAL_TIM_Base_Start+0x70>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a18      	ldr	r2, [pc, #96]	@ (8005138 <HAL_TIM_Base_Start+0xcc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d111      	bne.n	8005100 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b06      	cmp	r3, #6
 80050ec:	d010      	beq.n	8005110 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0201 	orr.w	r2, r2, #1
 80050fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fe:	e007      	b.n	8005110 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40010000 	.word	0x40010000
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40010400 	.word	0x40010400
 8005134:	40014000 	.word	0x40014000
 8005138:	40001800 	.word	0x40001800

0800513c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6a1a      	ldr	r2, [r3, #32]
 800514a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800514e:	4013      	ands	r3, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10f      	bne.n	8005174 <HAL_TIM_Base_Stop+0x38>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	f240 4344 	movw	r3, #1092	@ 0x444
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d107      	bne.n	8005174 <HAL_TIM_Base_Stop+0x38>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0201 	bic.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a46      	ldr	r2, [pc, #280]	@ (80052b8 <TIM_Base_SetConfig+0x12c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d013      	beq.n	80051cc <TIM_Base_SetConfig+0x40>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051aa:	d00f      	beq.n	80051cc <TIM_Base_SetConfig+0x40>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a43      	ldr	r2, [pc, #268]	@ (80052bc <TIM_Base_SetConfig+0x130>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00b      	beq.n	80051cc <TIM_Base_SetConfig+0x40>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a42      	ldr	r2, [pc, #264]	@ (80052c0 <TIM_Base_SetConfig+0x134>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d007      	beq.n	80051cc <TIM_Base_SetConfig+0x40>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a41      	ldr	r2, [pc, #260]	@ (80052c4 <TIM_Base_SetConfig+0x138>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a40      	ldr	r2, [pc, #256]	@ (80052c8 <TIM_Base_SetConfig+0x13c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d108      	bne.n	80051de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a35      	ldr	r2, [pc, #212]	@ (80052b8 <TIM_Base_SetConfig+0x12c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d02b      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ec:	d027      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a32      	ldr	r2, [pc, #200]	@ (80052bc <TIM_Base_SetConfig+0x130>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d023      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a31      	ldr	r2, [pc, #196]	@ (80052c0 <TIM_Base_SetConfig+0x134>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01f      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a30      	ldr	r2, [pc, #192]	@ (80052c4 <TIM_Base_SetConfig+0x138>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d01b      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2f      	ldr	r2, [pc, #188]	@ (80052c8 <TIM_Base_SetConfig+0x13c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d017      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2e      	ldr	r2, [pc, #184]	@ (80052cc <TIM_Base_SetConfig+0x140>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d013      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2d      	ldr	r2, [pc, #180]	@ (80052d0 <TIM_Base_SetConfig+0x144>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00f      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2c      	ldr	r2, [pc, #176]	@ (80052d4 <TIM_Base_SetConfig+0x148>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00b      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2b      	ldr	r2, [pc, #172]	@ (80052d8 <TIM_Base_SetConfig+0x14c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d007      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2a      	ldr	r2, [pc, #168]	@ (80052dc <TIM_Base_SetConfig+0x150>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d003      	beq.n	800523e <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a29      	ldr	r2, [pc, #164]	@ (80052e0 <TIM_Base_SetConfig+0x154>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d108      	bne.n	8005250 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a10      	ldr	r2, [pc, #64]	@ (80052b8 <TIM_Base_SetConfig+0x12c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d003      	beq.n	8005284 <TIM_Base_SetConfig+0xf8>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a12      	ldr	r2, [pc, #72]	@ (80052c8 <TIM_Base_SetConfig+0x13c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d103      	bne.n	800528c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b01      	cmp	r3, #1
 800529c:	d105      	bne.n	80052aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f023 0201 	bic.w	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	611a      	str	r2, [r3, #16]
  }
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40010000 	.word	0x40010000
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	40010400 	.word	0x40010400
 80052cc:	40014000 	.word	0x40014000
 80052d0:	40014400 	.word	0x40014400
 80052d4:	40014800 	.word	0x40014800
 80052d8:	40001800 	.word	0x40001800
 80052dc:	40001c00 	.word	0x40001c00
 80052e0:	40002000 	.word	0x40002000

080052e4 <findslot>:
 80052e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <findslot+0x2c>)
 80052e6:	b510      	push	{r4, lr}
 80052e8:	4604      	mov	r4, r0
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	b118      	cbz	r0, 80052f6 <findslot+0x12>
 80052ee:	6a03      	ldr	r3, [r0, #32]
 80052f0:	b90b      	cbnz	r3, 80052f6 <findslot+0x12>
 80052f2:	f000 faed 	bl	80058d0 <__sinit>
 80052f6:	2c13      	cmp	r4, #19
 80052f8:	d807      	bhi.n	800530a <findslot+0x26>
 80052fa:	4806      	ldr	r0, [pc, #24]	@ (8005314 <findslot+0x30>)
 80052fc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005300:	3201      	adds	r2, #1
 8005302:	d002      	beq.n	800530a <findslot+0x26>
 8005304:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005308:	bd10      	pop	{r4, pc}
 800530a:	2000      	movs	r0, #0
 800530c:	e7fc      	b.n	8005308 <findslot+0x24>
 800530e:	bf00      	nop
 8005310:	200000a4 	.word	0x200000a4
 8005314:	20025e98 	.word	0x20025e98

08005318 <error>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	4604      	mov	r4, r0
 800531c:	f000 fba0 	bl	8005a60 <__errno>
 8005320:	2613      	movs	r6, #19
 8005322:	4605      	mov	r5, r0
 8005324:	2700      	movs	r7, #0
 8005326:	4630      	mov	r0, r6
 8005328:	4639      	mov	r1, r7
 800532a:	beab      	bkpt	0x00ab
 800532c:	4606      	mov	r6, r0
 800532e:	602e      	str	r6, [r5, #0]
 8005330:	4620      	mov	r0, r4
 8005332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005334 <checkerror>:
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d101      	bne.n	800533c <checkerror+0x8>
 8005338:	f7ff bfee 	b.w	8005318 <error>
 800533c:	4770      	bx	lr

0800533e <_swiread>:
 800533e:	b530      	push	{r4, r5, lr}
 8005340:	b085      	sub	sp, #20
 8005342:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005346:	9203      	str	r2, [sp, #12]
 8005348:	2406      	movs	r4, #6
 800534a:	ad01      	add	r5, sp, #4
 800534c:	4620      	mov	r0, r4
 800534e:	4629      	mov	r1, r5
 8005350:	beab      	bkpt	0x00ab
 8005352:	4604      	mov	r4, r0
 8005354:	4620      	mov	r0, r4
 8005356:	f7ff ffed 	bl	8005334 <checkerror>
 800535a:	b005      	add	sp, #20
 800535c:	bd30      	pop	{r4, r5, pc}

0800535e <_read>:
 800535e:	b570      	push	{r4, r5, r6, lr}
 8005360:	460e      	mov	r6, r1
 8005362:	4614      	mov	r4, r2
 8005364:	f7ff ffbe 	bl	80052e4 <findslot>
 8005368:	4605      	mov	r5, r0
 800536a:	b930      	cbnz	r0, 800537a <_read+0x1c>
 800536c:	f000 fb78 	bl	8005a60 <__errno>
 8005370:	2309      	movs	r3, #9
 8005372:	6003      	str	r3, [r0, #0]
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	bd70      	pop	{r4, r5, r6, pc}
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	4622      	mov	r2, r4
 800537e:	4631      	mov	r1, r6
 8005380:	f7ff ffdd 	bl	800533e <_swiread>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d0f5      	beq.n	8005374 <_read+0x16>
 8005388:	686b      	ldr	r3, [r5, #4]
 800538a:	1a20      	subs	r0, r4, r0
 800538c:	4403      	add	r3, r0
 800538e:	606b      	str	r3, [r5, #4]
 8005390:	e7f2      	b.n	8005378 <_read+0x1a>

08005392 <_swilseek>:
 8005392:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005394:	460c      	mov	r4, r1
 8005396:	4616      	mov	r6, r2
 8005398:	f7ff ffa4 	bl	80052e4 <findslot>
 800539c:	4605      	mov	r5, r0
 800539e:	b940      	cbnz	r0, 80053b2 <_swilseek+0x20>
 80053a0:	f000 fb5e 	bl	8005a60 <__errno>
 80053a4:	2309      	movs	r3, #9
 80053a6:	6003      	str	r3, [r0, #0]
 80053a8:	f04f 34ff 	mov.w	r4, #4294967295
 80053ac:	4620      	mov	r0, r4
 80053ae:	b003      	add	sp, #12
 80053b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053b2:	2e02      	cmp	r6, #2
 80053b4:	d903      	bls.n	80053be <_swilseek+0x2c>
 80053b6:	f000 fb53 	bl	8005a60 <__errno>
 80053ba:	2316      	movs	r3, #22
 80053bc:	e7f3      	b.n	80053a6 <_swilseek+0x14>
 80053be:	2e01      	cmp	r6, #1
 80053c0:	d112      	bne.n	80053e8 <_swilseek+0x56>
 80053c2:	6843      	ldr	r3, [r0, #4]
 80053c4:	18e4      	adds	r4, r4, r3
 80053c6:	d4f6      	bmi.n	80053b6 <_swilseek+0x24>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	260a      	movs	r6, #10
 80053cc:	e9cd 3400 	strd	r3, r4, [sp]
 80053d0:	466f      	mov	r7, sp
 80053d2:	4630      	mov	r0, r6
 80053d4:	4639      	mov	r1, r7
 80053d6:	beab      	bkpt	0x00ab
 80053d8:	4606      	mov	r6, r0
 80053da:	4630      	mov	r0, r6
 80053dc:	f7ff ffaa 	bl	8005334 <checkerror>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	dbe1      	blt.n	80053a8 <_swilseek+0x16>
 80053e4:	606c      	str	r4, [r5, #4]
 80053e6:	e7e1      	b.n	80053ac <_swilseek+0x1a>
 80053e8:	2e02      	cmp	r6, #2
 80053ea:	6803      	ldr	r3, [r0, #0]
 80053ec:	d1ec      	bne.n	80053c8 <_swilseek+0x36>
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	260c      	movs	r6, #12
 80053f2:	466f      	mov	r7, sp
 80053f4:	4630      	mov	r0, r6
 80053f6:	4639      	mov	r1, r7
 80053f8:	beab      	bkpt	0x00ab
 80053fa:	4606      	mov	r6, r0
 80053fc:	4630      	mov	r0, r6
 80053fe:	f7ff ff99 	bl	8005334 <checkerror>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	d0d0      	beq.n	80053a8 <_swilseek+0x16>
 8005406:	4404      	add	r4, r0
 8005408:	e7de      	b.n	80053c8 <_swilseek+0x36>

0800540a <_lseek>:
 800540a:	f7ff bfc2 	b.w	8005392 <_swilseek>

0800540e <_swiwrite>:
 800540e:	b530      	push	{r4, r5, lr}
 8005410:	b085      	sub	sp, #20
 8005412:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005416:	9203      	str	r2, [sp, #12]
 8005418:	2405      	movs	r4, #5
 800541a:	ad01      	add	r5, sp, #4
 800541c:	4620      	mov	r0, r4
 800541e:	4629      	mov	r1, r5
 8005420:	beab      	bkpt	0x00ab
 8005422:	4604      	mov	r4, r0
 8005424:	4620      	mov	r0, r4
 8005426:	f7ff ff85 	bl	8005334 <checkerror>
 800542a:	b005      	add	sp, #20
 800542c:	bd30      	pop	{r4, r5, pc}

0800542e <_write>:
 800542e:	b570      	push	{r4, r5, r6, lr}
 8005430:	460e      	mov	r6, r1
 8005432:	4615      	mov	r5, r2
 8005434:	f7ff ff56 	bl	80052e4 <findslot>
 8005438:	4604      	mov	r4, r0
 800543a:	b930      	cbnz	r0, 800544a <_write+0x1c>
 800543c:	f000 fb10 	bl	8005a60 <__errno>
 8005440:	2309      	movs	r3, #9
 8005442:	6003      	str	r3, [r0, #0]
 8005444:	f04f 30ff 	mov.w	r0, #4294967295
 8005448:	bd70      	pop	{r4, r5, r6, pc}
 800544a:	6800      	ldr	r0, [r0, #0]
 800544c:	462a      	mov	r2, r5
 800544e:	4631      	mov	r1, r6
 8005450:	f7ff ffdd 	bl	800540e <_swiwrite>
 8005454:	1e03      	subs	r3, r0, #0
 8005456:	dbf5      	blt.n	8005444 <_write+0x16>
 8005458:	6862      	ldr	r2, [r4, #4]
 800545a:	1ae8      	subs	r0, r5, r3
 800545c:	4402      	add	r2, r0
 800545e:	42ab      	cmp	r3, r5
 8005460:	6062      	str	r2, [r4, #4]
 8005462:	d1f1      	bne.n	8005448 <_write+0x1a>
 8005464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005468:	2000      	movs	r0, #0
 800546a:	f7ff bf55 	b.w	8005318 <error>

0800546e <_swiclose>:
 800546e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005470:	2402      	movs	r4, #2
 8005472:	9001      	str	r0, [sp, #4]
 8005474:	ad01      	add	r5, sp, #4
 8005476:	4620      	mov	r0, r4
 8005478:	4629      	mov	r1, r5
 800547a:	beab      	bkpt	0x00ab
 800547c:	4604      	mov	r4, r0
 800547e:	4620      	mov	r0, r4
 8005480:	f7ff ff58 	bl	8005334 <checkerror>
 8005484:	b003      	add	sp, #12
 8005486:	bd30      	pop	{r4, r5, pc}

08005488 <_close>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4605      	mov	r5, r0
 800548c:	f7ff ff2a 	bl	80052e4 <findslot>
 8005490:	4604      	mov	r4, r0
 8005492:	b930      	cbnz	r0, 80054a2 <_close+0x1a>
 8005494:	f000 fae4 	bl	8005a60 <__errno>
 8005498:	2309      	movs	r3, #9
 800549a:	6003      	str	r3, [r0, #0]
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	bd38      	pop	{r3, r4, r5, pc}
 80054a2:	3d01      	subs	r5, #1
 80054a4:	2d01      	cmp	r5, #1
 80054a6:	d809      	bhi.n	80054bc <_close+0x34>
 80054a8:	4b07      	ldr	r3, [pc, #28]	@ (80054c8 <_close+0x40>)
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d104      	bne.n	80054bc <_close+0x34>
 80054b2:	f04f 33ff 	mov.w	r3, #4294967295
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	2000      	movs	r0, #0
 80054ba:	e7f1      	b.n	80054a0 <_close+0x18>
 80054bc:	6820      	ldr	r0, [r4, #0]
 80054be:	f7ff ffd6 	bl	800546e <_swiclose>
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d0f5      	beq.n	80054b2 <_close+0x2a>
 80054c6:	e7eb      	b.n	80054a0 <_close+0x18>
 80054c8:	20025e98 	.word	0x20025e98

080054cc <_swistat>:
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	460c      	mov	r4, r1
 80054d0:	f7ff ff08 	bl	80052e4 <findslot>
 80054d4:	4605      	mov	r5, r0
 80054d6:	b930      	cbnz	r0, 80054e6 <_swistat+0x1a>
 80054d8:	f000 fac2 	bl	8005a60 <__errno>
 80054dc:	2309      	movs	r3, #9
 80054de:	6003      	str	r3, [r0, #0]
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	bd70      	pop	{r4, r5, r6, pc}
 80054e6:	6863      	ldr	r3, [r4, #4]
 80054e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80054ec:	6063      	str	r3, [r4, #4]
 80054ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054f2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80054f4:	260c      	movs	r6, #12
 80054f6:	4630      	mov	r0, r6
 80054f8:	4629      	mov	r1, r5
 80054fa:	beab      	bkpt	0x00ab
 80054fc:	4605      	mov	r5, r0
 80054fe:	4628      	mov	r0, r5
 8005500:	f7ff ff18 	bl	8005334 <checkerror>
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	d0eb      	beq.n	80054e0 <_swistat+0x14>
 8005508:	6120      	str	r0, [r4, #16]
 800550a:	2000      	movs	r0, #0
 800550c:	e7ea      	b.n	80054e4 <_swistat+0x18>

0800550e <_stat>:
 800550e:	b538      	push	{r3, r4, r5, lr}
 8005510:	460d      	mov	r5, r1
 8005512:	4604      	mov	r4, r0
 8005514:	2258      	movs	r2, #88	@ 0x58
 8005516:	2100      	movs	r1, #0
 8005518:	4628      	mov	r0, r5
 800551a:	f000 fa52 	bl	80059c2 <memset>
 800551e:	4620      	mov	r0, r4
 8005520:	2100      	movs	r1, #0
 8005522:	f000 f811 	bl	8005548 <_swiopen>
 8005526:	1c43      	adds	r3, r0, #1
 8005528:	4604      	mov	r4, r0
 800552a:	d00b      	beq.n	8005544 <_stat+0x36>
 800552c:	686b      	ldr	r3, [r5, #4]
 800552e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005532:	606b      	str	r3, [r5, #4]
 8005534:	4629      	mov	r1, r5
 8005536:	f7ff ffc9 	bl	80054cc <_swistat>
 800553a:	4605      	mov	r5, r0
 800553c:	4620      	mov	r0, r4
 800553e:	f7ff ffa3 	bl	8005488 <_close>
 8005542:	462c      	mov	r4, r5
 8005544:	4620      	mov	r0, r4
 8005546:	bd38      	pop	{r3, r4, r5, pc}

08005548 <_swiopen>:
 8005548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800554c:	4f29      	ldr	r7, [pc, #164]	@ (80055f4 <_swiopen+0xac>)
 800554e:	b096      	sub	sp, #88	@ 0x58
 8005550:	4682      	mov	sl, r0
 8005552:	460e      	mov	r6, r1
 8005554:	2400      	movs	r4, #0
 8005556:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800555a:	3301      	adds	r3, #1
 800555c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8005560:	d00c      	beq.n	800557c <_swiopen+0x34>
 8005562:	3401      	adds	r4, #1
 8005564:	2c14      	cmp	r4, #20
 8005566:	d1f6      	bne.n	8005556 <_swiopen+0xe>
 8005568:	f000 fa7a 	bl	8005a60 <__errno>
 800556c:	2318      	movs	r3, #24
 800556e:	6003      	str	r3, [r0, #0]
 8005570:	f04f 34ff 	mov.w	r4, #4294967295
 8005574:	4620      	mov	r0, r4
 8005576:	b016      	add	sp, #88	@ 0x58
 8005578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8005580:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005584:	46e9      	mov	r9, sp
 8005586:	d109      	bne.n	800559c <_swiopen+0x54>
 8005588:	4649      	mov	r1, r9
 800558a:	4650      	mov	r0, sl
 800558c:	f7ff ffbf 	bl	800550e <_stat>
 8005590:	3001      	adds	r0, #1
 8005592:	d003      	beq.n	800559c <_swiopen+0x54>
 8005594:	f000 fa64 	bl	8005a60 <__errno>
 8005598:	2311      	movs	r3, #17
 800559a:	e7e8      	b.n	800556e <_swiopen+0x26>
 800559c:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80055a0:	f240 6301 	movw	r3, #1537	@ 0x601
 80055a4:	07b2      	lsls	r2, r6, #30
 80055a6:	bf48      	it	mi
 80055a8:	f045 0502 	orrmi.w	r5, r5, #2
 80055ac:	421e      	tst	r6, r3
 80055ae:	bf18      	it	ne
 80055b0:	f045 0504 	orrne.w	r5, r5, #4
 80055b4:	0733      	lsls	r3, r6, #28
 80055b6:	bf48      	it	mi
 80055b8:	f025 0504 	bicmi.w	r5, r5, #4
 80055bc:	4650      	mov	r0, sl
 80055be:	bf48      	it	mi
 80055c0:	f045 0508 	orrmi.w	r5, r5, #8
 80055c4:	f8cd a000 	str.w	sl, [sp]
 80055c8:	f7fa fe10 	bl	80001ec <strlen>
 80055cc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80055d0:	2501      	movs	r5, #1
 80055d2:	4628      	mov	r0, r5
 80055d4:	4649      	mov	r1, r9
 80055d6:	beab      	bkpt	0x00ab
 80055d8:	4605      	mov	r5, r0
 80055da:	2d00      	cmp	r5, #0
 80055dc:	db05      	blt.n	80055ea <_swiopen+0xa2>
 80055de:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80055e2:	4447      	add	r7, r8
 80055e4:	2300      	movs	r3, #0
 80055e6:	607b      	str	r3, [r7, #4]
 80055e8:	e7c4      	b.n	8005574 <_swiopen+0x2c>
 80055ea:	4628      	mov	r0, r5
 80055ec:	f7ff fe94 	bl	8005318 <error>
 80055f0:	4604      	mov	r4, r0
 80055f2:	e7bf      	b.n	8005574 <_swiopen+0x2c>
 80055f4:	20025e98 	.word	0x20025e98

080055f8 <_get_semihosting_exts>:
 80055f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055fc:	4606      	mov	r6, r0
 80055fe:	460f      	mov	r7, r1
 8005600:	4829      	ldr	r0, [pc, #164]	@ (80056a8 <_get_semihosting_exts+0xb0>)
 8005602:	2100      	movs	r1, #0
 8005604:	4615      	mov	r5, r2
 8005606:	f7ff ff9f 	bl	8005548 <_swiopen>
 800560a:	462a      	mov	r2, r5
 800560c:	4604      	mov	r4, r0
 800560e:	2100      	movs	r1, #0
 8005610:	4630      	mov	r0, r6
 8005612:	f000 f9d6 	bl	80059c2 <memset>
 8005616:	1c63      	adds	r3, r4, #1
 8005618:	d014      	beq.n	8005644 <_get_semihosting_exts+0x4c>
 800561a:	4620      	mov	r0, r4
 800561c:	f7ff fe62 	bl	80052e4 <findslot>
 8005620:	f04f 080c 	mov.w	r8, #12
 8005624:	4681      	mov	r9, r0
 8005626:	4640      	mov	r0, r8
 8005628:	4649      	mov	r1, r9
 800562a:	beab      	bkpt	0x00ab
 800562c:	4680      	mov	r8, r0
 800562e:	4640      	mov	r0, r8
 8005630:	f7ff fe80 	bl	8005334 <checkerror>
 8005634:	2803      	cmp	r0, #3
 8005636:	dd02      	ble.n	800563e <_get_semihosting_exts+0x46>
 8005638:	1ec3      	subs	r3, r0, #3
 800563a:	42ab      	cmp	r3, r5
 800563c:	dc07      	bgt.n	800564e <_get_semihosting_exts+0x56>
 800563e:	4620      	mov	r0, r4
 8005640:	f7ff ff22 	bl	8005488 <_close>
 8005644:	f04f 30ff 	mov.w	r0, #4294967295
 8005648:	b003      	add	sp, #12
 800564a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800564e:	2204      	movs	r2, #4
 8005650:	eb0d 0102 	add.w	r1, sp, r2
 8005654:	4620      	mov	r0, r4
 8005656:	f7ff fe82 	bl	800535e <_read>
 800565a:	2803      	cmp	r0, #3
 800565c:	ddef      	ble.n	800563e <_get_semihosting_exts+0x46>
 800565e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005662:	2b53      	cmp	r3, #83	@ 0x53
 8005664:	d1eb      	bne.n	800563e <_get_semihosting_exts+0x46>
 8005666:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800566a:	2b48      	cmp	r3, #72	@ 0x48
 800566c:	d1e7      	bne.n	800563e <_get_semihosting_exts+0x46>
 800566e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005672:	2b46      	cmp	r3, #70	@ 0x46
 8005674:	d1e3      	bne.n	800563e <_get_semihosting_exts+0x46>
 8005676:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800567a:	2b42      	cmp	r3, #66	@ 0x42
 800567c:	d1df      	bne.n	800563e <_get_semihosting_exts+0x46>
 800567e:	2201      	movs	r2, #1
 8005680:	4639      	mov	r1, r7
 8005682:	4620      	mov	r0, r4
 8005684:	f7ff fe85 	bl	8005392 <_swilseek>
 8005688:	2800      	cmp	r0, #0
 800568a:	dbd8      	blt.n	800563e <_get_semihosting_exts+0x46>
 800568c:	462a      	mov	r2, r5
 800568e:	4631      	mov	r1, r6
 8005690:	4620      	mov	r0, r4
 8005692:	f7ff fe64 	bl	800535e <_read>
 8005696:	4605      	mov	r5, r0
 8005698:	4620      	mov	r0, r4
 800569a:	f7ff fef5 	bl	8005488 <_close>
 800569e:	4628      	mov	r0, r5
 80056a0:	f7ff fe48 	bl	8005334 <checkerror>
 80056a4:	e7d0      	b.n	8005648 <_get_semihosting_exts+0x50>
 80056a6:	bf00      	nop
 80056a8:	08006ec0 	.word	0x08006ec0

080056ac <initialise_semihosting_exts>:
 80056ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056ae:	4d0a      	ldr	r5, [pc, #40]	@ (80056d8 <initialise_semihosting_exts+0x2c>)
 80056b0:	4c0a      	ldr	r4, [pc, #40]	@ (80056dc <initialise_semihosting_exts+0x30>)
 80056b2:	2100      	movs	r1, #0
 80056b4:	2201      	movs	r2, #1
 80056b6:	a801      	add	r0, sp, #4
 80056b8:	6029      	str	r1, [r5, #0]
 80056ba:	6022      	str	r2, [r4, #0]
 80056bc:	f7ff ff9c 	bl	80055f8 <_get_semihosting_exts>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	dd07      	ble.n	80056d4 <initialise_semihosting_exts+0x28>
 80056c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056c8:	f003 0201 	and.w	r2, r3, #1
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	602a      	str	r2, [r5, #0]
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	b003      	add	sp, #12
 80056d6:	bd30      	pop	{r4, r5, pc}
 80056d8:	20000094 	.word	0x20000094
 80056dc:	20000090 	.word	0x20000090

080056e0 <_has_ext_stdout_stderr>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	4c04      	ldr	r4, [pc, #16]	@ (80056f4 <_has_ext_stdout_stderr+0x14>)
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da01      	bge.n	80056ee <_has_ext_stdout_stderr+0xe>
 80056ea:	f7ff ffdf 	bl	80056ac <initialise_semihosting_exts>
 80056ee:	6820      	ldr	r0, [r4, #0]
 80056f0:	bd10      	pop	{r4, pc}
 80056f2:	bf00      	nop
 80056f4:	20000090 	.word	0x20000090

080056f8 <initialise_monitor_handles>:
 80056f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fc:	b085      	sub	sp, #20
 80056fe:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80057b0 <initialise_monitor_handles+0xb8>
 8005702:	f8cd 9004 	str.w	r9, [sp, #4]
 8005706:	2303      	movs	r3, #3
 8005708:	2400      	movs	r4, #0
 800570a:	9303      	str	r3, [sp, #12]
 800570c:	af01      	add	r7, sp, #4
 800570e:	9402      	str	r4, [sp, #8]
 8005710:	2501      	movs	r5, #1
 8005712:	4628      	mov	r0, r5
 8005714:	4639      	mov	r1, r7
 8005716:	beab      	bkpt	0x00ab
 8005718:	4605      	mov	r5, r0
 800571a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80057b4 <initialise_monitor_handles+0xbc>
 800571e:	4623      	mov	r3, r4
 8005720:	4c20      	ldr	r4, [pc, #128]	@ (80057a4 <initialise_monitor_handles+0xac>)
 8005722:	f8c8 5000 	str.w	r5, [r8]
 8005726:	f04f 32ff 	mov.w	r2, #4294967295
 800572a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800572e:	3301      	adds	r3, #1
 8005730:	2b14      	cmp	r3, #20
 8005732:	d1fa      	bne.n	800572a <initialise_monitor_handles+0x32>
 8005734:	f7ff ffd4 	bl	80056e0 <_has_ext_stdout_stderr>
 8005738:	4d1b      	ldr	r5, [pc, #108]	@ (80057a8 <initialise_monitor_handles+0xb0>)
 800573a:	b1d0      	cbz	r0, 8005772 <initialise_monitor_handles+0x7a>
 800573c:	f04f 0a03 	mov.w	sl, #3
 8005740:	2304      	movs	r3, #4
 8005742:	f8cd 9004 	str.w	r9, [sp, #4]
 8005746:	2601      	movs	r6, #1
 8005748:	f8cd a00c 	str.w	sl, [sp, #12]
 800574c:	9302      	str	r3, [sp, #8]
 800574e:	4630      	mov	r0, r6
 8005750:	4639      	mov	r1, r7
 8005752:	beab      	bkpt	0x00ab
 8005754:	4683      	mov	fp, r0
 8005756:	4b15      	ldr	r3, [pc, #84]	@ (80057ac <initialise_monitor_handles+0xb4>)
 8005758:	f8cd 9004 	str.w	r9, [sp, #4]
 800575c:	f8c3 b000 	str.w	fp, [r3]
 8005760:	2308      	movs	r3, #8
 8005762:	f8cd a00c 	str.w	sl, [sp, #12]
 8005766:	9302      	str	r3, [sp, #8]
 8005768:	4630      	mov	r0, r6
 800576a:	4639      	mov	r1, r7
 800576c:	beab      	bkpt	0x00ab
 800576e:	4606      	mov	r6, r0
 8005770:	602e      	str	r6, [r5, #0]
 8005772:	682b      	ldr	r3, [r5, #0]
 8005774:	3301      	adds	r3, #1
 8005776:	bf02      	ittt	eq
 8005778:	4b0c      	ldreq	r3, [pc, #48]	@ (80057ac <initialise_monitor_handles+0xb4>)
 800577a:	681b      	ldreq	r3, [r3, #0]
 800577c:	602b      	streq	r3, [r5, #0]
 800577e:	2600      	movs	r6, #0
 8005780:	f8d8 3000 	ldr.w	r3, [r8]
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	6066      	str	r6, [r4, #4]
 8005788:	f7ff ffaa 	bl	80056e0 <_has_ext_stdout_stderr>
 800578c:	b130      	cbz	r0, 800579c <initialise_monitor_handles+0xa4>
 800578e:	4b07      	ldr	r3, [pc, #28]	@ (80057ac <initialise_monitor_handles+0xb4>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005796:	682b      	ldr	r3, [r5, #0]
 8005798:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800579c:	b005      	add	sp, #20
 800579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a2:	bf00      	nop
 80057a4:	20025e98 	.word	0x20025e98
 80057a8:	20025e8c 	.word	0x20025e8c
 80057ac:	20025e90 	.word	0x20025e90
 80057b0:	08006ed6 	.word	0x08006ed6
 80057b4:	20025e94 	.word	0x20025e94

080057b8 <std>:
 80057b8:	2300      	movs	r3, #0
 80057ba:	b510      	push	{r4, lr}
 80057bc:	4604      	mov	r4, r0
 80057be:	e9c0 3300 	strd	r3, r3, [r0]
 80057c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057c6:	6083      	str	r3, [r0, #8]
 80057c8:	8181      	strh	r1, [r0, #12]
 80057ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80057cc:	81c2      	strh	r2, [r0, #14]
 80057ce:	6183      	str	r3, [r0, #24]
 80057d0:	4619      	mov	r1, r3
 80057d2:	2208      	movs	r2, #8
 80057d4:	305c      	adds	r0, #92	@ 0x5c
 80057d6:	f000 f8f4 	bl	80059c2 <memset>
 80057da:	4b0d      	ldr	r3, [pc, #52]	@ (8005810 <std+0x58>)
 80057dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80057de:	4b0d      	ldr	r3, [pc, #52]	@ (8005814 <std+0x5c>)
 80057e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005818 <std+0x60>)
 80057e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057e6:	4b0d      	ldr	r3, [pc, #52]	@ (800581c <std+0x64>)
 80057e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80057ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005820 <std+0x68>)
 80057ec:	6224      	str	r4, [r4, #32]
 80057ee:	429c      	cmp	r4, r3
 80057f0:	d006      	beq.n	8005800 <std+0x48>
 80057f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057f6:	4294      	cmp	r4, r2
 80057f8:	d002      	beq.n	8005800 <std+0x48>
 80057fa:	33d0      	adds	r3, #208	@ 0xd0
 80057fc:	429c      	cmp	r4, r3
 80057fe:	d105      	bne.n	800580c <std+0x54>
 8005800:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005808:	f000 b954 	b.w	8005ab4 <__retarget_lock_init_recursive>
 800580c:	bd10      	pop	{r4, pc}
 800580e:	bf00      	nop
 8005810:	0800593d 	.word	0x0800593d
 8005814:	0800595f 	.word	0x0800595f
 8005818:	08005997 	.word	0x08005997
 800581c:	080059bb 	.word	0x080059bb
 8005820:	20025f38 	.word	0x20025f38

08005824 <stdio_exit_handler>:
 8005824:	4a02      	ldr	r2, [pc, #8]	@ (8005830 <stdio_exit_handler+0xc>)
 8005826:	4903      	ldr	r1, [pc, #12]	@ (8005834 <stdio_exit_handler+0x10>)
 8005828:	4803      	ldr	r0, [pc, #12]	@ (8005838 <stdio_exit_handler+0x14>)
 800582a:	f000 b869 	b.w	8005900 <_fwalk_sglue>
 800582e:	bf00      	nop
 8005830:	20000098 	.word	0x20000098
 8005834:	08005c71 	.word	0x08005c71
 8005838:	200000a8 	.word	0x200000a8

0800583c <cleanup_stdio>:
 800583c:	6841      	ldr	r1, [r0, #4]
 800583e:	4b0c      	ldr	r3, [pc, #48]	@ (8005870 <cleanup_stdio+0x34>)
 8005840:	4299      	cmp	r1, r3
 8005842:	b510      	push	{r4, lr}
 8005844:	4604      	mov	r4, r0
 8005846:	d001      	beq.n	800584c <cleanup_stdio+0x10>
 8005848:	f000 fa12 	bl	8005c70 <_fflush_r>
 800584c:	68a1      	ldr	r1, [r4, #8]
 800584e:	4b09      	ldr	r3, [pc, #36]	@ (8005874 <cleanup_stdio+0x38>)
 8005850:	4299      	cmp	r1, r3
 8005852:	d002      	beq.n	800585a <cleanup_stdio+0x1e>
 8005854:	4620      	mov	r0, r4
 8005856:	f000 fa0b 	bl	8005c70 <_fflush_r>
 800585a:	68e1      	ldr	r1, [r4, #12]
 800585c:	4b06      	ldr	r3, [pc, #24]	@ (8005878 <cleanup_stdio+0x3c>)
 800585e:	4299      	cmp	r1, r3
 8005860:	d004      	beq.n	800586c <cleanup_stdio+0x30>
 8005862:	4620      	mov	r0, r4
 8005864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005868:	f000 ba02 	b.w	8005c70 <_fflush_r>
 800586c:	bd10      	pop	{r4, pc}
 800586e:	bf00      	nop
 8005870:	20025f38 	.word	0x20025f38
 8005874:	20025fa0 	.word	0x20025fa0
 8005878:	20026008 	.word	0x20026008

0800587c <global_stdio_init.part.0>:
 800587c:	b510      	push	{r4, lr}
 800587e:	4b0b      	ldr	r3, [pc, #44]	@ (80058ac <global_stdio_init.part.0+0x30>)
 8005880:	4c0b      	ldr	r4, [pc, #44]	@ (80058b0 <global_stdio_init.part.0+0x34>)
 8005882:	4a0c      	ldr	r2, [pc, #48]	@ (80058b4 <global_stdio_init.part.0+0x38>)
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	4620      	mov	r0, r4
 8005888:	2200      	movs	r2, #0
 800588a:	2104      	movs	r1, #4
 800588c:	f7ff ff94 	bl	80057b8 <std>
 8005890:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005894:	2201      	movs	r2, #1
 8005896:	2109      	movs	r1, #9
 8005898:	f7ff ff8e 	bl	80057b8 <std>
 800589c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058a0:	2202      	movs	r2, #2
 80058a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a6:	2112      	movs	r1, #18
 80058a8:	f7ff bf86 	b.w	80057b8 <std>
 80058ac:	20026070 	.word	0x20026070
 80058b0:	20025f38 	.word	0x20025f38
 80058b4:	08005825 	.word	0x08005825

080058b8 <__sfp_lock_acquire>:
 80058b8:	4801      	ldr	r0, [pc, #4]	@ (80058c0 <__sfp_lock_acquire+0x8>)
 80058ba:	f000 b8fc 	b.w	8005ab6 <__retarget_lock_acquire_recursive>
 80058be:	bf00      	nop
 80058c0:	20026079 	.word	0x20026079

080058c4 <__sfp_lock_release>:
 80058c4:	4801      	ldr	r0, [pc, #4]	@ (80058cc <__sfp_lock_release+0x8>)
 80058c6:	f000 b8f7 	b.w	8005ab8 <__retarget_lock_release_recursive>
 80058ca:	bf00      	nop
 80058cc:	20026079 	.word	0x20026079

080058d0 <__sinit>:
 80058d0:	b510      	push	{r4, lr}
 80058d2:	4604      	mov	r4, r0
 80058d4:	f7ff fff0 	bl	80058b8 <__sfp_lock_acquire>
 80058d8:	6a23      	ldr	r3, [r4, #32]
 80058da:	b11b      	cbz	r3, 80058e4 <__sinit+0x14>
 80058dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e0:	f7ff bff0 	b.w	80058c4 <__sfp_lock_release>
 80058e4:	4b04      	ldr	r3, [pc, #16]	@ (80058f8 <__sinit+0x28>)
 80058e6:	6223      	str	r3, [r4, #32]
 80058e8:	4b04      	ldr	r3, [pc, #16]	@ (80058fc <__sinit+0x2c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1f5      	bne.n	80058dc <__sinit+0xc>
 80058f0:	f7ff ffc4 	bl	800587c <global_stdio_init.part.0>
 80058f4:	e7f2      	b.n	80058dc <__sinit+0xc>
 80058f6:	bf00      	nop
 80058f8:	0800583d 	.word	0x0800583d
 80058fc:	20026070 	.word	0x20026070

08005900 <_fwalk_sglue>:
 8005900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005904:	4607      	mov	r7, r0
 8005906:	4688      	mov	r8, r1
 8005908:	4614      	mov	r4, r2
 800590a:	2600      	movs	r6, #0
 800590c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005910:	f1b9 0901 	subs.w	r9, r9, #1
 8005914:	d505      	bpl.n	8005922 <_fwalk_sglue+0x22>
 8005916:	6824      	ldr	r4, [r4, #0]
 8005918:	2c00      	cmp	r4, #0
 800591a:	d1f7      	bne.n	800590c <_fwalk_sglue+0xc>
 800591c:	4630      	mov	r0, r6
 800591e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005922:	89ab      	ldrh	r3, [r5, #12]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d907      	bls.n	8005938 <_fwalk_sglue+0x38>
 8005928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800592c:	3301      	adds	r3, #1
 800592e:	d003      	beq.n	8005938 <_fwalk_sglue+0x38>
 8005930:	4629      	mov	r1, r5
 8005932:	4638      	mov	r0, r7
 8005934:	47c0      	blx	r8
 8005936:	4306      	orrs	r6, r0
 8005938:	3568      	adds	r5, #104	@ 0x68
 800593a:	e7e9      	b.n	8005910 <_fwalk_sglue+0x10>

0800593c <__sread>:
 800593c:	b510      	push	{r4, lr}
 800593e:	460c      	mov	r4, r1
 8005940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005944:	f000 f868 	bl	8005a18 <_read_r>
 8005948:	2800      	cmp	r0, #0
 800594a:	bfab      	itete	ge
 800594c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800594e:	89a3      	ldrhlt	r3, [r4, #12]
 8005950:	181b      	addge	r3, r3, r0
 8005952:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005956:	bfac      	ite	ge
 8005958:	6563      	strge	r3, [r4, #84]	@ 0x54
 800595a:	81a3      	strhlt	r3, [r4, #12]
 800595c:	bd10      	pop	{r4, pc}

0800595e <__swrite>:
 800595e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005962:	461f      	mov	r7, r3
 8005964:	898b      	ldrh	r3, [r1, #12]
 8005966:	05db      	lsls	r3, r3, #23
 8005968:	4605      	mov	r5, r0
 800596a:	460c      	mov	r4, r1
 800596c:	4616      	mov	r6, r2
 800596e:	d505      	bpl.n	800597c <__swrite+0x1e>
 8005970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005974:	2302      	movs	r3, #2
 8005976:	2200      	movs	r2, #0
 8005978:	f000 f83c 	bl	80059f4 <_lseek_r>
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005982:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005986:	81a3      	strh	r3, [r4, #12]
 8005988:	4632      	mov	r2, r6
 800598a:	463b      	mov	r3, r7
 800598c:	4628      	mov	r0, r5
 800598e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005992:	f000 b853 	b.w	8005a3c <_write_r>

08005996 <__sseek>:
 8005996:	b510      	push	{r4, lr}
 8005998:	460c      	mov	r4, r1
 800599a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800599e:	f000 f829 	bl	80059f4 <_lseek_r>
 80059a2:	1c43      	adds	r3, r0, #1
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	bf15      	itete	ne
 80059a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059b2:	81a3      	strheq	r3, [r4, #12]
 80059b4:	bf18      	it	ne
 80059b6:	81a3      	strhne	r3, [r4, #12]
 80059b8:	bd10      	pop	{r4, pc}

080059ba <__sclose>:
 80059ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059be:	f000 b809 	b.w	80059d4 <_close_r>

080059c2 <memset>:
 80059c2:	4402      	add	r2, r0
 80059c4:	4603      	mov	r3, r0
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d100      	bne.n	80059cc <memset+0xa>
 80059ca:	4770      	bx	lr
 80059cc:	f803 1b01 	strb.w	r1, [r3], #1
 80059d0:	e7f9      	b.n	80059c6 <memset+0x4>
	...

080059d4 <_close_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	4d06      	ldr	r5, [pc, #24]	@ (80059f0 <_close_r+0x1c>)
 80059d8:	2300      	movs	r3, #0
 80059da:	4604      	mov	r4, r0
 80059dc:	4608      	mov	r0, r1
 80059de:	602b      	str	r3, [r5, #0]
 80059e0:	f7ff fd52 	bl	8005488 <_close>
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	d102      	bne.n	80059ee <_close_r+0x1a>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	b103      	cbz	r3, 80059ee <_close_r+0x1a>
 80059ec:	6023      	str	r3, [r4, #0]
 80059ee:	bd38      	pop	{r3, r4, r5, pc}
 80059f0:	20026074 	.word	0x20026074

080059f4 <_lseek_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4d07      	ldr	r5, [pc, #28]	@ (8005a14 <_lseek_r+0x20>)
 80059f8:	4604      	mov	r4, r0
 80059fa:	4608      	mov	r0, r1
 80059fc:	4611      	mov	r1, r2
 80059fe:	2200      	movs	r2, #0
 8005a00:	602a      	str	r2, [r5, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f7ff fd01 	bl	800540a <_lseek>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d102      	bne.n	8005a12 <_lseek_r+0x1e>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	b103      	cbz	r3, 8005a12 <_lseek_r+0x1e>
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	bd38      	pop	{r3, r4, r5, pc}
 8005a14:	20026074 	.word	0x20026074

08005a18 <_read_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d07      	ldr	r5, [pc, #28]	@ (8005a38 <_read_r+0x20>)
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	4608      	mov	r0, r1
 8005a20:	4611      	mov	r1, r2
 8005a22:	2200      	movs	r2, #0
 8005a24:	602a      	str	r2, [r5, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f7ff fc99 	bl	800535e <_read>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_read_r+0x1e>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_read_r+0x1e>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	20026074 	.word	0x20026074

08005a3c <_write_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d07      	ldr	r5, [pc, #28]	@ (8005a5c <_write_r+0x20>)
 8005a40:	4604      	mov	r4, r0
 8005a42:	4608      	mov	r0, r1
 8005a44:	4611      	mov	r1, r2
 8005a46:	2200      	movs	r2, #0
 8005a48:	602a      	str	r2, [r5, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f7ff fcef 	bl	800542e <_write>
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	d102      	bne.n	8005a5a <_write_r+0x1e>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	b103      	cbz	r3, 8005a5a <_write_r+0x1e>
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	20026074 	.word	0x20026074

08005a60 <__errno>:
 8005a60:	4b01      	ldr	r3, [pc, #4]	@ (8005a68 <__errno+0x8>)
 8005a62:	6818      	ldr	r0, [r3, #0]
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	200000a4 	.word	0x200000a4

08005a6c <__libc_init_array>:
 8005a6c:	b570      	push	{r4, r5, r6, lr}
 8005a6e:	4d0d      	ldr	r5, [pc, #52]	@ (8005aa4 <__libc_init_array+0x38>)
 8005a70:	4c0d      	ldr	r4, [pc, #52]	@ (8005aa8 <__libc_init_array+0x3c>)
 8005a72:	1b64      	subs	r4, r4, r5
 8005a74:	10a4      	asrs	r4, r4, #2
 8005a76:	2600      	movs	r6, #0
 8005a78:	42a6      	cmp	r6, r4
 8005a7a:	d109      	bne.n	8005a90 <__libc_init_array+0x24>
 8005a7c:	4d0b      	ldr	r5, [pc, #44]	@ (8005aac <__libc_init_array+0x40>)
 8005a7e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ab0 <__libc_init_array+0x44>)
 8005a80:	f000 f91e 	bl	8005cc0 <_init>
 8005a84:	1b64      	subs	r4, r4, r5
 8005a86:	10a4      	asrs	r4, r4, #2
 8005a88:	2600      	movs	r6, #0
 8005a8a:	42a6      	cmp	r6, r4
 8005a8c:	d105      	bne.n	8005a9a <__libc_init_array+0x2e>
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a94:	4798      	blx	r3
 8005a96:	3601      	adds	r6, #1
 8005a98:	e7ee      	b.n	8005a78 <__libc_init_array+0xc>
 8005a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a9e:	4798      	blx	r3
 8005aa0:	3601      	adds	r6, #1
 8005aa2:	e7f2      	b.n	8005a8a <__libc_init_array+0x1e>
 8005aa4:	08006ee4 	.word	0x08006ee4
 8005aa8:	08006ee4 	.word	0x08006ee4
 8005aac:	08006ee4 	.word	0x08006ee4
 8005ab0:	08006ee8 	.word	0x08006ee8

08005ab4 <__retarget_lock_init_recursive>:
 8005ab4:	4770      	bx	lr

08005ab6 <__retarget_lock_acquire_recursive>:
 8005ab6:	4770      	bx	lr

08005ab8 <__retarget_lock_release_recursive>:
 8005ab8:	4770      	bx	lr
	...

08005abc <_free_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4605      	mov	r5, r0
 8005ac0:	2900      	cmp	r1, #0
 8005ac2:	d041      	beq.n	8005b48 <_free_r+0x8c>
 8005ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ac8:	1f0c      	subs	r4, r1, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	bfb8      	it	lt
 8005ace:	18e4      	addlt	r4, r4, r3
 8005ad0:	f000 f83e 	bl	8005b50 <__malloc_lock>
 8005ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b4c <_free_r+0x90>)
 8005ad6:	6813      	ldr	r3, [r2, #0]
 8005ad8:	b933      	cbnz	r3, 8005ae8 <_free_r+0x2c>
 8005ada:	6063      	str	r3, [r4, #4]
 8005adc:	6014      	str	r4, [r2, #0]
 8005ade:	4628      	mov	r0, r5
 8005ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ae4:	f000 b83a 	b.w	8005b5c <__malloc_unlock>
 8005ae8:	42a3      	cmp	r3, r4
 8005aea:	d908      	bls.n	8005afe <_free_r+0x42>
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	1821      	adds	r1, r4, r0
 8005af0:	428b      	cmp	r3, r1
 8005af2:	bf01      	itttt	eq
 8005af4:	6819      	ldreq	r1, [r3, #0]
 8005af6:	685b      	ldreq	r3, [r3, #4]
 8005af8:	1809      	addeq	r1, r1, r0
 8005afa:	6021      	streq	r1, [r4, #0]
 8005afc:	e7ed      	b.n	8005ada <_free_r+0x1e>
 8005afe:	461a      	mov	r2, r3
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	b10b      	cbz	r3, 8005b08 <_free_r+0x4c>
 8005b04:	42a3      	cmp	r3, r4
 8005b06:	d9fa      	bls.n	8005afe <_free_r+0x42>
 8005b08:	6811      	ldr	r1, [r2, #0]
 8005b0a:	1850      	adds	r0, r2, r1
 8005b0c:	42a0      	cmp	r0, r4
 8005b0e:	d10b      	bne.n	8005b28 <_free_r+0x6c>
 8005b10:	6820      	ldr	r0, [r4, #0]
 8005b12:	4401      	add	r1, r0
 8005b14:	1850      	adds	r0, r2, r1
 8005b16:	4283      	cmp	r3, r0
 8005b18:	6011      	str	r1, [r2, #0]
 8005b1a:	d1e0      	bne.n	8005ade <_free_r+0x22>
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	6053      	str	r3, [r2, #4]
 8005b22:	4408      	add	r0, r1
 8005b24:	6010      	str	r0, [r2, #0]
 8005b26:	e7da      	b.n	8005ade <_free_r+0x22>
 8005b28:	d902      	bls.n	8005b30 <_free_r+0x74>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	602b      	str	r3, [r5, #0]
 8005b2e:	e7d6      	b.n	8005ade <_free_r+0x22>
 8005b30:	6820      	ldr	r0, [r4, #0]
 8005b32:	1821      	adds	r1, r4, r0
 8005b34:	428b      	cmp	r3, r1
 8005b36:	bf04      	itt	eq
 8005b38:	6819      	ldreq	r1, [r3, #0]
 8005b3a:	685b      	ldreq	r3, [r3, #4]
 8005b3c:	6063      	str	r3, [r4, #4]
 8005b3e:	bf04      	itt	eq
 8005b40:	1809      	addeq	r1, r1, r0
 8005b42:	6021      	streq	r1, [r4, #0]
 8005b44:	6054      	str	r4, [r2, #4]
 8005b46:	e7ca      	b.n	8005ade <_free_r+0x22>
 8005b48:	bd38      	pop	{r3, r4, r5, pc}
 8005b4a:	bf00      	nop
 8005b4c:	2002607c 	.word	0x2002607c

08005b50 <__malloc_lock>:
 8005b50:	4801      	ldr	r0, [pc, #4]	@ (8005b58 <__malloc_lock+0x8>)
 8005b52:	f7ff bfb0 	b.w	8005ab6 <__retarget_lock_acquire_recursive>
 8005b56:	bf00      	nop
 8005b58:	20026078 	.word	0x20026078

08005b5c <__malloc_unlock>:
 8005b5c:	4801      	ldr	r0, [pc, #4]	@ (8005b64 <__malloc_unlock+0x8>)
 8005b5e:	f7ff bfab 	b.w	8005ab8 <__retarget_lock_release_recursive>
 8005b62:	bf00      	nop
 8005b64:	20026078 	.word	0x20026078

08005b68 <__sflush_r>:
 8005b68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b70:	0716      	lsls	r6, r2, #28
 8005b72:	4605      	mov	r5, r0
 8005b74:	460c      	mov	r4, r1
 8005b76:	d454      	bmi.n	8005c22 <__sflush_r+0xba>
 8005b78:	684b      	ldr	r3, [r1, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	dc02      	bgt.n	8005b84 <__sflush_r+0x1c>
 8005b7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	dd48      	ble.n	8005c16 <__sflush_r+0xae>
 8005b84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b86:	2e00      	cmp	r6, #0
 8005b88:	d045      	beq.n	8005c16 <__sflush_r+0xae>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b90:	682f      	ldr	r7, [r5, #0]
 8005b92:	6a21      	ldr	r1, [r4, #32]
 8005b94:	602b      	str	r3, [r5, #0]
 8005b96:	d030      	beq.n	8005bfa <__sflush_r+0x92>
 8005b98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	0759      	lsls	r1, r3, #29
 8005b9e:	d505      	bpl.n	8005bac <__sflush_r+0x44>
 8005ba0:	6863      	ldr	r3, [r4, #4]
 8005ba2:	1ad2      	subs	r2, r2, r3
 8005ba4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ba6:	b10b      	cbz	r3, 8005bac <__sflush_r+0x44>
 8005ba8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005baa:	1ad2      	subs	r2, r2, r3
 8005bac:	2300      	movs	r3, #0
 8005bae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bb0:	6a21      	ldr	r1, [r4, #32]
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b0      	blx	r6
 8005bb6:	1c43      	adds	r3, r0, #1
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	d106      	bne.n	8005bca <__sflush_r+0x62>
 8005bbc:	6829      	ldr	r1, [r5, #0]
 8005bbe:	291d      	cmp	r1, #29
 8005bc0:	d82b      	bhi.n	8005c1a <__sflush_r+0xb2>
 8005bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8005c6c <__sflush_r+0x104>)
 8005bc4:	410a      	asrs	r2, r1
 8005bc6:	07d6      	lsls	r6, r2, #31
 8005bc8:	d427      	bmi.n	8005c1a <__sflush_r+0xb2>
 8005bca:	2200      	movs	r2, #0
 8005bcc:	6062      	str	r2, [r4, #4]
 8005bce:	04d9      	lsls	r1, r3, #19
 8005bd0:	6922      	ldr	r2, [r4, #16]
 8005bd2:	6022      	str	r2, [r4, #0]
 8005bd4:	d504      	bpl.n	8005be0 <__sflush_r+0x78>
 8005bd6:	1c42      	adds	r2, r0, #1
 8005bd8:	d101      	bne.n	8005bde <__sflush_r+0x76>
 8005bda:	682b      	ldr	r3, [r5, #0]
 8005bdc:	b903      	cbnz	r3, 8005be0 <__sflush_r+0x78>
 8005bde:	6560      	str	r0, [r4, #84]	@ 0x54
 8005be0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005be2:	602f      	str	r7, [r5, #0]
 8005be4:	b1b9      	cbz	r1, 8005c16 <__sflush_r+0xae>
 8005be6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bea:	4299      	cmp	r1, r3
 8005bec:	d002      	beq.n	8005bf4 <__sflush_r+0x8c>
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f7ff ff64 	bl	8005abc <_free_r>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bf8:	e00d      	b.n	8005c16 <__sflush_r+0xae>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	47b0      	blx	r6
 8005c00:	4602      	mov	r2, r0
 8005c02:	1c50      	adds	r0, r2, #1
 8005c04:	d1c9      	bne.n	8005b9a <__sflush_r+0x32>
 8005c06:	682b      	ldr	r3, [r5, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0c6      	beq.n	8005b9a <__sflush_r+0x32>
 8005c0c:	2b1d      	cmp	r3, #29
 8005c0e:	d001      	beq.n	8005c14 <__sflush_r+0xac>
 8005c10:	2b16      	cmp	r3, #22
 8005c12:	d11e      	bne.n	8005c52 <__sflush_r+0xea>
 8005c14:	602f      	str	r7, [r5, #0]
 8005c16:	2000      	movs	r0, #0
 8005c18:	e022      	b.n	8005c60 <__sflush_r+0xf8>
 8005c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c1e:	b21b      	sxth	r3, r3
 8005c20:	e01b      	b.n	8005c5a <__sflush_r+0xf2>
 8005c22:	690f      	ldr	r7, [r1, #16]
 8005c24:	2f00      	cmp	r7, #0
 8005c26:	d0f6      	beq.n	8005c16 <__sflush_r+0xae>
 8005c28:	0793      	lsls	r3, r2, #30
 8005c2a:	680e      	ldr	r6, [r1, #0]
 8005c2c:	bf08      	it	eq
 8005c2e:	694b      	ldreq	r3, [r1, #20]
 8005c30:	600f      	str	r7, [r1, #0]
 8005c32:	bf18      	it	ne
 8005c34:	2300      	movne	r3, #0
 8005c36:	eba6 0807 	sub.w	r8, r6, r7
 8005c3a:	608b      	str	r3, [r1, #8]
 8005c3c:	f1b8 0f00 	cmp.w	r8, #0
 8005c40:	dde9      	ble.n	8005c16 <__sflush_r+0xae>
 8005c42:	6a21      	ldr	r1, [r4, #32]
 8005c44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c46:	4643      	mov	r3, r8
 8005c48:	463a      	mov	r2, r7
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b0      	blx	r6
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	dc08      	bgt.n	8005c64 <__sflush_r+0xfc>
 8005c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c5a:	81a3      	strh	r3, [r4, #12]
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c64:	4407      	add	r7, r0
 8005c66:	eba8 0800 	sub.w	r8, r8, r0
 8005c6a:	e7e7      	b.n	8005c3c <__sflush_r+0xd4>
 8005c6c:	dfbffffe 	.word	0xdfbffffe

08005c70 <_fflush_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	690b      	ldr	r3, [r1, #16]
 8005c74:	4605      	mov	r5, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	b913      	cbnz	r3, 8005c80 <_fflush_r+0x10>
 8005c7a:	2500      	movs	r5, #0
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	b118      	cbz	r0, 8005c8a <_fflush_r+0x1a>
 8005c82:	6a03      	ldr	r3, [r0, #32]
 8005c84:	b90b      	cbnz	r3, 8005c8a <_fflush_r+0x1a>
 8005c86:	f7ff fe23 	bl	80058d0 <__sinit>
 8005c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0f3      	beq.n	8005c7a <_fflush_r+0xa>
 8005c92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c94:	07d0      	lsls	r0, r2, #31
 8005c96:	d404      	bmi.n	8005ca2 <_fflush_r+0x32>
 8005c98:	0599      	lsls	r1, r3, #22
 8005c9a:	d402      	bmi.n	8005ca2 <_fflush_r+0x32>
 8005c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c9e:	f7ff ff0a 	bl	8005ab6 <__retarget_lock_acquire_recursive>
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	f7ff ff5f 	bl	8005b68 <__sflush_r>
 8005caa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cac:	07da      	lsls	r2, r3, #31
 8005cae:	4605      	mov	r5, r0
 8005cb0:	d4e4      	bmi.n	8005c7c <_fflush_r+0xc>
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	059b      	lsls	r3, r3, #22
 8005cb6:	d4e1      	bmi.n	8005c7c <_fflush_r+0xc>
 8005cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cba:	f7ff fefd 	bl	8005ab8 <__retarget_lock_release_recursive>
 8005cbe:	e7dd      	b.n	8005c7c <_fflush_r+0xc>

08005cc0 <_init>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	bf00      	nop
 8005cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc6:	bc08      	pop	{r3}
 8005cc8:	469e      	mov	lr, r3
 8005cca:	4770      	bx	lr

08005ccc <_fini>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	bf00      	nop
 8005cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd2:	bc08      	pop	{r3}
 8005cd4:	469e      	mov	lr, r3
 8005cd6:	4770      	bx	lr
